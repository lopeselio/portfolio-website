{"version":3,"file":"slate.es.js","sources":["../src/utils/key-utils.js","../src/models/data.js","../src/models/document.js","../src/models/inline.js","../src/models/mark.js","../src/models/leaf.js","../src/utils/memoize.js","../src/models/text.js","../src/models/node.js","../src/models/block.js","../src/utils/path-utils.js","../src/models/point.js","../src/models/decoration.js","../src/utils/is-object.js","../src/models/range.js","../src/models/selection.js","../src/models/value.js","../src/operations/apply.js","../src/operations/invert.js","../src/models/operation.js","../src/models/change.js","../src/plugins/commands.js","../src/utils/text-utils.js","../src/commands/at-range.js","../src/commands/by-path.js","../src/commands/on-history.js","../src/commands/on-selection.js","../src/commands/on-value.js","../src/plugins/queries.js","../src/utils/slate-error.js","../src/plugins/schema.js","../src/commands/with-intent.js","../src/plugins/core.js","../src/controllers/editor.js","../src/utils/mixin.js","../src/interfaces/object.js","../src/interfaces/model.js","../src/interfaces/node.js","../src/interfaces/element.js","../src/interfaces/range.js","../src/index.js"],"sourcesContent":["/**\n * An auto-incrementing index for generating keys.\n *\n * @type {Number}\n */\n\nlet n\n\n/**\n * The global key generating function.\n *\n * @type {Function}\n */\n\nlet generate\n\n/**\n * Create a key, using a provided key if available.\n *\n * @param {String|Void} key\n * @return {String}\n */\n\nfunction create(key) {\n  if (key == null) {\n    return generate()\n  }\n\n  if (typeof key === 'string') {\n    return key\n  }\n\n  throw new Error(`Keys must be strings, but you passed: ${key}`)\n}\n\n/**\n * Set a different unique ID generating `function`.\n *\n * @param {Function} func\n */\n\nfunction setGenerator(func) {\n  generate = func\n}\n\n/**\n * Reset the key generating function to its initial state.\n */\n\nfunction resetGenerator() {\n  n = 0\n  generate = () => `${n++}`\n}\n\n/**\n * Set the initial state.\n */\n\nresetGenerator()\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  create,\n  setGenerator,\n  resetGenerator,\n}\n","import isPlainObject from 'is-plain-object'\nimport { Map } from 'immutable'\n\n/**\n * Data.\n *\n * This isn't an immutable record, it's just a thin wrapper around `Map` so that\n * we can allow for more convenient creation.\n *\n * @type {Object}\n */\n\nclass Data {\n  /**\n   * Create a new `Data` with `attrs`.\n   *\n   * @param {Object|Data|Map} attrs\n   * @return {Data} data\n   */\n\n  static create(attrs = {}) {\n    if (Map.isMap(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Data.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Data.create\\` only accepts objects or maps, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Data` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Data}\n   */\n\n  static fromJSON(object) {\n    return new Map(object)\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Data.fromJSON\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Data\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n}\n\n/**\n * Document.\n *\n * @type {Document}\n */\n\nclass Document extends Record(DEFAULTS) {\n  /**\n   * Create a new `Document` with `attrs`.\n   *\n   * @param {Object|Array|List|Text} attrs\n   * @return {Document}\n   */\n\n  static create(attrs = {}) {\n    if (Document.isDocument(attrs)) {\n      return attrs\n    }\n\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      attrs = { nodes: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Document.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Document.create\\` only accepts objects, arrays, lists or documents, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Document` from a JSON `object`.\n   *\n   * @param {Object|Document} object\n   * @return {Document}\n   */\n\n  static fromJSON(object) {\n    if (Document.isDocument(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [] } = object\n\n    const document = new Document({\n      key,\n      data: new Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return document\n  }\n\n  /**\n   * Return a JSON representation of the document.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Document}\n */\n\nexport default Document\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n  type: undefined,\n}\n\n/**\n * Inline.\n *\n * @type {Inline}\n */\n\nclass Inline extends Record(DEFAULTS) {\n  /**\n   * Create a new `Inline` with `attrs`.\n   *\n   * @param {Object|String|Inline} attrs\n   * @return {Inline}\n   */\n\n  static create(attrs = {}) {\n    if (Inline.isInline(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs === 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Inline.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Inline.create\\` only accepts objects, strings or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Inlines` from an array.\n   *\n   * @param {Array<Inline|Object>|List<Inline|Object>} elements\n   * @return {List<Inline>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Inline.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Inline.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Inline` from a JSON `object`.\n   *\n   * @param {Object|Inline} object\n   * @return {Inline}\n   */\n\n  static fromJSON(object) {\n    if (Inline.isInline(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [], type } = object\n\n    if (typeof type !== 'string') {\n      throw new Error('`Inline.fromJS` requires a `type` string.')\n    }\n\n    const inline = new Inline({\n      key,\n      type,\n      data: new Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return inline\n  }\n\n  /**\n   * Check if `any` is a list of inlines.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isInlineList(any) {\n    return List.isList(any) && any.every(item => Inline.isInline(item))\n  }\n\n  /**\n   * Return a JSON representation of the inline.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Inline}\n */\n\nexport default Inline\n","import isPlainObject from 'is-plain-object'\nimport { Map, Record, Set } from 'immutable'\n\nimport Data from './data'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  type: undefined,\n}\n\n/**\n * Mark.\n *\n * @type {Mark}\n */\n\nclass Mark extends Record(DEFAULTS) {\n  /**\n   * Create a new `Mark` with `attrs`.\n   *\n   * @param {Object|Mark} attrs\n   * @return {Mark}\n   */\n\n  static create(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs === 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Mark.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Mark.create\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a set of marks.\n   *\n   * @param {Array<Object|Mark>} elements\n   * @return {Set<Mark>}\n   */\n\n  static createSet(elements) {\n    if (Set.isSet(elements) || Array.isArray(elements)) {\n      const marks = new Set(elements.map(Mark.create))\n      return marks\n    }\n\n    if (elements == null) {\n      return Set()\n    }\n\n    throw new Error(\n      `\\`Mark.createSet\\` only accepts sets, arrays or null, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable mark properties from `attrs`.\n   *\n   * @param {Object|String|Mark} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs === 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Mark.createProperties\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Mark` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Mark}\n   */\n\n  static fromJSON(object) {\n    const { data = {}, type } = object\n\n    if (typeof type !== 'string') {\n      throw new Error('`Mark.fromJS` requires a `type` string.')\n    }\n\n    const mark = new Mark({\n      type,\n      data: new Map(data),\n    })\n\n    return mark\n  }\n\n  /**\n   * Check if `any` is a set of marks.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isMarkSet(any) {\n    return Set.isSet(any) && any.every(item => Mark.isMark(item))\n  }\n\n  /**\n   * Return a JSON representation of the mark.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Mark}\n */\n\nexport default Mark\n","import isPlainObject from 'is-plain-object'\nimport { List, Record, Set } from 'immutable'\n\nimport Mark from './mark'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  marks: undefined,\n  text: undefined,\n}\n\n/**\n * Leaf.\n *\n * @type {Leaf}\n */\n\nclass Leaf extends Record(DEFAULTS) {\n  /**\n   * Create a new `Leaf` with `attrs`.\n   *\n   * @param {Object|Leaf} attrs\n   * @return {Leaf}\n   */\n\n  static create(attrs = {}) {\n    if (Leaf.isLeaf(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs === 'string') {\n      attrs = { text: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Leaf.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Leaf.create\\` only accepts objects, strings or leaves, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a valid List of `Leaf` from `leaves`\n   *\n   * @param {List<Leaf>} leaves\n   * @return {List<Leaf>}\n   */\n\n  static createLeaves(leaves) {\n    if (leaves.size <= 1) return leaves\n\n    let invalid = false\n\n    // TODO: we can make this faster with [List] and then flatten\n    const result = List().withMutations(cache => {\n      // Search from the leaves left end to find invalid node;\n      leaves.findLast((leaf, index) => {\n        const firstLeaf = cache.first()\n\n        // If the first leaf of cache exist, check whether the first leaf is connectable with the current leaf\n        if (firstLeaf) {\n          // If marks equals, then the two leaves can be connected\n          if (firstLeaf.marks.equals(leaf.marks)) {\n            invalid = true\n            cache.set(0, firstLeaf.set('text', `${leaf.text}${firstLeaf.text}`))\n            return\n          }\n\n          // If the cached leaf is empty, drop the empty leaf with the upcoming leaf\n          if (firstLeaf.text === '') {\n            invalid = true\n            cache.set(0, leaf)\n            return\n          }\n\n          // If the current leaf is empty, drop the leaf\n          if (leaf.text === '') {\n            invalid = true\n            return\n          }\n        }\n\n        cache.unshift(leaf)\n      })\n    })\n\n    if (!invalid) return leaves\n    return result\n  }\n\n  /**\n   * Split a list of leaves to two lists; if the leaves are valid leaves, the returned leaves are also valid\n   * Corner Cases:\n   *   1. if offset is smaller than 0, then return [List(), leaves]\n   *   2. if offset is bigger than the text length, then return [leaves, List()]\n   *\n   * @param {List<Leaf> leaves\n   * @return {Array<List<Leaf>>}\n   */\n\n  static splitLeaves(leaves, offset) {\n    if (offset < 0) return [List(), leaves]\n\n    if (leaves.size === 0) {\n      return [List(), List()]\n    }\n\n    let endOffset = 0\n    let index = -1\n    let left, right\n\n    leaves.find(leaf => {\n      index++\n      const startOffset = endOffset\n      const { text } = leaf\n      endOffset += text.length\n\n      if (endOffset < offset) return false\n      if (startOffset > offset) return false\n\n      const length = offset - startOffset\n      left = leaf.set('text', text.slice(0, length))\n      right = leaf.set('text', text.slice(length))\n      return true\n    })\n\n    if (!left) return [leaves, List()]\n\n    if (left.text === '') {\n      if (index === 0) {\n        return [List.of(left), leaves]\n      }\n\n      return [leaves.take(index), leaves.skip(index)]\n    }\n\n    if (right.text === '') {\n      if (index === leaves.size - 1) {\n        return [leaves, List.of(right)]\n      }\n\n      return [leaves.take(index + 1), leaves.skip(index + 1)]\n    }\n\n    return [\n      leaves.take(index).push(left),\n      leaves.skip(index + 1).unshift(right),\n    ]\n  }\n\n  /**\n   * Create a `Leaf` list from `attrs`.\n   *\n   * @param {Array<Leaf|Object>|List<Leaf|Object>} attrs\n   * @return {List<Leaf>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Leaf.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Leaf.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Leaf` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Leaf}\n   */\n\n  static fromJSON(object) {\n    const { text = '', marks = [] } = object\n\n    const leaf = new Leaf({\n      text,\n      marks: Set(marks.map(Mark.fromJSON)),\n    })\n\n    return leaf\n  }\n\n  /**\n   * Check if `any` is a list of leaves.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isLeafList(any) {\n    return List.isList(any) && any.every(item => Leaf.isLeaf(item))\n  }\n\n  /**\n   * Update a `mark` at leaf, replace with newMark\n   *\n   * @param {Mark} mark\n   * @param {Mark} newMark\n   * @returns {Leaf}\n   */\n\n  updateMark(mark, newMark) {\n    const { marks } = this\n    if (newMark.equals(mark)) return this\n    if (!marks.has(mark)) return this\n    const newMarks = marks.withMutations(collection => {\n      collection.remove(mark).add(newMark)\n    })\n    return this.set('marks', newMarks)\n  }\n\n  /**\n   * Add a `mark` to the leaf.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  addMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.add(mark))\n  }\n\n  /**\n   * Add a `set` of marks to the leaf.\n   *\n   * @param {Set<Mark>} set\n   * @returns {Text}\n   */\n\n  addMarks(set) {\n    const { marks } = this\n    return this.set('marks', marks.union(set))\n  }\n\n  /**\n   * Insert a text `string` into the leaf at `offset`.\n   *\n   * @param {Number} offset\n   * @param {String} string\n   * @return {Leaf}\n   */\n\n  insertText(offset, string) {\n    const { text } = this\n    const next = text.slice(0, offset) + string + text.slice(offset)\n    return this.set('text', next)\n  }\n\n  /**\n   * Remove a `mark` from the leaf.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  removeMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.remove(mark))\n  }\n\n  /**\n   * Return a JSON representation of the leaf.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      text: this.text,\n      marks: this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Leaf}\n */\n\nexport default Leaf\n","/* global WeakMap, Map, Symbol */\n\n/**\n * GLOBAL: True if memoization should is enabled.\n *\n * @type {Boolean}\n */\n\nlet ENABLED = true\n\n/**\n * The leaf node of a cache tree. Used to support variable argument length. A\n * unique object, so that native Maps will key it by reference.\n *\n * @type {Symbol}\n */\n\nconst LEAF = Symbol('LEAF')\n\n/**\n * The node of a cache tree for a WeakMap to store cache visited by objects\n *\n * @type {Symbol}\n */\n\nconst STORE_KEY = Symbol('STORE_KEY')\n\n/**\n * Values to represent a memoized undefined and null value. Allows efficient value\n * retrieval using Map.get only.\n *\n * @type {Symbol}\n */\n\nconst UNDEFINED = Symbol('undefined')\nconst NULL = Symbol('null')\n\n/**\n * Default value for unset keys in native Maps\n *\n * @type {Undefined}\n */\n\nconst UNSET = undefined\n\n/**\n * Global Store for all cached values\n *\n * @type {WeakMap}\n */\n\nlet memoizeStore = new WeakMap()\n\n/**\n * Memoize all of the `properties` on a `object`.\n *\n * @param {Object} object\n * @param {Array} properties\n * @return {Record}\n */\n\nfunction memoize(object, properties) {\n  for (const property of properties) {\n    const original = object[property]\n\n    if (!original) {\n      throw new Error(`Object does not have a property named \"${property}\".`)\n    }\n\n    object[property] = function(...args) {\n      // If memoization is disabled, call into the original method.\n      if (!ENABLED) return original.apply(this, args)\n\n      if (!memoizeStore.has(this)) {\n        memoizeStore.set(this, {\n          noArgs: {},\n          hasArgs: {},\n        })\n      }\n\n      const { noArgs, hasArgs } = memoizeStore.get(this)\n\n      const takesArguments = args.length !== 0\n\n      let cachedValue\n      let keys\n\n      if (takesArguments) {\n        keys = [property, ...args]\n        cachedValue = getIn(hasArgs, keys)\n      } else {\n        cachedValue = noArgs[property]\n      }\n\n      // If we've got a result already, return it.\n      if (cachedValue !== UNSET) {\n        return cachedValue === UNDEFINED ? undefined : cachedValue\n      }\n\n      // Otherwise calculate what it should be once and cache it.\n      const value = original.apply(this, args)\n      const v = value === undefined ? UNDEFINED : value\n\n      if (takesArguments) {\n        setIn(hasArgs, keys, v)\n      } else {\n        noArgs[property] = v\n      }\n\n      return value\n    }\n  }\n}\n\n/**\n * Get a value at a key path in a tree of Map.\n *\n * If not set, returns UNSET.\n * If the set value is undefined, returns UNDEFINED.\n *\n * @param {Map} map\n * @param {Array} keys\n * @return {Any|UNSET|UNDEFINED}\n */\n\nfunction getIn(map, keys) {\n  for (let key of keys) {\n    if (key === undefined) {\n      key = UNDEFINED\n    } else if (key == null) {\n      key = NULL\n    }\n\n    if (typeof key === 'object') {\n      map = map[STORE_KEY] && map[STORE_KEY].get(key)\n    } else {\n      map = map[key]\n    }\n\n    if (map === UNSET) return UNSET\n  }\n\n  return map[LEAF]\n}\n\n/**\n * Set a value at a key path in a tree of Map, creating Maps on the go.\n *\n * @param {Map} map\n * @param {Array} keys\n * @param {Any} value\n * @return {Map}\n */\n\nfunction setIn(map, keys, value) {\n  let child = map\n\n  for (let key of keys) {\n    if (key === undefined) {\n      key = UNDEFINED\n    } else if (key == null) {\n      key = NULL\n    }\n\n    if (typeof key !== 'object') {\n      if (!child[key]) {\n        child[key] = {}\n      }\n\n      child = child[key]\n      continue\n    }\n\n    if (!child[STORE_KEY]) {\n      child[STORE_KEY] = new WeakMap()\n    }\n\n    if (!child[STORE_KEY].has(key)) {\n      const newChild = {}\n      child[STORE_KEY].set(key, newChild)\n      child = newChild\n      continue\n    }\n\n    child = child[STORE_KEY].get(key)\n  }\n\n  // The whole path has been created, so set the value to the bottom most map.\n  child[LEAF] = value\n  return map\n}\n\n/**\n * In DEV mode, clears the previously memoized values, globally.\n *\n * @return {Void}\n */\n\nfunction resetMemoization() {\n  memoizeStore = new WeakMap()\n}\n\n/**\n * In DEV mode, enable or disable the use of memoize values, globally.\n *\n * @param {Boolean} enabled\n * @return {Void}\n */\n\nfunction useMemoization(enabled) {\n  ENABLED = enabled\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default memoize\nexport { resetMemoization, useMemoization }\n","import isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { List, OrderedSet, Record, Set } from 'immutable'\n\nimport Leaf from './leaf'\nimport KeyUtils from '../utils/key-utils'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  leaves: undefined,\n  key: undefined,\n}\n\n/**\n * Text.\n *\n * @type {Text}\n */\n\nclass Text extends Record(DEFAULTS) {\n  /**\n   * Create a new `Text` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Text} attrs\n   * @return {Text}\n   */\n\n  static create(attrs = '') {\n    if (Text.isText(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs === 'string') {\n      attrs = { leaves: [{ text: attrs }] }\n    }\n\n    if (isPlainObject(attrs)) {\n      if (attrs.text) {\n        const { text, marks, key } = attrs\n        attrs = { key, leaves: [{ text, marks }] }\n      }\n\n      return Text.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Text.create\\` only accepts objects, arrays, strings or texts, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Texts` from `elements`.\n   *\n   * @param {Array<Text|Object>|List<Text|Object>} elements\n   * @return {List<Text>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Text.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Text.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Text` from a JSON `object`.\n   *\n   * @param {Object|Text} object\n   * @return {Text}\n   */\n\n  static fromJSON(object) {\n    if (Text.isText(object)) {\n      return object\n    }\n\n    const { key = KeyUtils.create() } = object\n    let { leaves } = object\n\n    if (!leaves) {\n      if (object.ranges) {\n        warning(\n          false,\n          'As of slate@0.27.0, the `ranges` property of Slate objects has been renamed to `leaves`.'\n        )\n\n        leaves = object.ranges\n      } else {\n        leaves = List()\n      }\n    }\n\n    if (Array.isArray(leaves)) {\n      leaves = List(leaves.map(x => Leaf.create(x)))\n    } else if (List.isList(leaves)) {\n      leaves = leaves.map(x => Leaf.create(x))\n    } else {\n      throw new Error('leaves must be either Array or Immutable.List')\n    }\n\n    if (leaves.size === 0) {\n      leaves = leaves.push(Leaf.create())\n    }\n\n    const node = new Text({\n      leaves: Leaf.createLeaves(leaves),\n      key,\n    })\n\n    return node\n  }\n\n  /**\n   * Check if `any` is a list of texts.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isTextList(any) {\n    return List.isList(any) && any.every(item => Text.isText(item))\n  }\n\n  /**\n   * Find the 'first' leaf at offset; By 'first' the alorighthm prefers `endOffset === offset` than `startOffset === offset`\n   * Corner Cases:\n   *   1. if offset is negative, return the first leaf;\n   *   2. if offset is larger than text length, the leaf is null, startOffset, endOffset and index is of the last leaf\n   *\n   * @param {number}\n   * @returns {Object}\n   *   @property {number} startOffset\n   *   @property {number} endOffset\n   *   @property {number} index\n   *   @property {Leaf} leaf\n   */\n\n  searchLeafAtOffset(offset) {\n    let endOffset = 0\n    let startOffset = 0\n    let index = -1\n\n    const leaf = this.leaves.find(l => {\n      index++\n      startOffset = endOffset\n      endOffset = startOffset + l.text.length\n      return endOffset >= offset\n    })\n\n    return {\n      leaf,\n      endOffset,\n      index,\n      startOffset,\n    }\n  }\n\n  /**\n   * Add a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  addMark(index, length, mark) {\n    const marks = Set.of(mark)\n    return this.addMarks(index, length, marks)\n  }\n\n  /**\n   * Add a `set` of marks at `index` and `length`.\n   * Corner Cases:\n   *   1. If empty text, and if length === 0 and index === 0, will make sure the text contain an empty leaf with the given mark.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Set<Mark>} set\n   * @return {Text}\n   */\n\n  addMarks(index, length, set) {\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n\n      if (!first) {\n        return this.set(\n          'leaves',\n          List.of(Leaf.fromJSON({ text: '', marks: set }))\n        )\n      }\n\n      const newFirst = first.addMarks(set)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (this.text === '') return this\n    if (length === 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.addMarks(set)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Derive the leaves for a list of `decorations`.\n   *\n   * @param {List} decorations (optional)\n   * @return {List<Leaf>}\n   */\n\n  getLeaves(decorations) {\n    let { leaves } = this\n\n    // PERF: We can exit early without decorations.\n    if (!decorations || decorations.size === 0) return leaves\n\n    // HACK: We shouldn't need this, because text nodes should never be in a\n    // position of not having any leaves...\n    if (leaves.size === 0) {\n      const marks = decorations.map(d => d.mark)\n      const leaf = Leaf.create({ marks })\n      return List([leaf])\n    }\n\n    // HACK: this shouldn't be necessary, because the loop below should handle\n    // the `0` case without failures. It may already even, not sure.\n    if (this.text.length === 0) {\n      const marks = decorations.map(d => d.mark)\n      const leaf = Leaf.create({ marks })\n      return List([leaf])\n    }\n\n    const { key, text } = this\n\n    decorations.forEach(dec => {\n      const { start, end, mark } = dec\n      const hasStart = start.key === key\n      const hasEnd = end.key === key\n\n      if (hasStart && hasEnd) {\n        const index = hasStart ? start.offset : 0\n        const length = hasEnd ? end.offset - index : text.length - index\n\n        if (length < 1) return\n        if (index >= text.length) return\n\n        if (index !== 0 || length < text.length) {\n          const [before, bundle] = Leaf.splitLeaves(leaves, index)\n          const [middle, after] = Leaf.splitLeaves(bundle, length)\n          leaves = before.concat(middle.map(x => x.addMark(mark)), after)\n          return\n        }\n      }\n\n      leaves = leaves.map(x => x.addMark(mark))\n    })\n\n    if (leaves === this.leaves) return leaves\n    return Leaf.createLeaves(leaves)\n  }\n\n  /**\n   * Get all of the active marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getActiveMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.intersect(leaf.marks)\n      if (result && result.size === 0) return false\n      return false\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the active marks on the text\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarks() {\n    if (this.leaves.size === 0) return Set()\n\n    const result = this.leaves.first().marks\n    if (result.size === 0) return result\n\n    return result.toOrderedSet().withMutations(x => {\n      this.leaves.forEach(c => {\n        x.intersect(c.marks)\n        if (x.size === 0) return false\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.union(leaf.marks)\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the marks on the text.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks on the text as an array\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    if (this.leaves.size === 0) return []\n    const first = this.leaves.first().marks\n    if (this.leaves.size === 1) return first.toArray()\n\n    const result = []\n\n    this.leaves.forEach(leaf => {\n      result.push(leaf.marks.toArray())\n    })\n\n    return Array.prototype.concat.apply(first.toArray(), result)\n  }\n\n  /**\n   * Get the marks on the text at `index`.\n   * Corner Cases:\n   *   1. if no text is before the index, and index !== 0, then return Set()\n   *   2. (for insert after split node or mark at range) if index === 0, and text === '', then return the leaf.marks\n   *   3. if index === 0, text !== '', return Set()\n   *\n   *\n   * @param {Number} index\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtIndex(index) {\n    const { leaf } = this.searchLeafAtOffset(index)\n    if (!leaf) return Set()\n    return leaf.marks\n  }\n\n  /**\n   * Insert `text` at `index`.\n   *\n   * @param {Numbder} offset\n   * @param {String} text\n   * @param {Set} marks (optional)\n   * @return {Text}\n   */\n\n  insertText(offset, text, marks) {\n    if (this.text === '') {\n      return this.set('leaves', List.of(Leaf.create({ text, marks })))\n    }\n\n    if (text.length === 0) return this\n    if (!marks) marks = Set()\n\n    const { startOffset, leaf, index } = this.searchLeafAtOffset(offset)\n    const delta = offset - startOffset\n    const beforeText = leaf.text.slice(0, delta)\n    const afterText = leaf.text.slice(delta)\n    const { leaves } = this\n\n    if (leaf.marks.equals(marks)) {\n      return this.set(\n        'leaves',\n        leaves.set(index, leaf.set('text', beforeText + text + afterText))\n      )\n    }\n\n    const nextLeaves = leaves.splice(\n      index,\n      1,\n      leaf.set('text', beforeText),\n      Leaf.create({ text, marks }),\n      leaf.set('text', afterText)\n    )\n\n    return this.setLeaves(nextLeaves)\n  }\n\n  /**\n   * Remove a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  removeMark(index, length, mark) {\n    if (this.text === '' && index === 0 && length === 0) {\n      const first = this.leaves.first()\n      if (!first) return this\n      const newFirst = first.removeMark(mark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.removeMark(mark)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Remove text from the text node at `start` for `length`.\n   *\n   * @param {Number} start\n   * @param {Number} length\n   * @return {Text}\n   */\n\n  removeText(start, length) {\n    if (length <= 0) return this\n    if (start >= this.text.length) return this\n\n    // PERF: For simple backspace, we can operate directly on the leaf\n    if (length === 1) {\n      const { leaf, index, startOffset } = this.searchLeafAtOffset(start + 1)\n      const offset = start - startOffset\n\n      if (leaf) {\n        if (leaf.text.length === 1) {\n          const leaves = this.leaves.remove(index)\n          return this.setLeaves(leaves)\n        }\n\n        const beforeText = leaf.text.slice(0, offset)\n        const afterText = leaf.text.slice(offset + length)\n        const text = beforeText + afterText\n\n        if (text.length > 0) {\n          return this.set(\n            'leaves',\n            this.leaves.set(index, leaf.set('text', text))\n          )\n        }\n      }\n    }\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, start)\n    const after = Leaf.splitLeaves(bundle, length)[1]\n    const leaves = Leaf.createLeaves(before.concat(after))\n\n    if (leaves.size === 1) {\n      const first = leaves.first()\n\n      if (first.text === '') {\n        return this.set(\n          'leaves',\n          List.of(first.set('marks', this.getActiveMarks()))\n        )\n      }\n    }\n\n    return this.set('leaves', leaves)\n  }\n\n  /**\n   * Return a JSON representation of the text.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      leaves: this.getLeaves()\n        .toArray()\n        .map(r => r.toJSON()),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Update a `mark` at `index` and `length` with `properties`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Text}\n   */\n\n  updateMark(index, length, mark, properties) {\n    const newMark = mark.merge(properties)\n\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n      if (!first) return this\n      const newFirst = first.updateMark(mark, newMark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n\n    const leaves = before.concat(\n      middle.map(x => x.updateMark(mark, newMark)),\n      after\n    )\n\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Split this text and return two different texts\n   * @param {Number} position\n   * @returns {Array<Text>}\n   */\n\n  splitText(offset) {\n    const splitted = Leaf.splitLeaves(this.leaves, offset)\n    const one = this.set('leaves', splitted[0])\n    const two = this.set('leaves', splitted[1]).regenerateKey()\n    return [one, two]\n  }\n\n  /**\n   * merge this text and another text at the end\n   * @param {Text} text\n   * @returns {Text}\n   */\n\n  mergeText(text) {\n    const leaves = this.leaves.concat(text.leaves)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Set leaves with normalized `leaves`\n   *\n   * @param {List} leaves\n   * @returns {Text}\n   */\n\n  setLeaves(leaves) {\n    leaves = Leaf.createLeaves(leaves)\n\n    if (leaves.size === 1) {\n      const first = leaves.first()\n\n      if (!first.marks || first.marks.size === 0) {\n        if (first.text === '') {\n          return this.set('leaves', List([Leaf.create()]))\n        }\n      }\n    }\n\n    if (leaves.size === 0) {\n      leaves = leaves.push(Leaf.create())\n    }\n\n    return this.set('leaves', leaves)\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Text.prototype, ['getActiveMarks', 'getMarks', 'getMarksAsArray'])\n\n/**\n * Export.\n *\n * @type {Text}\n */\n\nexport default Text\n","import isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { List } from 'immutable'\n\nimport Block from './block'\nimport Data from './data'\nimport Document from './document'\nimport Inline from './inline'\nimport Text from './text'\n\n/**\n * A pseudo-model that is used for its static methods only.\n *\n * @type {Node}\n */\n\nclass Node {\n  /**\n   * Create a new `Node` with `attrs`.\n   *\n   * @param {Object|Node} attrs\n   * @return {Node}\n   */\n\n  static create(attrs = {}) {\n    if (Node.isNode(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      let { object } = attrs\n\n      if (!object && attrs.kind) {\n        warning(\n          false,\n          'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.'\n        )\n\n        object = attrs.kind\n      }\n\n      switch (object) {\n        case 'block':\n          return Block.create(attrs)\n        case 'document':\n          return Document.create(attrs)\n        case 'inline':\n          return Inline.create(attrs)\n        case 'text':\n          return Text.create(attrs)\n\n        default: {\n          throw new Error('`Node.create` requires a `object` string.')\n        }\n      }\n    }\n\n    throw new Error(\n      `\\`Node.create\\` only accepts objects or nodes but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Nodes` from an array.\n   *\n   * @param {Array<Object|Node>} elements\n   * @return {List<Node>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = List(elements.map(Node.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Node.createList\\` only accepts lists or arrays, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable node properties from `attrs`.\n   *\n   * @param {Object|String|Node} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Block.isBlock(attrs) || Inline.isInline(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs === 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Node.createProperties\\` only accepts objects, strings, blocks or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Node` from a JSON `value`.\n   *\n   * @param {Object} value\n   * @return {Node}\n   */\n\n  static fromJSON(value) {\n    let { object } = value\n\n    if (!object && value.kind) {\n      warning(\n        false,\n        'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.'\n      )\n\n      object = value.kind\n    }\n\n    switch (object) {\n      case 'block':\n        return Block.fromJSON(value)\n      case 'document':\n        return Document.fromJSON(value)\n      case 'inline':\n        return Inline.fromJSON(value)\n      case 'text':\n        return Text.fromJSON(value)\n\n      default: {\n        throw new Error(\n          `\\`Node.fromJSON\\` requires an \\`object\\` of either 'block', 'document', 'inline' or 'text', but you passed: ${value}`\n        )\n      }\n    }\n  }\n\n  /**\n   * Check if `any` is a `Node`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNode(any) {\n    return (\n      Block.isBlock(any) ||\n      Document.isDocument(any) ||\n      Inline.isInline(any) ||\n      Text.isText(any)\n    )\n  }\n\n  /**\n   * Check if `any` is a list of nodes.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNodeList(any) {\n    return List.isList(any) && any.every(item => Node.isNode(item))\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Node\n","import isPlainObject from 'is-plain-object'\nimport { fromJS, List, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n  type: undefined,\n}\n\n/**\n * Block.\n *\n * @type {Block}\n */\n\nclass Block extends Record(DEFAULTS) {\n  /**\n   * Create a new `Block` from `attrs`.\n   *\n   * @param {Object|String|Block} attrs\n   * @return {Block}\n   */\n\n  static create(attrs = {}) {\n    if (Block.isBlock(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs === 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Block.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Block.create\\` only accepts objects, strings or blocks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Blocks` from `attrs`.\n   *\n   * @param {Array<Block|Object>|List<Block|Object>} attrs\n   * @return {List<Block>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Block.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Block.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Block` from a JSON `object`.\n   *\n   * @param {Object|Block} object\n   * @return {Block}\n   */\n\n  static fromJSON(object) {\n    if (Block.isBlock(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [], type } = object\n\n    if (typeof type !== 'string') {\n      throw new Error('`Block.fromJSON` requires a `type` string.')\n    }\n\n    const block = new Block({\n      key,\n      type,\n      data: fromJS(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return block\n  }\n\n  /**\n   * Check if `any` is a block list.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isBlockList(any) {\n    return List.isList(any) && any.every(item => Block.isBlock(item))\n  }\n\n  /**\n   * Return a JSON representation of the block.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Block}\n */\n\nexport default Block\n","import { List } from 'immutable'\n\n/**\n * Compare paths `path` and `target` to see which is before or after.\n *\n * @param {List} path\n * @param {List} target\n * @return {Number|Null}\n */\n\nfunction compare(path, target) {\n  const m = min(path, target)\n\n  for (let i = 0; i < m; i++) {\n    const pv = path.get(i)\n    const tv = target.get(i)\n\n    // If the path's value is ever less than the target's, it's before.\n    if (pv < tv) return -1\n\n    // If the target's value is ever less than the path's, it's after.\n    if (pv > tv) return 1\n  }\n\n  // Paths should now be equal, otherwise something is wrong\n  return path.size === target.size ? 0 : null\n}\n\n/**\n * Create a path from `attrs`.\n *\n * @param {Array|List} attrs\n * @return {List}\n */\n\nfunction create(attrs) {\n  if (attrs == null) {\n    return null\n  }\n\n  if (List.isList(attrs)) {\n    return attrs\n  }\n\n  if (Array.isArray(attrs)) {\n    return List(attrs)\n  }\n\n  throw new Error(\n    `Paths can only be created from arrays or lists, but you passed: ${attrs}`\n  )\n}\n\n/**\n * Crop paths `a` and `b` to an equal size, defaulting to the shortest.\n *\n * @param {List} a\n * @param {List} b\n */\n\nfunction crop(a, b, size = min(a, b)) {\n  const ca = a.slice(0, size)\n  const cb = b.slice(0, size)\n  return [ca, cb]\n}\n\n/**\n * Decrement a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\nfunction decrement(path, n = 1, index = path.size - 1) {\n  return increment(path, 0 - n, index)\n}\n\n/**\n * Get all ancestor paths of th given path.\n *\n * @param {List} path\n * @returns {List}\n */\n\nfunction getAncestors(path) {\n  const ancestors = List().withMutations(list => {\n    for (let i = 0; i < path.size; i++) {\n      list.push(path.slice(0, i))\n    }\n  })\n\n  return ancestors\n}\n\n/**\n * Increment a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\nfunction increment(path, n = 1, index = path.size - 1) {\n  const value = path.get(index)\n  const newValue = value + n\n  const newPath = path.set(index, newValue)\n  return newPath\n}\n\n/**\n * Is a `path` above another `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isAbove(path, target) {\n  const [p, t] = crop(path, target)\n  return path.size < target.size && compare(p, t) === 0\n}\n\n/**\n * Is a `path` after another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isAfter(path, target) {\n  const [p, t] = crop(path, target)\n  return compare(p, t) === 1\n}\n\n/**\n * Is a `path` before another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isBefore(path, target) {\n  const [p, t] = crop(path, target)\n  return compare(p, t) === -1\n}\n\n/**\n * Is a `path` equal to another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isEqual(path, target) {\n  return path.equals(target)\n}\n\n/**\n * Is a `path` older than a `target` path? Meaning that it ends as an older\n * sibling of one of the indexes in the target.\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isOlder(path, target) {\n  const index = path.size - 1\n  const [p, t] = crop(path, target, index)\n  const pl = path.get(index)\n  const tl = target.get(index)\n  return isEqual(p, t) && pl > tl\n}\n\n/**\n * Is a `path` a sibling of a `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isSibling(path, target) {\n  if (path.size !== target.size) return false\n  const p = path.butLast()\n  const t = target.butLast()\n  return p.equals(t)\n}\n\n/**\n * Is a `path` younger than a `target` path? Meaning that it ends as a younger\n * sibling of one of the indexes in the target.\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isYounger(path, target) {\n  const index = path.size - 1\n  const [p, t] = crop(path, target, index)\n  const pl = path.get(index)\n  const tl = target.get(index)\n  return isEqual(p, t) && pl < tl\n}\n\n/**\n * Lift a `path` to refer to its parent.\n *\n * @param {List} path\n * @return {List}\n */\n\nfunction lift(path) {\n  const parent = path.slice(0, -1)\n  return parent\n}\n\n/**\n * Drop a `path`, returning the path from the first child.\n *\n * @param {List} path\n * @return {List}\n */\n\nfunction drop(path) {\n  const relative = path.slice(1)\n  return relative\n}\n\n/**\n * Get the maximum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\nfunction max(a, b) {\n  const n = Math.max(a.size, b.size)\n  return n\n}\n\n/**\n * Get the minimum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\nfunction min(a, b) {\n  const n = Math.min(a.size, b.size)\n  return n\n}\n\n/**\n * Get the common ancestor path of path `a` and path `b`.\n *\n * @param {List} a\n * @param {List} b\n * @return {List}\n */\n\nfunction relate(a, b) {\n  const array = []\n\n  for (let i = 0; i < a.size && i < b.size; i++) {\n    const av = a.get(i)\n    const bv = b.get(i)\n\n    // If the values aren't equal, they've diverged and don't share an ancestor.\n    if (av !== bv) break\n\n    // Otherwise, the current value is still a common ancestor.\n    array.push(av)\n  }\n\n  const path = create(array)\n  return path\n}\n\n/**\n * Transform a `path` by an `operation`, adjusting it to stay current.\n *\n * @param {List} path\n * @param {Operation} operation\n * @return {List<List>}\n */\n\nfunction transform(path, operation) {\n  const { type, position, path: p } = operation\n\n  if (\n    type === 'add_mark' ||\n    type === 'insert_text' ||\n    type === 'remove_mark' ||\n    type === 'remove_text' ||\n    type === 'set_mark' ||\n    type === 'set_node' ||\n    type === 'set_selection' ||\n    type === 'set_value' ||\n    path.size === 0\n  ) {\n    return List([path])\n  }\n\n  const pIndex = p.size - 1\n  const pEqual = isEqual(p, path)\n  const pYounger = isYounger(p, path)\n  const pAbove = isAbove(p, path)\n\n  if (type === 'insert_node') {\n    if (pEqual || pYounger || pAbove) {\n      path = increment(path, 1, pIndex)\n    }\n  }\n\n  if (type === 'remove_node') {\n    if (pYounger) {\n      path = decrement(path, 1, pIndex)\n    } else if (pEqual || pAbove) {\n      path = []\n    }\n  }\n\n  if (type === 'merge_node') {\n    if (pEqual || pYounger) {\n      path = decrement(path, 1, pIndex)\n    } else if (pAbove) {\n      path = decrement(path, 1, pIndex)\n      path = increment(path, position, pIndex + 1)\n    }\n  }\n\n  if (type === 'split_node') {\n    if (pEqual) {\n      path = [path, increment(path)]\n    } else if (pYounger) {\n      path = increment(path, 1, pIndex)\n    } else if (pAbove) {\n      if (path.get(pIndex + 1) >= position) {\n        path = increment(path, 1, pIndex)\n        path = decrement(path, position, pIndex + 1)\n      }\n    }\n  }\n\n  if (type === 'move_node') {\n    const { newPath: np } = operation\n\n    if (isEqual(p, np)) {\n      return List([path])\n    }\n\n    if (pAbove || pEqual) {\n      // We are comparing something that was moved\n      // The new path is unaffected unless the old path was the left-sibling of an ancestor\n      if (isYounger(p, np) && p.size < np.size) {\n        path = decrement(np, 1, min(np, p) - 1).concat(path.slice(p.size))\n      } else {\n        path = np.concat(path.slice(p.size))\n      }\n    } else {\n      // This is equivalent logic to remove_node for path\n      if (pYounger) {\n        path = decrement(path, 1, pIndex)\n      }\n\n      // This is the equivalent logic to insert_node for newPath\n      if (isYounger(np, path) || isEqual(np, path) || isAbove(np, path)) {\n        path = increment(path, 1, np.size - 1)\n      }\n    }\n  }\n\n  const paths = Array.isArray(path) ? path : [path]\n  return List(paths)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  compare,\n  create,\n  crop,\n  decrement,\n  getAncestors,\n  increment,\n  isAbove,\n  isAfter,\n  isBefore,\n  isEqual,\n  isOlder,\n  isSibling,\n  isYounger,\n  lift,\n  drop,\n  max,\n  min,\n  relate,\n  transform,\n}\n","import isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  key: undefined,\n  offset: undefined,\n  path: undefined,\n}\n\n/**\n * Point.\n *\n * @type {Point}\n */\n\nclass Point extends Record(DEFAULTS) {\n  /**\n   * Create a new `Point` with `attrs`.\n   *\n   * @param {Object|Point} attrs\n   * @return {Point}\n   */\n\n  static create(attrs = {}) {\n    if (Point.isPoint(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Point.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Point.create\\` only accepts objects or points, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable point properties from `attrs`.\n   *\n   * @param {Object|Point} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Point.isPoint(a)) {\n      return {\n        key: a.key,\n        offset: a.offset,\n        path: a.path,\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('key' in a) p.key = a.key\n      if ('offset' in a) p.offset = a.offset\n      if ('path' in a) p.path = PathUtils.create(a.path)\n\n      // If only a path is set, or only a key is set, ensure that the other is\n      // set to null so that it can be normalized back to the right value.\n      // Otherwise we won't realize that the path and key don't match anymore.\n      if ('path' in a && !('key' in a)) p.key = null\n      if ('key' in a && !('path' in a)) p.path = null\n\n      return p\n    }\n\n    throw new Error(\n      `\\`Point.createProperties\\` only accepts objects or points, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Point` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Point}\n   */\n\n  static fromJSON(object) {\n    const { key = null, offset = null, path = null } = object\n\n    const point = new Point({\n      key,\n      offset,\n      path: PathUtils.create(path),\n    })\n\n    return point\n  }\n\n  /**\n   * Check whether all properties of the point are set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return this.key != null && this.offset != null && this.path != null\n  }\n\n  /**\n   * Check whether any property of the point is not set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    return !this.isSet\n  }\n\n  /**\n   * Check whether the point is after another `point`.\n   *\n   * @return {Boolean}\n   */\n\n  isAfterPoint(point) {\n    if (this.isUnset) return false\n    const is =\n      (this.key === point.key && this.offset > point.offset) ||\n      PathUtils.compare(this.path, point.path) === 1\n    return is\n  }\n\n  /**\n   * Check whether the point is after a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isAfterRange(range) {\n    if (this.isUnset) return false\n    const is = this.isAfterPoint(range.end)\n    return is\n  }\n\n  /**\n   * Check whether the point is at the end of a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isAtEndOfRange(range) {\n    if (this.isUnset) return false\n    const is = this.equals(range.end)\n    return is\n  }\n\n  /**\n   * Check whether the point is at the start of a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isAtStartOfRange(range) {\n    if (this.isUnset) return false\n    const is = this.equals(range.start)\n    return is\n  }\n\n  /**\n   * Check whether the point is before another `point`.\n   *\n   * @return {Boolean}\n   */\n\n  isBeforePoint(point) {\n    if (this.isUnset) return false\n    const is =\n      (this.key === point.key && this.offset < point.offset) ||\n      PathUtils.compare(this.path, point.path) === -1\n    return is\n  }\n\n  /**\n   * Check whether the point is before a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isBeforeRange(range) {\n    if (this.isUnset) return false\n    const is = this.isBeforePoint(range.start)\n    return is\n  }\n\n  /**\n   * Check whether the point is inside a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isInRange(range) {\n    if (this.isUnset) return false\n    const is =\n      this.equals(range.start) ||\n      this.equals(range.end) ||\n      (this.isAfterPoint(range.start) && this.isBeforePoint(range.end))\n    return is\n  }\n\n  /**\n   * Check whether the point is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtEndOfNode(node) {\n    if (this.isUnset) return false\n    const last = node.getLastText()\n    const is = this.key === last.key && this.offset === last.text.length\n    return is\n  }\n\n  /**\n   * Check whether the point is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtStartOfNode(node) {\n    if (this.isUnset) return false\n\n    // PERF: Do a check for a `0` offset first since it's quickest.\n    if (this.offset !== 0) return false\n\n    const first = node.getFirstText()\n    const is = this.key === first.key\n    return is\n  }\n\n  /**\n   * Check whether the point is in a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isInNode(node) {\n    if (this.isUnset) return false\n    if (node.object === 'text' && node.key === this.key) return true\n    if (node.hasNode(this.key)) return true\n    return false\n  }\n\n  /**\n   * Move the point's offset backward `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Point}\n   */\n\n  moveBackward(n = 1) {\n    if (n === 0) return this\n    if (n < 0) return this.moveForward(-n)\n    const point = this.setOffset(this.offset - n)\n    return point\n  }\n\n  /**\n   * Move the point's offset forward `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Point}\n   */\n\n  moveForward(n = 1) {\n    if (n === 0) return this\n    if (n < 0) return this.moveBackward(-n)\n    const point = this.setOffset(this.offset + n)\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String|Number} path\n   * @param {Number} offset\n   * @return {Point}\n   */\n\n  moveTo(path, offset = 0) {\n    let key = this.key\n\n    if (typeof path === 'number') {\n      offset = path\n      path = this.path\n    } else if (typeof path === 'string') {\n      key = path\n      path = key === this.key ? this.path : null\n    } else {\n      key = path.equals(this.path) ? this.key : null\n    }\n\n    const point = this.merge({ key, path, offset })\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  moveToStartOfNode(node) {\n    const first = node.getFirstText()\n    const point = this.moveTo(first.key, 0)\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  moveToEndOfNode(node) {\n    const last = node.getLastText()\n    const point = this.moveTo(last.key, last.text.length)\n    return point\n  }\n\n  /**\n   * Normalize the point relative to a `node`, ensuring that its key and path\n   * reference a text node, or that it gets unset.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  normalize(node) {\n    // If both the key and path are null, there's no reference to a node, so\n    // make sure it is entirely unset.\n    if (this.key == null && this.path == null) {\n      return this.setOffset(null)\n    }\n\n    const { key, offset, path } = this\n\n    // PERF: this function gets called a lot.\n    // to avoid creating the key -> path lookup table, we attempt to look up by path first.\n    let target = path && node.getNode(path)\n\n    if (!target) {\n      target = node.getNode(key)\n\n      if (target) {\n        // There is a misalignment of path and key\n        const point = this.merge({\n          path: node.getPath(key),\n        })\n\n        return point\n      }\n    }\n\n    if (!target) {\n      warning(false, \"A point's `path` or `key` invalid and was reset!\")\n\n      const text = node.getFirstText()\n      if (!text) return Point.create()\n\n      const point = this.merge({\n        key: text.key,\n        offset: 0,\n        path: node.getPath(text.key),\n      })\n\n      return point\n    }\n\n    if (target.object !== 'text') {\n      warning(false, 'A point should not reference a non-text node!')\n\n      const text = target.getTextAtOffset(offset)\n      const before = target.getOffset(text.key)\n      const point = this.merge({\n        offset: offset - before,\n        key: text.key,\n        path: node.getPath(text.key),\n      })\n\n      return point\n    }\n\n    if (target && path && key && key !== target.key) {\n      warning(false, \"A point's `key` did not match its `path`!\")\n\n      // TODO: if we look up by path above and it differs by key, do we want to reset it to looking up by key?\n    }\n\n    const point = this.merge({\n      key: target.key,\n      path: path == null ? node.getPath(target.key) : path,\n      offset: offset == null ? 0 : Math.min(offset, target.text.length),\n    })\n\n    return point\n  }\n\n  /**\n   * Set the point's key to a new `key`.\n   *\n   * @param {String} key\n   * @return {Point}\n   */\n\n  setKey(key) {\n    if (key != null) {\n      key = KeyUtils.create(key)\n    }\n\n    const point = this.set('key', key)\n    return point\n  }\n\n  /**\n   * Set the point's offset to a new `offset`.\n   *\n   * @param {Number} offset\n   * @return {Point}\n   */\n\n  setOffset(offset) {\n    const point = this.set('offset', offset)\n    return point\n  }\n\n  /**\n   * Set the point's path to a new `path`.\n   *\n   * @param {List|Array} path\n   * @return {Point}\n   */\n\n  setPath(path) {\n    if (path != null) {\n      path = PathUtils.create(path)\n    }\n\n    const point = this.set('path', path)\n    return point\n  }\n\n  /**\n   * Return a JSON representation of the point.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      key: this.key,\n      offset: this.offset,\n      path: this.path && this.path.toArray(),\n    }\n\n    if (!options.preserveKeys) {\n      delete object.key\n    }\n\n    return object\n  }\n\n  /**\n   * Unset the point.\n   *\n   * @return {Point}\n   */\n\n  unset() {\n    return this.merge({\n      key: null,\n      offset: null,\n      path: null,\n    })\n  }\n}\n\n/**\n * Export.\n *\n * @type {Point}\n */\n\nexport default Point\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Mark from './mark'\nimport Point from './point'\nimport Range from './range'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n  mark: undefined,\n}\n\n/**\n * Decoration.\n *\n * @type {Decoration}\n */\n\nclass Decoration extends Record(DEFAULTS) {\n  /**\n   * Create a new `Decoration` with `attrs`.\n   *\n   * @param {Object|Decoration} attrs\n   * @return {Decoration}\n   */\n\n  static create(attrs = {}) {\n    if (Decoration.isDecoration(attrs)) {\n      return attrs\n    }\n\n    if (Range.isRange(attrs)) {\n      return Decoration.fromJSON(Range.createProperties(attrs))\n    }\n\n    if (isPlainObject(attrs)) {\n      return Decoration.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Decoration.create\\` only accepts objects or decorations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Decoration|Object>|List<Decoration|Object>} elements\n   * @return {List<Decoration>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Decoration.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Decoration.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable decoration properties from `attrs`.\n   *\n   * @param {Object|String|Decoration} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Decoration.isDecoration(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n        mark: Mark.create(a.mark),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      if ('mark' in a) p.mark = Mark.create(a.mark)\n      return p\n    }\n\n    throw new Error(\n      `\\`Decoration.createProperties\\` only accepts objects or decorations, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Decoration` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Decoration}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus, mark } = object\n\n    if (!mark) {\n      throw new Error(\n        `Decorations must be created with a \\`mark\\`, but you passed: ${JSON.stringify(\n          object\n        )}`\n      )\n    }\n\n    const decoration = new Decoration({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n      mark: Mark.fromJSON(mark),\n    })\n\n    return decoration\n  }\n\n  /**\n   * Set new `properties` on the decoration.\n   *\n   * @param {Object|Range|Selection} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Decoration.createProperties(properties)\n    const { anchor, focus, mark } = properties\n    const props = {}\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    if (mark) {\n      props.mark = Mark.create(mark)\n    }\n\n    const decoration = this.merge(props)\n    return decoration\n  }\n\n  /**\n   * Return a JSON representation of the decoration.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n      mark: this.mark.toJSON(options),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Decoration}\n */\n\nexport default Decoration\n","/**\n * Slate-specific object types.\n *\n * @type {Object}\n */\n\nexport const TYPES = {\n  block: '@@__SLATE_BLOCK__@@',\n  change: '@@__SLATE_CHANGE__@@',\n  decoration: '@@__SLATE_DECORATION__@@',\n  document: '@@__SLATE_DOCUMENT__@@',\n  editor: '@@__SLATE_EDITOR__@@',\n  inline: '@@__SLATE_INLINE__@@',\n  leaf: '@@__SLATE_LEAF__@@',\n  mark: '@@__SLATE_MARK__@@',\n  operation: '@@__SLATE_OPERATION__@@',\n  point: '@@__SLATE_POINT__@@',\n  range: '@@__SLATE_RANGE__@@',\n  selection: '@@__SLATE_SELECTION__@@',\n  text: '@@__SLATE_TEXT__@@',\n  value: '@@__SLATE_VALUE__@@',\n}\n\n/**\n * Determine whether a `value` is of `type`.\n *\n * @param {string} type\n * @param {any} value\n * @return {boolean}\n */\n\nexport default function isObject(type, value) {\n  return !!(value && value[TYPES[type]])\n}\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Decoration from './decoration'\nimport Point from './point'\nimport Selection from './selection'\nimport isObject from '../utils/is-object'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n}\n\n/**\n * Range.\n *\n * @type {Range}\n */\n\nclass Range extends Record(DEFAULTS) {\n  /**\n   * Create a new `Range` with `attrs`.\n   *\n   * @param {Object|Range} attrs\n   * @return {Range}\n   */\n\n  static create(attrs = {}) {\n    if (Range.isRange(attrs)) {\n      if (attrs.object === 'range') {\n        return attrs\n      } else {\n        return Range.fromJSON(Range.createProperties(attrs))\n      }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Range.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Range.create\\` only accepts objects or ranges, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Range|Object>|List<Range|Object>} elements\n   * @return {List<Range>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Range.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Range.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable range properties from `attrs`.\n   *\n   * @param {Object|String|Range} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Range.isRange(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      return p\n    }\n\n    throw new Error(\n      `\\`Range.createProperties\\` only accepts objects, decorations, ranges or selections, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Range` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Range}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus } = object\n    const range = new Range({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n    })\n\n    return range\n  }\n\n  /**\n   * Check if a `value` is a `Range`, or is range-like.\n   *\n   * @param {Any} value\n   * @return {Boolean}\n   */\n\n  static isRange(value) {\n    return (\n      isObject('range', value) ||\n      Decoration.isDecoration(value) ||\n      Selection.isSelection(value)\n    )\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Range}\n */\n\nexport default Range\n","import isPlainObject from 'is-plain-object'\nimport { Record, Set } from 'immutable'\n\nimport Mark from './mark'\nimport Point from './point'\nimport Range from './range'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n  isFocused: undefined,\n  marks: undefined,\n}\n\n/**\n * Selection.\n *\n * @type {Selection}\n */\n\nclass Selection extends Record(DEFAULTS) {\n  /**\n   * Create a new `Selection` with `attrs`.\n   *\n   * @param {Object|Selection} attrs\n   * @return {Selection}\n   */\n\n  static create(attrs = {}) {\n    if (Selection.isSelection(attrs)) {\n      return attrs\n    }\n\n    if (Range.isRange(attrs)) {\n      return Selection.fromJSON(Range.createProperties(attrs))\n    }\n\n    if (isPlainObject(attrs)) {\n      return Selection.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Selection.create\\` only accepts objects, ranges or selections, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable selection properties from `attrs`.\n   *\n   * @param {Object|String|Selection} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Selection.isSelection(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n        isFocused: a.isFocused,\n        marks: a.marks,\n      }\n    }\n\n    if (Range.isRange(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      if ('isFocused' in a) p.isFocused = a.isFocused\n      if ('marks' in a)\n        p.marks = a.marks == null ? null : Mark.createSet(a.marks)\n      return p\n    }\n\n    throw new Error(\n      `\\`Selection.createProperties\\` only accepts objects, ranges or selections, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Selection` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Selection}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus, isFocused = false, marks = null } = object\n    const selection = new Selection({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n      isFocused,\n      marks: marks == null ? null : new Set(marks.map(Mark.fromJSON)),\n    })\n\n    return selection\n  }\n\n  /**\n   * Check whether the selection is blurred.\n   *\n   * @return {Boolean}\n   */\n\n  get isBlurred() {\n    return !this.isFocused\n  }\n\n  /**\n   * Set the `isFocused` property to a new `value`.\n   *\n   * @param {Boolean} value\n   * @return {Selection}\n   */\n\n  setIsFocused(value) {\n    const selection = this.set('isFocused', value)\n    return selection\n  }\n\n  /**\n   * Set the `marks` property to a new set of `marks`.\n   *\n   * @param {Set} marks\n   * @return {Selection}\n   */\n\n  setMarks(marks) {\n    const selection = this.set('marks', marks)\n    return selection\n  }\n\n  /**\n   * Set new `properties` on the selection.\n   *\n   * @param {Object|Range|Selection} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Selection.createProperties(properties)\n    const { anchor, focus, ...props } = properties\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    const selection = this.merge(props)\n    return selection\n  }\n\n  /**\n   * Return a JSON representation of the selection.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n      isFocused: this.isFocused,\n      marks:\n        this.marks == null ? null : this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Selection}\n */\n\nexport default Selection\n","import isPlainObject from 'is-plain-object'\nimport invariant from 'tiny-invariant'\nimport { Record, Set, List } from 'immutable'\n\nimport PathUtils from '../utils/path-utils'\nimport Data from './data'\nimport Decoration from './decoration'\nimport Document from './document'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  decorations: undefined,\n  document: undefined,\n  selection: undefined,\n}\n\n/**\n * Value.\n *\n * @type {Value}\n */\n\nclass Value extends Record(DEFAULTS) {\n  /**\n   * Create a new `Value` with `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @param {Object} options\n   * @return {Value}\n   */\n\n  static create(attrs = {}, options = {}) {\n    if (Value.isValue(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Value.fromJSON(attrs, options)\n    }\n\n    throw new Error(\n      `\\`Value.create\\` only accepts objects or values, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable value properties from `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Value.isValue(a)) {\n      return {\n        data: a.data,\n        decorations: a.decorations,\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('data' in a) p.data = Data.create(a.data)\n      if ('decorations' in a)\n        p.decorations = Decoration.createList(a.decorations)\n      return p\n    }\n\n    throw new Error(\n      `\\`Value.createProperties\\` only accepts objects or values, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Value` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @param {Object} options\n   *   @property {Boolean} normalize\n   *   @property {Array} plugins\n   * @return {Value}\n   */\n\n  static fromJSON(object, options = {}) {\n    let { data = {}, decorations = [], document = {}, selection = {} } = object\n    data = Data.fromJSON(data)\n    document = Document.fromJSON(document)\n    selection = document.createSelection(selection)\n    decorations = List(decorations.map(d => Decoration.fromJSON(d)))\n\n    if (selection.isUnset) {\n      const text = document.getFirstText()\n      if (text) selection = selection.moveToStartOfNode(text)\n      selection = document.createSelection(selection)\n    }\n\n    const value = new Value({\n      data,\n      decorations,\n      document,\n      selection,\n    })\n\n    return value\n  }\n\n  /**\n   * Get the current start text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get startBlock() {\n    return (\n      this.selection.start.key &&\n      this.document.getClosestBlock(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get endBlock() {\n    return (\n      this.selection.end.key &&\n      this.document.getClosestBlock(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get anchorBlock() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getClosestBlock(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get focusBlock() {\n    return (\n      this.selection.focus.key &&\n      this.document.getClosestBlock(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the current start text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get startInline() {\n    return (\n      this.selection.start.key &&\n      this.document.getClosestInline(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get endInline() {\n    return (\n      this.selection.end.key &&\n      this.document.getClosestInline(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get anchorInline() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getClosestInline(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get focusInline() {\n    return (\n      this.selection.focus.key &&\n      this.document.getClosestInline(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the current start text node.\n   *\n   * @return {Text}\n   */\n\n  get startText() {\n    return (\n      this.selection.start.key &&\n      this.document.getDescendant(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end node.\n   *\n   * @return {Text}\n   */\n\n  get endText() {\n    return (\n      this.selection.end.key &&\n      this.document.getDescendant(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor node.\n   *\n   * @return {Text}\n   */\n\n  get anchorText() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getDescendant(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus node.\n   *\n   * @return {Text}\n   */\n\n  get focusText() {\n    return (\n      this.selection.focus.key &&\n      this.document.getDescendant(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the next block node.\n   *\n   * @return {Block}\n   */\n\n  get nextBlock() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextBlock(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous block node.\n   *\n   * @return {Block}\n   */\n\n  get previousBlock() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousBlock(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the next inline node.\n   *\n   * @return {Inline}\n   */\n\n  get nextInline() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextInline(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous inline node.\n   *\n   * @return {Inline}\n   */\n\n  get previousInline() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousInline(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the next text node.\n   *\n   * @return {Text}\n   */\n\n  get nextText() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextText(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous text node.\n   *\n   * @return {Text}\n   */\n\n  get previousText() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousText(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get marks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks || this.document.getMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the active marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get activeMarks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks ||\n          this.document.getActiveMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the block nodes in the current selection.\n   *\n   * @return {List<Block>}\n   */\n\n  get blocks() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getLeafBlocksAtRange(this.selection)\n  }\n\n  /**\n   * Get the fragment of the current selection.\n   *\n   * @return {Document}\n   */\n\n  get fragment() {\n    return this.selection.isUnset\n      ? Document.create()\n      : this.document.getFragmentAtRange(this.selection)\n  }\n\n  /**\n   * Get the bottom-most inline nodes in the current selection.\n   *\n   * @return {List<Inline>}\n   */\n\n  get inlines() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getLeafInlinesAtRange(this.selection)\n  }\n\n  /**\n   * Get the text nodes in the current selection.\n   *\n   * @return {List<Text>}\n   */\n\n  get texts() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getTextsAtRange(this.selection)\n  }\n\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Value}\n   */\n\n  addMark(path, offset, length, mark) {\n    let value = this\n    let { document } = value\n    document = document.addMark(path, offset, length, mark)\n    value = this.set('document', document)\n    return value\n  }\n\n  /**\n   * Insert a `node`.\n   *\n   * @param {List|String} path\n   * @param {Node} node\n   * @return {Value}\n   */\n\n  insertNode(path, node) {\n    let value = this\n    let { document } = value\n    document = document.insertNode(path, node)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range =>\n      range.updatePoints(point => point.setPath(null))\n    )\n\n    return value\n  }\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {String} text\n   * @param {Set} marks\n   * @return {Value}\n   */\n\n  insertText(path, offset, text, marks) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    document = document.insertText(path, offset, text, marks)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range => {\n      return range.updatePoints(point => {\n        return point.key === node.key && point.offset >= offset\n          ? point.setOffset(point.offset + text.length)\n          : point\n      })\n    })\n\n    return value\n  }\n\n  /**\n   * Merge a node backwards its previous sibling.\n   *\n   * @param {List|Key} path\n   * @return {Value}\n   */\n\n  mergeNode(path) {\n    let value = this\n    const { document } = value\n    const newDocument = document.mergeNode(path)\n    path = document.resolvePath(path)\n    const withPath = PathUtils.decrement(path)\n    const one = document.getNode(withPath)\n    const two = document.getNode(path)\n    value = value.set('document', newDocument)\n\n    value = value.mapRanges(range => {\n      if (two.object === 'text') {\n        const max = one.text.length\n\n        if (range.anchor.key === two.key) {\n          range = range.moveAnchorTo(one.key, max + range.anchor.offset)\n        }\n\n        if (range.focus.key === two.key) {\n          range = range.moveFocusTo(one.key, max + range.focus.offset)\n        }\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * A `newIndex` can be provided when move nodes by `key`, to account for not\n   * being able to have a key for a location in the tree that doesn't exist yet.\n   *\n   * @param {List|Key} path\n   * @param {List|Key} newPath\n   * @param {Number} newIndex\n   * @return {Value}\n   */\n\n  moveNode(path, newPath, newIndex = 0) {\n    let value = this\n    let { document } = value\n    document = document.moveNode(path, newPath, newIndex)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range =>\n      range.updatePoints(point => point.setPath(null))\n    )\n\n    return value\n  }\n\n  /**\n   * Remove mark from text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Value}\n   */\n\n  removeMark(path, offset, length, mark) {\n    let value = this\n    let { document } = value\n    document = document.removeMark(path, offset, length, mark)\n    value = this.set('document', document)\n    return value\n  }\n\n  /**\n   * Remove a node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Value}\n   */\n\n  removeNode(path) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    const first = node.object === 'text' ? node : node.getFirstText() || node\n    const last = node.object === 'text' ? node : node.getLastText() || node\n    const prev = document.getPreviousText(first.key)\n    const next = document.getNextText(last.key)\n\n    document = document.removeNode(path)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range => {\n      const { start, end } = range\n\n      if (node.hasNode(start.key)) {\n        range = prev\n          ? range.moveStartTo(prev.key, prev.text.length)\n          : next ? range.moveStartTo(next.key, 0) : range.unset()\n      }\n\n      if (node.hasNode(end.key)) {\n        range = prev\n          ? range.moveEndTo(prev.key, prev.text.length)\n          : next ? range.moveEndTo(next.key, 0) : range.unset()\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Remove `text` at `offset` in node by `path`.\n   *\n   * @param {List|Key} path\n   * @param {Number} offset\n   * @param {String} text\n   * @return {Value}\n   */\n\n  removeText(path, offset, text) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    document = document.removeText(path, offset, text)\n    value = value.set('document', document)\n\n    const { length } = text\n    const start = offset\n    const end = offset + length\n\n    value = value.mapRanges(range => {\n      return range.updatePoints(point => {\n        if (point.key !== node.key) {\n          return point\n        }\n\n        if (point.offset >= end) {\n          return point.setOffset(point.offset - length)\n        }\n\n        if (point.offset > start) {\n          return point.setOffset(start)\n        }\n\n        return point\n      })\n    })\n\n    return value\n  }\n\n  /**\n   * Set `properties` on a node.\n   *\n   * @param {List|String} path\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setNode(path, properties) {\n    let value = this\n    let { document } = value\n    document = document.setNode(path, properties)\n    value = value.set('document', document)\n    return value\n  }\n\n  /**\n   * Set `properties` on `mark` on text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setMark(path, offset, length, mark, properties) {\n    let value = this\n    let { document } = value\n    document = document.setMark(path, offset, length, mark, properties)\n    value = value.set('document', document)\n    return value\n  }\n\n  /**\n   * Set `properties` on the value.\n   *\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setProperties(properties) {\n    let value = this\n    const { document } = value\n    const { data, decorations } = properties\n    const props = {}\n\n    if (data) {\n      props.data = data\n    }\n\n    if (decorations) {\n      props.decorations = decorations.map(d => {\n        return d.isSet ? d : document.resolveDecoration(d)\n      })\n    }\n\n    value = value.merge(props)\n    return value\n  }\n\n  /**\n   * Set `properties` on the selection.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  setSelection(properties) {\n    let value = this\n    let { document, selection } = value\n    const next = selection.setProperties(properties)\n    selection = document.resolveSelection(next)\n    value = value.set('selection', selection)\n    return value\n  }\n\n  /**\n   * Split a node by `path` at `position` with optional `properties` to apply\n   * to the newly split node.\n   *\n   * @param {List|String} path\n   * @param {Number} position\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  splitNode(path, position, properties) {\n    let value = this\n    const { document } = value\n    const newDocument = document.splitNode(path, position, properties)\n    const node = document.assertNode(path)\n    value = value.set('document', newDocument)\n\n    value = value.mapRanges(range => {\n      const next = newDocument.getNextText(node.key)\n      const { start, end } = range\n\n      // If the start was after the split, move it to the next node.\n      if (node.key === start.key && position <= start.offset) {\n        range = range.moveStartTo(next.key, start.offset - position)\n      }\n\n      // If the end was after the split, move it to the next node.\n      if (node.key === end.key && position <= end.offset) {\n        range = range.moveEndTo(next.key, end.offset - position)\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Map all range objects to apply adjustments with an `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Value}\n   */\n\n  mapRanges(iterator) {\n    let value = this\n    const { document, selection, decorations } = value\n\n    let sel = selection.isSet ? iterator(selection) : selection\n    if (!sel) sel = selection.unset()\n    if (sel !== selection) sel = document.createSelection(sel)\n    value = value.set('selection', sel)\n\n    let decs = decorations.map(decoration => {\n      let n = decoration.isSet ? iterator(decoration) : decoration\n      if (n && n !== decoration) n = document.createDecoration(n)\n      return n\n    })\n\n    decs = decs.filter(decoration => !!decoration)\n    value = value.set('decorations', decs)\n    return value\n  }\n\n  /**\n   * Return a JSON representation of the value.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      document: this.document.toJSON(options),\n    }\n\n    if (options.preserveData) {\n      object.data = this.data.toJSON(options)\n    }\n\n    if (options.preserveDecorations) {\n      object.decorations = this.decorations\n        .toArray()\n        .map(d => d.toJSON(options))\n    }\n\n    if (options.preserveSelection) {\n      object.selection = this.selection.toJSON(options)\n    }\n\n    return object\n  }\n\n  /**\n   * Deprecated.\n   */\n\n  get history() {\n    invariant(\n      false,\n      'As of Slate 0.42.0, the `value.history` model no longer exists, and the history is stored in `value.data` instead using plugins.'\n    )\n  }\n\n  change() {\n    invariant(\n      false,\n      'As of Slate 0.42.0, value object are no longer schema-aware, and the `value.change()` method is no longer available. Use the `editor.change()` method on the new `Editor` controller instead.'\n    )\n  }\n}\n\n/**\n * Export.\n */\n\nexport default Value\n","import Debug from 'debug'\n\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:apply')\n\n/**\n * Apply an `op` to a `value`.\n *\n * @param {Value} value\n * @param {Object|Operation} op\n * @return {Value} value\n */\n\nfunction applyOperation(value, op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  switch (type) {\n    case 'add_mark': {\n      const { path, offset, length, mark } = op\n      const next = value.addMark(path, offset, length, mark)\n      return next\n    }\n\n    case 'insert_node': {\n      const { path, node } = op\n      const next = value.insertNode(path, node)\n      return next\n    }\n\n    case 'insert_text': {\n      const { path, offset, text, marks } = op\n      const next = value.insertText(path, offset, text, marks)\n      return next\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const next = value.mergeNode(path)\n      return next\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (PathUtils.isEqual(path, newPath)) {\n        return value\n      }\n\n      const next = value.moveNode(path, newPath)\n      return next\n    }\n\n    case 'remove_mark': {\n      const { path, offset, length, mark } = op\n      const next = value.removeMark(path, offset, length, mark)\n      return next\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const next = value.removeNode(path)\n      return next\n    }\n\n    case 'remove_text': {\n      const { path, offset, text } = op\n      const next = value.removeText(path, offset, text)\n      return next\n    }\n\n    case 'set_mark': {\n      const { path, offset, length, mark, properties } = op\n      const next = value.setMark(path, offset, length, mark, properties)\n      return next\n    }\n\n    case 'set_node': {\n      const { path, properties } = op\n      const next = value.setNode(path, properties)\n      return next\n    }\n\n    case 'set_selection': {\n      const { properties } = op\n      const next = value.setSelection(properties)\n      return next\n    }\n\n    case 'set_value': {\n      const { properties } = op\n      const next = value.setProperties(properties)\n      return next\n    }\n\n    case 'split_node': {\n      const { path, position, properties } = op\n      const next = value.splitNode(path, position, properties)\n      return next\n    }\n\n    default: {\n      throw new Error(`Unknown operation type: \"${type}\".`)\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default applyOperation\n","import Debug from 'debug'\nimport pick from 'lodash/pick'\n\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:invert')\n\n/**\n * Invert an `op`.\n *\n * @param {Object} op\n * @return {Object}\n */\n\nfunction invertOperation(op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  switch (type) {\n    case 'insert_node': {\n      const inverse = op.set('type', 'remove_node')\n      return inverse\n    }\n\n    case 'remove_node': {\n      const inverse = op.set('type', 'insert_node')\n      return inverse\n    }\n\n    case 'move_node': {\n      const { newPath, path } = op\n\n      if (PathUtils.isEqual(newPath, path)) {\n        return op\n      }\n\n      // Get the true path that the moved node ended up at\n      const inversePath = PathUtils.transform(path, op).first()\n\n      // Get the true path we are trying to move back to\n      // We transform the right-sibling of the path\n      // This will end up at the operation.path most of the time\n      // But if the newPath is a left-sibling or left-ancestor-sibling, this will account for it\n      const transformedSibling = PathUtils.transform(\n        PathUtils.increment(path),\n        op\n      ).first()\n\n      const inverse = op\n        .set('path', inversePath)\n        .set('newPath', transformedSibling)\n      return inverse\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const inversePath = PathUtils.decrement(path)\n      const inverse = op.set('type', 'split_node').set('path', inversePath)\n      return inverse\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const inversePath = PathUtils.increment(path)\n      const inverse = op.set('type', 'merge_node').set('path', inversePath)\n      return inverse\n    }\n\n    case 'set_node': {\n      const { properties, node } = op\n      const inverseNode = node.merge(properties)\n      const inverseProperties = pick(node, Object.keys(properties))\n      const inverse = op\n        .set('node', inverseNode)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    case 'insert_text': {\n      const inverse = op.set('type', 'remove_text')\n      return inverse\n    }\n\n    case 'remove_text': {\n      const inverse = op.set('type', 'insert_text')\n      return inverse\n    }\n\n    case 'add_mark': {\n      const inverse = op.set('type', 'remove_mark')\n      return inverse\n    }\n\n    case 'remove_mark': {\n      const inverse = op.set('type', 'add_mark')\n      return inverse\n    }\n\n    case 'set_mark': {\n      const { properties, mark } = op\n      const inverseMark = mark.merge(properties)\n      const inverseProperties = pick(mark, Object.keys(properties))\n      const inverse = op\n        .set('mark', inverseMark)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    case 'set_selection': {\n      const { properties, selection } = op\n      const inverseSelection = selection.merge(properties)\n      const inverseProps = pick(selection, Object.keys(properties))\n      const inverse = op\n        .set('selection', inverseSelection)\n        .set('properties', inverseProps)\n      return inverse\n    }\n\n    case 'set_value': {\n      const { properties, value } = op\n      const inverseValue = value.merge(properties)\n      const inverseProperties = pick(value, Object.keys(properties))\n      const inverse = op\n        .set('value', inverseValue)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    default: {\n      throw new Error(`Unknown operation type: \"${type}\".`)\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default invertOperation\n","import isPlainObject from 'is-plain-object'\nimport { List, Record, Map } from 'immutable'\n\nimport Mark from './mark'\nimport Node from './node'\nimport PathUtils from '../utils/path-utils'\nimport Selection from './selection'\nimport Value from './value'\nimport apply from '../operations/apply'\nimport invert from '../operations/invert'\n\n/**\n * Operation attributes.\n *\n * @type {Array}\n */\n\nconst OPERATION_ATTRIBUTES = {\n  add_mark: ['value', 'path', 'offset', 'length', 'mark', 'data'],\n  insert_node: ['value', 'path', 'node', 'data'],\n  insert_text: ['value', 'path', 'offset', 'text', 'marks', 'data'],\n  merge_node: ['value', 'path', 'position', 'properties', 'target', 'data'],\n  move_node: ['value', 'path', 'newPath', 'data'],\n  remove_mark: ['value', 'path', 'offset', 'length', 'mark', 'data'],\n  remove_node: ['value', 'path', 'node', 'data'],\n  remove_text: ['value', 'path', 'offset', 'text', 'marks', 'data'],\n  set_mark: ['value', 'path', 'offset', 'length', 'mark', 'properties', 'data'],\n  set_node: ['value', 'path', 'node', 'properties', 'data'],\n  set_selection: ['value', 'selection', 'properties', 'data'],\n  set_value: ['value', 'properties', 'data'],\n  split_node: ['value', 'path', 'position', 'properties', 'target', 'data'],\n}\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  length: undefined,\n  mark: undefined,\n  marks: undefined,\n  newPath: undefined,\n  node: undefined,\n  offset: undefined,\n  path: undefined,\n  position: undefined,\n  properties: undefined,\n  selection: undefined,\n  target: undefined,\n  text: undefined,\n  type: undefined,\n  value: undefined,\n  data: undefined,\n}\n\n/**\n * Operation.\n *\n * @type {Operation}\n */\n\nclass Operation extends Record(DEFAULTS) {\n  /**\n   * Create a new `Operation` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Operation} attrs\n   * @return {Operation}\n   */\n\n  static create(attrs = {}) {\n    if (Operation.isOperation(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Operation.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Operation.create\\` only accepts objects or operations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Operations` from `elements`.\n   *\n   * @param {Array<Operation|Object>|List<Operation|Object>} elements\n   * @return {List<Operation>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Operation.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Operation.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Operation` from a JSON `object`.\n   *\n   * @param {Object|Operation} object\n   * @return {Operation}\n   */\n\n  static fromJSON(object) {\n    if (Operation.isOperation(object)) {\n      return object\n    }\n\n    const { type } = object\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n    const attrs = { type }\n\n    if (!ATTRIBUTES) {\n      throw new Error(\n        `\\`Operation.fromJSON\\` was passed an unrecognized operation type: \"${type}\"`\n      )\n    }\n\n    for (const key of ATTRIBUTES) {\n      let v = object[key]\n\n      // Default `data` to an empty object.\n      if (key === 'data' && v === undefined) {\n        v = {}\n      }\n\n      if (v === undefined) {\n        // Skip keys for objects that should not be serialized, and are only used\n        // for providing the local-only invert behavior for the history stack.\n        if (key === 'document') continue\n        if (key === 'selection') continue\n        if (key === 'value') continue\n        if (key === 'node' && type !== 'insert_node') continue\n\n        throw new Error(\n          `\\`Operation.fromJSON\\` was passed a \"${type}\" operation without the required \"${key}\" attribute.`\n        )\n      }\n\n      if (key === 'path' || key === 'newPath') {\n        v = PathUtils.create(v)\n      }\n\n      if (key === 'mark') {\n        v = Mark.create(v)\n      }\n\n      if (key === 'marks' && v != null) {\n        v = Mark.createSet(v)\n      }\n\n      if (key === 'node') {\n        v = Node.create(v)\n      }\n\n      if (key === 'selection') {\n        v = Selection.create(v)\n      }\n\n      if (key === 'value') {\n        v = Value.create(v)\n      }\n\n      if (key === 'properties' && type === 'merge_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_mark') {\n        v = Mark.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_selection') {\n        v = Selection.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_value') {\n        v = Value.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'split_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'data') {\n        v = Map(v)\n      }\n\n      attrs[key] = v\n    }\n\n    const node = new Operation(attrs)\n    return node\n  }\n\n  /**\n   * Check if `any` is a list of operations.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isOperationList(any) {\n    return List.isList(any) && any.every(item => Operation.isOperation(item))\n  }\n\n  /**\n   * Apply the operation to a `value`.\n   *\n   * @param {Value} value\n   * @return {Value}\n   */\n\n  apply(value) {\n    const next = apply(value, this)\n    return next\n  }\n\n  /**\n   * Invert the operation.\n   *\n   * @return {Operation}\n   */\n\n  invert() {\n    const inverted = invert(this)\n    return inverted\n  }\n\n  /**\n   * Return a JSON representation of the operation.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const { object, type } = this\n    const json = { object, type }\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n\n    for (const key of ATTRIBUTES) {\n      let value = this[key]\n\n      // Skip keys for objects that should not be serialized, and are only used\n      // for providing the local-only invert behavior for the history stack.\n      if (key === 'document') continue\n      if (key === 'selection') continue\n      if (key === 'value') continue\n      if (key === 'node' && type !== 'insert_node') continue\n\n      if (\n        key === 'mark' ||\n        key === 'marks' ||\n        key === 'node' ||\n        key === 'path' ||\n        key === 'newPath'\n      ) {\n        value = value.toJSON()\n      }\n\n      if (key === 'properties' && type === 'merge_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key === 'properties' && type === 'set_mark') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key === 'properties' && type === 'set_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key === 'properties' && type === 'set_selection') {\n        const v = {}\n        if ('anchor' in value) v.anchor = value.anchor.toJSON()\n        if ('focus' in value) v.focus = value.focus.toJSON()\n        if ('isFocused' in value) v.isFocused = value.isFocused\n        if ('marks' in value) v.marks = value.marks && value.marks.toJSON()\n        value = v\n      }\n\n      if (key === 'properties' && type === 'set_value') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('decorations' in value) v.decorations = value.decorations.toJS()\n        value = v\n      }\n\n      if (key === 'properties' && type === 'split_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key === 'data') {\n        value = value.toJSON()\n      }\n\n      json[key] = value\n    }\n\n    return json\n  }\n}\n\n/**\n * Export.\n *\n * @type {Operation}\n */\n\nexport default Operation\n","import isPlainObject from 'is-plain-object'\nimport { Record } from 'immutable'\n\nimport Operation from './operation'\nimport Value from './value'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  operations: undefined,\n  value: undefined,\n}\n\n/**\n * Change.\n *\n * @type {Change}\n */\n\nclass Change extends Record(DEFAULTS) {\n  /**\n   * Create a new `Change` with `attrs`.\n   *\n   * @param {Object|Change} attrs\n   * @return {Change}\n   */\n\n  static create(attrs = {}) {\n    if (Change.isChange(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Change.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Change.create\\` only accepts objects or changes, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Change` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Change}\n   */\n\n  static fromJSON(object) {\n    const { value, operations = [] } = object\n\n    const change = new Change({\n      value: Value.create(value),\n      operations: Operation.createList(operations),\n    })\n\n    return change\n  }\n\n  /**\n   * Return a JSON representation of the change.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      value: this.value.toJSON(options),\n      operations: this.operations.toArray().map(o => o.toJSON(options)),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Change}\n */\n\nexport default Change\n","/**\n * A plugin that adds a set of commands to the editor.\n *\n * @param {Object} commands\n * @return {Object}\n */\n\nfunction CommandsPlugin(commands = {}) {\n  /**\n   * On command, if it exists in our list of commands, call it.\n   *\n   * @param {Object} command\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onCommand(command, editor, next) {\n    const { type, args } = command\n    const fn = commands[type]\n    if (!fn) return next()\n    editor.command(fn, ...args)\n  }\n\n  /**\n   * On construct, register all the commands.\n   *\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onConstruct(editor, next) {\n    for (const command in commands) {\n      editor.registerCommand(command)\n    }\n\n    return next()\n  }\n\n  /**\n   * Return the plugin.\n   *\n   * @type {Object}\n   */\n\n  return {\n    onCommand,\n    onConstruct,\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default CommandsPlugin\n","import { reverse } from 'esrever'\n\n/**\n * Surrogate pair start and end points.\n *\n * @type {Number}\n */\n\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\n\n/**\n * A regex to match space characters.\n *\n * @type {RegExp}\n */\n\nconst SPACE = /\\s/\n\n/**\n * A regex to match chameleon characters, that count as word characters as long\n * as they are inside of a word.\n *\n * @type {RegExp}\n */\n\nconst CHAMELEON = /['\\u2018\\u2019]/\n\n/**\n * A regex that matches punctuation.\n *\n * @type {RegExp}\n */\n\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n\n/**\n * Is a character `code` in a surrogate character.\n *\n * @param {Number} code\n * @return {Boolean}\n */\n\nfunction isSurrogate(code) {\n  return SURROGATE_START <= code && code <= SURROGATE_END\n}\n\n/**\n * Is a character a word character? Needs the `remaining` characters too.\n *\n * @param {String} char\n * @param {String|Void} remaining\n * @return {Boolean}\n */\n\nfunction isWord(char, remaining) {\n  if (SPACE.test(char)) return false\n\n  // If it's a chameleon character, recurse to see if the next one is or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharLength(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n    if (isWord(next, rest)) return true\n  }\n\n  if (PUNCTUATION.test(char)) return false\n  return true\n}\n\n/**\n * Get the length of a `character`.\n *\n * @param {String} char\n * @return {Number}\n */\n\nfunction getCharLength(char) {\n  return isSurrogate(char.charCodeAt(0)) ? 2 : 1\n}\n\n/**\n * Get the offset to the end of the first character in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getCharOffset(text) {\n  const char = text.charAt(0)\n  return getCharLength(char)\n}\n\n/**\n * Get the offset to the end of the character before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the character after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetForward(text, offset) {\n  text = text.slice(offset)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the first word in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getWordOffset(text) {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharLength(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWord(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Get the offset to the end of the word before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Get the offset to the end of the word after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetForward(text, offset) {\n  text = text.slice(offset)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  getCharLength,\n  getCharOffset,\n  getCharOffsetBackward,\n  getCharOffsetForward,\n  getWordOffset,\n  getWordOffsetBackward,\n  getWordOffsetForward,\n  isSurrogate,\n  isWord,\n}\n","import { List } from 'immutable'\nimport Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport TextUtils from '../utils/text-utils'\n\n/**\n * Ensure that an expanded selection is deleted first, and return the updated\n * range to account for the deleted part.\n *\n * @param {Editor}\n */\n\nfunction deleteExpandedAtRange(editor, range) {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start, end } = range\n\n  if (document.hasDescendant(start.key)) {\n    range = range.moveToStart()\n  } else {\n    range = range.moveTo(end.key, 0).normalize(document)\n  }\n\n  return range\n}\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Add a new `mark` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nCommands.addMarkAtRange = (editor, range, mark) => {\n  if (range.isCollapsed) return\n\n  const { value } = editor\n  const { document } = value\n  const { start, end } = range\n  const texts = document.getTextsAtRange(range)\n\n  editor.withoutNormalizing(() => {\n    texts.forEach(node => {\n      const { key } = node\n      let index = 0\n      let length = node.text.length\n\n      if (key === start.key) index = start.offset\n      if (key === end.key) length = end.offset\n      if (key === start.key && key === end.key)\n        length = end.offset - start.offset\n\n      editor.addMarkByKey(key, index, length, mark)\n    })\n  })\n}\n\n/**\n * Add a list of `marks` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Array<Mixed>} mark\n */\n\nCommands.addMarksAtRange = (editor, range, marks) => {\n  marks.forEach(mark => editor.addMarkAtRange(range, mark))\n}\n\n/**\n * Delete everything in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteAtRange = (editor, range) => {\n  // Snapshot the selection, which creates an extra undo save point, so that\n  // when you undo a delete, the expanded selection will be retained.\n  editor.snapshotSelection()\n\n  const { value } = editor\n  const { start, end } = range\n  let startKey = start.key\n  let startOffset = start.offset\n  let endKey = end.key\n  let endOffset = end.offset\n  let { document } = value\n  let isStartVoid = document.hasVoidParent(startKey, editor)\n  let isEndVoid = document.hasVoidParent(endKey, editor)\n  let startBlock = document.getClosestBlock(startKey)\n  let endBlock = document.getClosestBlock(endKey)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    startOffset === 0 &&\n    endOffset === 0 &&\n    isStartVoid === false &&\n    startKey === startBlock.getFirstText().key &&\n    endKey === endBlock.getFirstText().key\n\n  // If it's a hanging selection, nudge it back to end in the previous text.\n  if (isHanging && isEndVoid) {\n    const prevText = document.getPreviousText(endKey)\n    endKey = prevText.key\n    endOffset = prevText.text.length\n    isEndVoid = document.hasVoidParent(endKey, editor)\n  }\n\n  editor.withoutNormalizing(() => {\n    // If the start node is inside a void node, remove the void node and update\n    // the starting point to be right after it, continuously until the start point\n    // is not a void, or until the entire range is handled.\n    while (isStartVoid) {\n      const startVoid = document.getClosestVoid(startKey, editor)\n      const nextText = document.getNextText(startKey)\n      editor.removeNodeByKey(startVoid.key)\n\n      // If the start and end keys are the same, we're done.\n      if (startKey === endKey) return\n\n      // If there is no next text node, we're done.\n      if (!nextText) return\n\n      // Continue...\n      document = editor.value.document\n      startKey = nextText.key\n      startOffset = 0\n      isStartVoid = document.hasVoidParent(startKey, editor)\n    }\n\n    // If the end node is inside a void node, do the same thing but backwards. But\n    // we don't need any aborting checks because if we've gotten this far there\n    // must be a non-void node that will exit the loop.\n    while (isEndVoid) {\n      const endVoid = document.getClosestVoid(endKey, editor)\n      const prevText = document.getPreviousText(endKey)\n      editor.removeNodeByKey(endVoid.key)\n\n      // Continue...\n      document = editor.value.document\n      endKey = prevText.key\n      endOffset = prevText.text.length\n      isEndVoid = document.hasVoidParent(endKey, editor)\n    }\n\n    // If the start and end key are the same, and it was a hanging selection, we\n    // can just remove the entire block.\n    if (startKey === endKey && isHanging) {\n      editor.removeNodeByKey(startBlock.key)\n      return\n    } else if (startKey === endKey) {\n      // Otherwise, if it wasn't hanging, we're inside a single text node, so we can\n      // simply remove the text in the range.\n      const index = startOffset\n      const length = endOffset - startOffset\n      editor.removeTextByKey(startKey, index, length)\n      return\n    } else {\n      // Otherwise, we need to recursively remove text and nodes inside the start\n      // block after the start offset and inside the end block before the end\n      // offset. Then remove any blocks that are in between the start and end\n      // blocks. Then finally merge the start and end nodes.\n      startBlock = document.getClosestBlock(startKey)\n      endBlock = document.getClosestBlock(endKey)\n      const startText = document.getNode(startKey)\n      const endText = document.getNode(endKey)\n      const startLength = startText.text.length - startOffset\n      const endLength = endOffset\n\n      const ancestor = document.getCommonAncestor(startKey, endKey)\n      const startChild = ancestor.getFurthestAncestor(startKey)\n      const endChild = ancestor.getFurthestAncestor(endKey)\n\n      const startParent = document.getParent(startBlock.key)\n      const startParentIndex = startParent.nodes.indexOf(startBlock)\n      const endParentIndex = startParent.nodes.indexOf(endBlock)\n\n      let child\n\n      // Iterate through all of the nodes in the tree after the start text node\n      // but inside the end child, and remove them.\n      child = startText\n\n      while (child.key !== startChild.key) {\n        const parent = document.getParent(child.key)\n        const index = parent.nodes.indexOf(child)\n        const afters = parent.nodes.slice(index + 1)\n\n        afters.reverse().forEach(node => {\n          editor.removeNodeByKey(node.key)\n        })\n\n        child = parent\n      }\n\n      // Remove all of the middle children.\n      const startChildIndex = ancestor.nodes.indexOf(startChild)\n      const endChildIndex = ancestor.nodes.indexOf(endChild)\n      const middles = ancestor.nodes.slice(startChildIndex + 1, endChildIndex)\n\n      middles.reverse().forEach(node => {\n        editor.removeNodeByKey(node.key)\n      })\n\n      // Remove the nodes before the end text node in the tree.\n      child = endText\n\n      while (child.key !== endChild.key) {\n        const parent = document.getParent(child.key)\n        const index = parent.nodes.indexOf(child)\n        const befores = parent.nodes.slice(0, index)\n\n        befores.reverse().forEach(node => {\n          editor.removeNodeByKey(node.key)\n        })\n\n        child = parent\n      }\n\n      // Remove any overlapping text content from the leaf text nodes.\n      if (startLength !== 0) {\n        editor.removeTextByKey(startKey, startOffset, startLength)\n      }\n\n      if (endLength !== 0) {\n        editor.removeTextByKey(endKey, 0, endOffset)\n      }\n\n      // If the start and end blocks aren't the same, move and merge the end block\n      // into the start block.\n      if (startBlock.key !== endBlock.key) {\n        document = editor.value.document\n        const lonely = document.getFurthestOnlyChildAncestor(endBlock.key)\n\n        // Move the end block to be right after the start block.\n        if (endParentIndex !== startParentIndex + 1) {\n          editor.moveNodeByKey(\n            endBlock.key,\n            startParent.key,\n            startParentIndex + 1\n          )\n        }\n\n        // If the selection is hanging, just remove the start block, otherwise\n        // merge the end block into it.\n        if (isHanging) {\n          editor.removeNodeByKey(startBlock.key)\n        } else {\n          editor.mergeNodeByKey(endBlock.key)\n        }\n\n        // If nested empty blocks are left over above the end block, remove them.\n        if (lonely) {\n          editor.removeNodeByKey(lonely.key)\n        }\n      }\n    }\n  })\n}\n\n/**\n * Delete backward `n` characters at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\nCommands.deleteBackwardAtRange = (editor, range, n = 1) => {\n  if (n === 0) return\n  const { value } = editor\n  const { document } = value\n  const { start, focus } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const voidParent = document.getClosestVoid(start.key, editor)\n\n  // If there is a void parent, delete it.\n  if (voidParent) {\n    editor.removeNodeByKey(voidParent.key)\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (start.isAtStartOfNode(document)) {\n    return\n  }\n\n  const block = document.getClosestBlock(start.key)\n\n  // PERF: If the closest block is empty, remove it. This is just a shortcut,\n  // since merging it would result in the same outcome.\n  if (\n    document.nodes.size !== 1 &&\n    block &&\n    block.text === '' &&\n    block.nodes.size === 1\n  ) {\n    editor.removeNodeByKey(block.key)\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(start.key)\n\n  if (start.isAtStartOfNode(text)) {\n    let prev = document.getPreviousText(text.key)\n    const inline = document.getClosestInline(text.key)\n\n    // If the range is at the start of the inline node, and previous text node\n    // is empty, take the text node before that, or \"prevBlock\" would be the\n    // same node as \"block\"\n    if (inline && prev.text === '') {\n      prev = document.getPreviousText(prev.key)\n    }\n\n    const prevBlock = document.getClosestBlock(prev.key)\n    const prevVoid = document.getClosestVoid(prev.key, editor)\n\n    // If the previous text node has a void parent, remove it.\n    if (prevVoid) {\n      editor.removeNodeByKey(prevVoid.key)\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n === 1 && prevBlock !== block) {\n      range = range.moveAnchorTo(prev.key, prev.text.length)\n      editor.deleteAtRange(range)\n      return\n    }\n  }\n\n  // If the focus offset is farther than the number of characters to delete,\n  // just remove the characters backwards inside the current node.\n  if (n < focus.offset) {\n    range = range.moveFocusBackward(n)\n    editor.deleteAtRange(range)\n    return\n  }\n\n  // Otherwise, we need to see how many nodes backwards to go.\n  let node = text\n  let offset = 0\n  let traversed = focus.offset\n\n  while (n > traversed) {\n    node = document.getPreviousText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = next - n\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.moveAnchorTo(node.key, offset)\n  editor.deleteAtRange(range)\n}\n\n/**\n * Delete backward until the character boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteCharBackwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getCharOffsetBackward(text, o)\n  editor.deleteBackwardAtRange(range, n)\n}\n\n/**\n * Delete forward until the character boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteCharForwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getCharOffsetForward(text, o)\n  editor.deleteForwardAtRange(range, n)\n}\n\n/**\n * Delete forward `n` characters at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\nCommands.deleteForwardAtRange = (editor, range, n = 1) => {\n  if (n === 0) return\n  const { value } = editor\n  const { document } = value\n  const { start, focus } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const voidParent = document.getClosestVoid(start.key, editor)\n\n  // If the node has a void parent, delete it.\n  if (voidParent) {\n    editor.removeNodeByKey(voidParent.key)\n    return\n  }\n\n  const block = document.getClosestBlock(start.key)\n\n  // If the closest is not void, but empty, remove it\n  if (\n    block &&\n    !editor.isVoid(block) &&\n    block.text === '' &&\n    document.nodes.size !== 1\n  ) {\n    const nextBlock = document.getNextBlock(block.key)\n    editor.removeNodeByKey(block.key)\n\n    if (nextBlock && nextBlock.key) {\n      editor.moveToStartOfNode(nextBlock)\n    }\n\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (start.isAtEndOfNode(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(start.key)\n\n  if (start.isAtEndOfNode(text)) {\n    const next = document.getNextText(text.key)\n    const nextBlock = document.getClosestBlock(next.key)\n    const nextVoid = document.getClosestVoid(next.key, editor)\n\n    // If the next text node has a void parent, remove it.\n    if (nextVoid) {\n      editor.removeNodeByKey(nextVoid.key)\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n === 1 && nextBlock !== block) {\n      range = range.moveFocusTo(next.key, 0)\n      editor.deleteAtRange(range)\n      return\n    }\n  }\n\n  // If the remaining characters to the end of the node is greater than or equal\n  // to the number of characters to delete, just remove the characters forwards\n  // inside the current node.\n  if (n <= text.text.length - focus.offset) {\n    range = range.moveFocusForward(n)\n    editor.deleteAtRange(range)\n    return\n  }\n\n  // Otherwise, we need to see how many nodes forwards to go.\n  let node = text\n  let offset = focus.offset\n  let traversed = text.text.length - focus.offset\n\n  while (n > traversed) {\n    node = document.getNextText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = n - traversed\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.moveFocusTo(node.key, offset)\n  editor.deleteAtRange(range)\n}\n\n/**\n * Delete backward until the line boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteLineBackwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  editor.deleteBackwardAtRange(range, o)\n}\n\n/**\n * Delete forward until the line boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteLineForwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  editor.deleteForwardAtRange(range, startBlock.text.length - o)\n}\n\n/**\n * Delete backward until the word boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteWordBackwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = o === 0 ? 1 : TextUtils.getWordOffsetBackward(text, o)\n  editor.deleteBackwardAtRange(range, n)\n}\n\n/**\n * Delete forward until the word boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteWordForwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const wordOffset = TextUtils.getWordOffsetForward(text, o)\n  const n = wordOffset === 0 ? 1 : wordOffset\n  editor.deleteForwardAtRange(range, n)\n}\n\n/**\n * Insert a `block` node at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Block|String|Object} block\n */\n\nCommands.insertBlockAtRange = (editor, range, block) => {\n  range = deleteExpandedAtRange(editor, range)\n  block = Block.create(block)\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  let startKey = start.key\n  let startOffset = start.offset\n  const startBlock = document.getClosestBlock(startKey)\n  const startInline = document.getClosestInline(startKey)\n  const parent = document.getParent(startBlock.key)\n  const index = parent.nodes.indexOf(startBlock)\n\n  if (editor.isVoid(startBlock)) {\n    const extra = start.isAtEndOfNode(startBlock) ? 1 : 0\n    editor.insertNodeByKey(parent.key, index + extra, block)\n  } else if (!startInline && startBlock.text === '') {\n    editor.insertNodeByKey(parent.key, index + 1, block)\n  } else if (start.isAtStartOfNode(startBlock)) {\n    editor.insertNodeByKey(parent.key, index, block)\n  } else if (start.isAtEndOfNode(startBlock)) {\n    editor.insertNodeByKey(parent.key, index + 1, block)\n  } else {\n    if (startInline && editor.isVoid(startInline)) {\n      const atEnd = start.isAtEndOfNode(startInline)\n      const siblingText = atEnd\n        ? document.getNextText(startKey)\n        : document.getPreviousText(startKey)\n\n      const splitRange = atEnd\n        ? range.moveToStartOfNode(siblingText)\n        : range.moveToEndOfNode(siblingText)\n\n      startKey = splitRange.start.key\n      startOffset = splitRange.start.offset\n    }\n\n    editor.withoutNormalizing(() => {\n      editor.splitDescendantsByKey(startBlock.key, startKey, startOffset)\n      editor.insertNodeByKey(parent.key, index + 1, block)\n    })\n  }\n}\n\n/**\n * Insert a `fragment` at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Document} fragment\n */\n\nCommands.insertFragmentAtRange = (editor, range, fragment) => {\n  editor.withoutNormalizing(() => {\n    range = deleteExpandedAtRange(editor, range)\n\n    // If the fragment is empty, there's nothing to do after deleting.\n    if (!fragment.nodes.size) return\n\n    // Regenerate the keys for all of the fragments nodes, so that they're\n    // guaranteed not to collide with the existing keys in the document. Otherwise\n    // they will be rengerated automatically and we won't have an easy way to\n    // reference them.\n    fragment = fragment.mapDescendants(child => child.regenerateKey())\n\n    // Calculate a few things...\n    const { start } = range\n    const { value } = editor\n    let { document } = value\n    let startText = document.getDescendant(start.key)\n    let startBlock = document.getClosestBlock(startText.key)\n    let startChild = startBlock.getFurthestAncestor(startText.key)\n    const isAtStart = start.isAtStartOfNode(startBlock)\n    const parent = document.getParent(startBlock.key)\n    const index = parent.nodes.indexOf(startBlock)\n    const blocks = fragment.getBlocks()\n    const firstChild = fragment.nodes.first()\n    const lastChild = fragment.nodes.last()\n    const firstBlock = blocks.first()\n    const lastBlock = blocks.last()\n    const insertionNode = findInsertionNode(fragment, document, startBlock.key)\n\n    // If the fragment only contains a void block, use `insertBlock` instead.\n    if (firstBlock === lastBlock && editor.isVoid(firstBlock)) {\n      editor.insertBlockAtRange(range, firstBlock)\n      return\n    }\n\n    // If inserting the entire fragment and it starts or ends with a single\n    // nested block, e.g. a table, we do not merge it with existing blocks.\n    if (\n      insertionNode === fragment &&\n      (firstChild.hasBlockChildren() || lastChild.hasBlockChildren())\n    ) {\n      fragment.nodes.reverse().forEach(node => {\n        editor.insertBlockAtRange(range, node)\n      })\n      return\n    }\n\n    // If the first and last block aren't the same, we need to insert all of the\n    // nodes after the insertion node's first block at the index.\n    if (firstBlock !== lastBlock) {\n      const lonelyParent = insertionNode.getFurthest(\n        firstBlock.key,\n        p => p.nodes.size === 1\n      )\n      const lonelyChild = lonelyParent || firstBlock\n\n      const startIndex = parent.nodes.indexOf(startBlock)\n      const excludingLonelyChild = insertionNode.removeNode(lonelyChild.key)\n\n      excludingLonelyChild.nodes.forEach((node, i) => {\n        const newIndex = startIndex + i + 1\n        editor.insertNodeByKey(parent.key, newIndex, node)\n      })\n    }\n\n    // Check if we need to split the node.\n    if (start.offset !== 0) {\n      editor.splitDescendantsByKey(startChild.key, start.key, start.offset)\n    }\n\n    // Update our variables with the new value.\n    document = editor.value.document\n    startText = document.getDescendant(start.key)\n    startBlock = document.getClosestBlock(start.key)\n    startChild = startBlock.getFurthestAncestor(startText.key)\n\n    // If the first and last block aren't the same, we need to move any of the\n    // starting block's children after the split into the last block of the\n    // fragment, which has already been inserted.\n    if (firstBlock !== lastBlock) {\n      const nextChild = isAtStart\n        ? startChild\n        : startBlock.getNextSibling(startChild.key)\n      const nextNodes = nextChild\n        ? startBlock.nodes.skipUntil(n => n.key === nextChild.key)\n        : List()\n      const lastIndex = lastBlock.nodes.size\n\n      nextNodes.forEach((node, i) => {\n        const newIndex = lastIndex + i\n        editor.moveNodeByKey(node.key, lastBlock.key, newIndex)\n      })\n    }\n\n    // If the starting block is empty, we replace it entirely with the first block\n    // of the fragment, since this leads to a more expected behavior for the user.\n    if (\n      !editor.isVoid(startBlock) &&\n      startBlock.text === '' &&\n      !startBlock.findDescendant(n => editor.isVoid(n))\n    ) {\n      editor.removeNodeByKey(startBlock.key)\n      editor.insertNodeByKey(parent.key, index, firstBlock)\n    } else {\n      // Otherwise, we maintain the starting block, and insert all of the first\n      // block's inline nodes into it at the split point.\n      const inlineChild = startBlock.getFurthestAncestor(startText.key)\n      const inlineIndex = startBlock.nodes.indexOf(inlineChild)\n\n      firstBlock.nodes.forEach((inline, i) => {\n        const o = start.offset === 0 ? 0 : 1\n        const newIndex = inlineIndex + i + o\n        editor.insertNodeByKey(startBlock.key, newIndex, inline)\n      })\n    }\n  })\n}\n\nconst findInsertionNode = (fragment, document, startKey) => {\n  const hasSingleNode = object => {\n    if (!object || object.object === 'text') return\n    return object.nodes.size === 1\n  }\n\n  const firstNode = object => object && object.nodes.first()\n  let node = fragment\n\n  if (hasSingleNode(fragment)) {\n    let fragmentInner = firstNode(fragment)\n\n    const matches = documentNode => documentNode.type === fragmentInner.type\n    let documentInner = document.getFurthest(startKey, matches)\n\n    if (documentInner === document.getParent(startKey)) node = fragmentInner\n\n    while (hasSingleNode(fragmentInner) && hasSingleNode(documentInner)) {\n      fragmentInner = firstNode(fragmentInner)\n      documentInner = firstNode(documentInner)\n\n      if (fragmentInner.type === documentInner.type) {\n        node = fragmentInner\n      } else {\n        break\n      }\n    }\n  }\n\n  return node\n}\n\n/**\n * Insert an `inline` node at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Inline|String|Object} inline\n */\n\nCommands.insertInlineAtRange = (editor, range, inline) => {\n  inline = Inline.create(inline)\n\n  editor.withoutNormalizing(() => {\n    range = deleteExpandedAtRange(editor, range)\n\n    const { value } = editor\n    const { document } = value\n    const { start } = range\n    const parent = document.getParent(start.key)\n    const startText = document.assertDescendant(start.key)\n    const index = parent.nodes.indexOf(startText)\n\n    if (editor.isVoid(parent)) return\n\n    editor.splitNodeByKey(start.key, start.offset)\n    editor.insertNodeByKey(parent.key, index + 1, inline)\n  })\n}\n\n/**\n * Insert `text` at a `range`, with optional `marks`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.insertTextAtRange = (editor, range, text, marks) => {\n  range = deleteExpandedAtRange(editor, range)\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const offset = start.offset\n  const parent = document.getParent(start.key)\n\n  if (editor.isVoid(parent)) {\n    return\n  }\n\n  editor.insertTextByKey(start.key, offset, text, marks)\n}\n\n/**\n * Remove an existing `mark` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mark|String} mark (optional)\n */\n\nCommands.removeMarkAtRange = (editor, range, mark) => {\n  if (range.isCollapsed) return\n\n  const { value } = editor\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const { start, end } = range\n\n  editor.withoutNormalizing(() => {\n    texts.forEach(node => {\n      const { key } = node\n      let index = 0\n      let length = node.text.length\n\n      if (key === start.key) index = start.offset\n      if (key === end.key) length = end.offset\n      if (key === start.key && key === end.key)\n        length = end.offset - start.offset\n\n      editor.removeMarkByKey(key, index, length, mark)\n    })\n  })\n}\n\n/**\n * Set the `properties` of block nodes in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Object|String} properties\n */\n\nCommands.setBlocksAtRange = (editor, range, properties) => {\n  const { value } = editor\n  const { document } = value\n  const blocks = document.getLeafBlocksAtRange(range)\n\n  const { start, end, isCollapsed } = range\n  const isStartVoid = document.hasVoidParent(start.key, editor)\n  const startBlock = document.getClosestBlock(start.key)\n  const endBlock = document.getClosestBlock(end.key)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    isCollapsed === false &&\n    start.offset === 0 &&\n    end.offset === 0 &&\n    isStartVoid === false &&\n    start.key === startBlock.getFirstText().key &&\n    end.key === endBlock.getFirstText().key\n\n  // If it's a hanging selection, ignore the last block.\n  const sets = isHanging ? blocks.slice(0, -1) : blocks\n\n  editor.withoutNormalizing(() => {\n    sets.forEach(block => {\n      editor.setNodeByKey(block.key, properties)\n    })\n  })\n}\n\n/**\n * Set the `properties` of inline nodes in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Object|String} properties\n */\n\nCommands.setInlinesAtRange = (editor, range, properties) => {\n  const { value } = editor\n  const { document } = value\n  const inlines = document.getLeafInlinesAtRange(range)\n\n  editor.withoutNormalizing(() => {\n    inlines.forEach(inline => {\n      editor.setNodeByKey(inline.key, properties)\n    })\n  })\n}\n\n/**\n * Split the block nodes at a `range`, to optional `height`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\nCommands.splitBlockAtRange = (editor, range, height = 1) => {\n  range = deleteExpandedAtRange(editor, range)\n\n  const { start, end } = range\n  let { value } = editor\n  let { document } = value\n  let node = document.assertDescendant(start.key)\n  let parent = document.getClosestBlock(node.key)\n  let h = 0\n\n  while (parent && parent.object === 'block' && h < height) {\n    node = parent\n    parent = document.getClosestBlock(parent.key)\n    h++\n  }\n\n  editor.withoutNormalizing(() => {\n    editor.splitDescendantsByKey(node.key, start.key, start.offset)\n\n    value = editor.value\n    document = value.document\n\n    if (range.isExpanded) {\n      if (range.isBackward) range = range.flip()\n      const nextBlock = document.getNextBlock(node.key)\n      range = range.moveAnchorToStartOfNode(nextBlock)\n      range = range.setFocus(range.focus.setPath(null))\n\n      if (start.key === end.key) {\n        range = range.moveFocusTo(range.anchor.key, end.offset - start.offset)\n      }\n\n      range = document.resolveRange(range)\n      editor.deleteAtRange(range)\n    }\n  })\n}\n\n/**\n * Split the inline nodes at a `range`, to optional `height`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\nCommands.splitInlineAtRange = (editor, range, height = Infinity) => {\n  range = deleteExpandedAtRange(editor, range)\n\n  const { start } = range\n  const { value } = editor\n  const { document } = value\n  let node = document.assertDescendant(start.key)\n  let parent = document.getClosestInline(node.key)\n  let h = 0\n\n  while (parent && parent.object === 'inline' && h < height) {\n    node = parent\n    parent = document.getClosestInline(parent.key)\n    h++\n  }\n\n  editor.splitDescendantsByKey(node.key, start.key, start.offset)\n}\n\n/**\n * Add or remove a `mark` from the characters at `range`, depending on whether\n * it's already there.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nCommands.toggleMarkAtRange = (editor, range, mark) => {\n  if (range.isCollapsed) return\n\n  mark = Mark.create(mark)\n\n  const { value } = editor\n  const { document } = value\n  const marks = document.getActiveMarksAtRange(range)\n  const exists = marks.some(m => m.equals(mark))\n\n  if (exists) {\n    editor.removeMarkAtRange(range, mark)\n  } else {\n    editor.addMarkAtRange(range, mark)\n  }\n}\n\n/**\n * Unwrap all of the block nodes in a `range` from a block with `properties`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String|Object} properties\n */\n\nCommands.unwrapBlockAtRange = (editor, range, properties) => {\n  properties = Node.createProperties(properties)\n\n  const { value } = editor\n  let { document } = value\n  const blocks = document.getLeafBlocksAtRange(range)\n  const wrappers = blocks\n    .map(block => {\n      return document.getClosest(block.key, parent => {\n        if (parent.object !== 'block') return false\n        if (properties.type != null && parent.type !== properties.type)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  editor.withoutNormalizing(() => {\n    wrappers.forEach(block => {\n      const first = block.nodes.first()\n      const last = block.nodes.last()\n      const parent = editor.value.document.getParent(block.key)\n      const index = parent.nodes.indexOf(block)\n\n      const children = block.nodes.filter(child => {\n        return blocks.some(b => child === b || child.hasDescendant(b.key))\n      })\n\n      const firstMatch = children.first()\n      const lastMatch = children.last()\n\n      if (first === firstMatch && last === lastMatch) {\n        block.nodes.forEach((child, i) => {\n          editor.moveNodeByKey(child.key, parent.key, index + i)\n        })\n\n        editor.removeNodeByKey(block.key)\n      } else if (last === lastMatch) {\n        block.nodes.skipUntil(n => n === firstMatch).forEach((child, i) => {\n          editor.moveNodeByKey(child.key, parent.key, index + 1 + i)\n        })\n      } else if (first === firstMatch) {\n        block.nodes\n          .takeUntil(n => n === lastMatch)\n          .push(lastMatch)\n          .forEach((child, i) => {\n            editor.moveNodeByKey(child.key, parent.key, index + i)\n          })\n      } else {\n        const firstText = firstMatch.getFirstText()\n\n        editor.splitDescendantsByKey(block.key, firstText.key, 0)\n\n        document = editor.value.document\n\n        children.forEach((child, i) => {\n          if (i === 0) {\n            const extra = child\n            child = document.getNextBlock(child.key)\n            editor.removeNodeByKey(extra.key)\n          }\n\n          editor.moveNodeByKey(child.key, parent.key, index + 1 + i)\n        })\n      }\n    })\n  })\n}\n\n/**\n * Unwrap the inline nodes in a `range` from an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String|Object} properties\n */\n\nCommands.unwrapInlineAtRange = (editor, range, properties) => {\n  properties = Node.createProperties(properties)\n\n  const { value } = editor\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const inlines = texts\n    .map(text => {\n      return document.getClosest(text.key, parent => {\n        if (parent.object !== 'inline') return false\n        if (properties.type != null && parent.type !== properties.type)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  editor.withoutNormalizing(() => {\n    inlines.forEach(inline => {\n      const parent = editor.value.document.getParent(inline.key)\n      const index = parent.nodes.indexOf(inline)\n\n      inline.nodes.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, parent.key, index + i)\n      })\n\n      editor.removeNodeByKey(inline.key)\n    })\n  })\n}\n\n/**\n * Wrap all of the blocks in a `range` in a new `block`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Block|Object|String} block\n */\n\nCommands.wrapBlockAtRange = (editor, range, block) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n\n  const { value } = editor\n  const { document } = value\n\n  const blocks = document.getLeafBlocksAtRange(range)\n  const firstblock = blocks.first()\n  const lastblock = blocks.last()\n  let parent, siblings, index\n\n  // If there is only one block in the selection then we know the parent and\n  // siblings.\n  if (blocks.length === 1) {\n    parent = document.getParent(firstblock.key)\n    siblings = blocks\n  } else {\n    // Determine closest shared parent to all blocks in selection.\n    parent = document.getClosest(firstblock.key, p1 => {\n      return !!document.getClosest(lastblock.key, p2 => p1 === p2)\n    })\n  }\n\n  // If no shared parent could be found then the parent is the document.\n  if (parent == null) parent = document\n\n  // Create a list of direct children siblings of parent that fall in the\n  // selection.\n  if (siblings == null) {\n    const indexes = parent.nodes.reduce((ind, node, i) => {\n      if (node === firstblock || node.hasDescendant(firstblock.key)) ind[0] = i\n      if (node === lastblock || node.hasDescendant(lastblock.key)) ind[1] = i\n      return ind\n    }, [])\n\n    index = indexes[0]\n    siblings = parent.nodes.slice(indexes[0], indexes[1] + 1)\n  }\n\n  // Get the index to place the new wrapped node at.\n  if (index == null) {\n    index = parent.nodes.indexOf(siblings.first())\n  }\n\n  editor.withoutNormalizing(() => {\n    // Inject the new block node into the parent.\n    editor.insertNodeByKey(parent.key, index, block)\n\n    // Move the sibling nodes into the new block node.\n    siblings.forEach((node, i) => {\n      editor.moveNodeByKey(node.key, block.key, i)\n    })\n  })\n}\n\n/**\n * Wrap the text and inlines in a `range` in a new `inline`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Inline|Object|String} inline\n */\n\nCommands.wrapInlineAtRange = (editor, range, inline) => {\n  const { value } = editor\n  let { document } = value\n  const { start, end } = range\n\n  if (range.isCollapsed) {\n    // Wrapping an inline void\n    const inlineParent = document.getClosestInline(start.key)\n\n    if (!inlineParent) {\n      return\n    }\n\n    if (!editor.isVoid(inlineParent)) {\n      return\n    }\n\n    return editor.wrapInlineByKey(inlineParent.key, inline)\n  }\n\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n\n  const blocks = document.getLeafBlocksAtRange(range)\n  let startBlock = document.getClosestBlock(start.key)\n  let endBlock = document.getClosestBlock(end.key)\n  const startInline = document.getClosestInline(start.key)\n  const endInline = document.getClosestInline(end.key)\n  let startChild = startBlock.getFurthestAncestor(start.key)\n  let endChild = endBlock.getFurthestAncestor(end.key)\n\n  editor.withoutNormalizing(() => {\n    if (!startInline || startInline !== endInline) {\n      editor.splitDescendantsByKey(endChild.key, end.key, end.offset)\n      editor.splitDescendantsByKey(startChild.key, start.key, start.offset)\n    }\n\n    document = editor.value.document\n    startBlock = document.getDescendant(startBlock.key)\n    endBlock = document.getDescendant(endBlock.key)\n    startChild = startBlock.getFurthestAncestor(start.key)\n    endChild = endBlock.getFurthestAncestor(end.key)\n    const startIndex = startBlock.nodes.indexOf(startChild)\n    const endIndex = endBlock.nodes.indexOf(endChild)\n\n    if (startInline && startInline === endInline) {\n      const text = startBlock\n        .getTextsAtRange(range)\n        .get(0)\n        .splitText(start.offset)[1]\n        .splitText(end.offset - start.offset)[0]\n\n      inline = inline.set('nodes', List([text]))\n      editor.insertInlineAtRange(range, inline)\n\n      const inlinekey = inline.getFirstText().key\n      const rng = {\n        anchor: {\n          key: inlinekey,\n          offset: 0,\n        },\n        focus: {\n          key: inlinekey,\n          offset: end.offset - start.offset,\n        },\n        isFocused: true,\n      }\n      editor.select(rng)\n    } else if (startBlock === endBlock) {\n      document = editor.value.document\n      startBlock = document.getClosestBlock(start.key)\n      startChild = startBlock.getFurthestAncestor(start.key)\n\n      const startInner = document.getNextSibling(startChild.key)\n      const startInnerIndex = startBlock.nodes.indexOf(startInner)\n      const endInner =\n        start.key === end.key\n          ? startInner\n          : startBlock.getFurthestAncestor(end.key)\n      const inlines = startBlock.nodes\n        .skipUntil(n => n === startInner)\n        .takeUntil(n => n === endInner)\n        .push(endInner)\n\n      const node = inline.regenerateKey()\n\n      editor.insertNodeByKey(startBlock.key, startInnerIndex, node)\n\n      inlines.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, node.key, i)\n      })\n    } else {\n      const startInlines = startBlock.nodes.slice(startIndex + 1)\n      const endInlines = endBlock.nodes.slice(0, endIndex + 1)\n      const startNode = inline.regenerateKey()\n      const endNode = inline.regenerateKey()\n\n      editor.insertNodeByKey(startBlock.key, startIndex + 1, startNode)\n      editor.insertNodeByKey(endBlock.key, endIndex, endNode)\n\n      startInlines.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, startNode.key, i)\n      })\n\n      endInlines.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, endNode.key, i)\n      })\n\n      blocks.slice(1, -1).forEach(block => {\n        const node = inline.regenerateKey()\n        editor.insertNodeByKey(block.key, 0, node)\n\n        block.nodes.forEach((child, i) => {\n          editor.moveNodeByKey(child.key, node.key, i)\n        })\n      })\n    }\n  })\n}\n\n/**\n * Wrap the text in a `range` in a prefix/suffix.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String} prefix\n * @param {String} suffix (optional)\n */\n\nCommands.wrapTextAtRange = (editor, range, prefix, suffix = prefix) => {\n  const { start, end } = range\n  const startRange = range.moveToStart()\n  let endRange = range.moveToEnd()\n\n  if (start.key === end.key) {\n    endRange = endRange.moveForward(prefix.length)\n  }\n\n  editor.withoutNormalizing(() => {\n    editor.insertTextAtRange(startRange, prefix, [])\n    editor.insertTextAtRange(endRange, suffix, [])\n  })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Add mark to text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mixed} mark\n */\n\nCommands.addMarkByPath = (editor, path, offset, length, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'add_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  operations.forEach(op => editor.applyOperation(op))\n}\n\n/**\n * Insert a `fragment` at `index` in a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} index\n * @param {Fragment} fragment\n */\n\nCommands.insertFragmentByPath = (editor, path, index, fragment) => {\n  fragment.nodes.forEach((node, i) => {\n    editor.insertNodeByPath(path, index + i, node)\n  })\n}\n\n/**\n * Insert a `node` at `index` in a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} index\n * @param {Node} node\n */\n\nCommands.insertNodeByPath = (editor, path, index, node) => {\n  const { value } = editor\n\n  editor.applyOperation({\n    type: 'insert_node',\n    value,\n    path: path.concat(index),\n    node,\n  })\n}\n\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.insertTextByPath = (editor, path, offset, text, marks) => {\n  const { value } = editor\n  const { decorations, document } = value\n  const node = document.assertNode(path)\n  marks = marks || node.getMarksAtIndex(offset)\n\n  let updated = false\n  const { key } = node\n\n  const decs = decorations.filter(dec => {\n    const { start, end, mark } = dec\n    const isAtomic = editor.isAtomic(mark)\n    if (!isAtomic) return true\n    if (start.key !== key) return true\n\n    if (start.offset < offset && (end.key !== key || end.offset > offset)) {\n      updated = true\n      return false\n    }\n\n    return true\n  })\n\n  if (updated) {\n    editor.setDecorations(decs)\n  }\n\n  editor.applyOperation({\n    type: 'insert_text',\n    value,\n    path,\n    offset,\n    text,\n    marks,\n  })\n}\n\n/**\n * Merge a node by `path` with the previous node.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.mergeNodeByPath = (editor, path) => {\n  const { value } = editor\n  const { document } = value\n  const original = document.getDescendant(path)\n  const previous = document.getPreviousSibling(path)\n\n  if (!previous) {\n    throw new Error(\n      `Unable to merge node with path \"${path}\", because it has no previous sibling.`\n    )\n  }\n\n  const position =\n    previous.object === 'text' ? previous.text.length : previous.nodes.size\n\n  editor.applyOperation({\n    type: 'merge_node',\n    value,\n    path,\n    position,\n    // for undos to succeed we only need the type and data because\n    // these are the only properties that get changed in the merge operation\n    properties: {\n      type: original.type,\n      data: original.data,\n    },\n    target: null,\n  })\n}\n\n/**\n * Move a node by `path` to a new parent by `newParentPath` and `newIndex`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {String} newParentPath\n * @param {Number} newIndex\n */\n\nCommands.moveNodeByPath = (editor, path, newParentPath, newIndex) => {\n  const { value } = editor\n\n  // If the operation path and newParentPath are the same,\n  // this should be considered a NOOP\n  if (PathUtils.isEqual(path, newParentPath)) {\n    return editor\n  }\n\n  const newPath = newParentPath.concat(newIndex)\n\n  if (PathUtils.isEqual(path, newPath)) {\n    return editor\n  }\n\n  editor.applyOperation({\n    type: 'move_node',\n    value,\n    path,\n    newPath,\n  })\n}\n\n/**\n * Remove mark from text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n */\n\nCommands.removeMarkByPath = (editor, path, offset, length, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (!leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'remove_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  operations.forEach(op => editor.applyOperation(op))\n}\n\n/**\n * Remove all `marks` from node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.removeAllMarksByPath = (editor, path) => {\n  const { state } = editor\n  const { document } = state\n  const node = document.assertNode(path)\n  const texts = node.object === 'text' ? [node] : node.getTextsAsArray()\n\n  texts.forEach(text => {\n    text.getMarksAsArray().forEach(mark => {\n      editor.removeMarkByKey(text.key, 0, text.text.length, mark)\n    })\n  })\n}\n\n/**\n * Remove a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.removeNodeByPath = (editor, path) => {\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n\n  editor.applyOperation({\n    type: 'remove_node',\n    value,\n    path,\n    node,\n  })\n}\n\n/**\n * Remove text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n */\n\nCommands.removeTextByPath = (editor, path, offset, length) => {\n  const { value } = editor\n  const { decorations, document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n  const { text } = node\n\n  let updated = false\n  const { key } = node\n  const from = offset\n  const to = offset + length\n\n  const decs = decorations.filter(dec => {\n    const { start, end, mark } = dec\n    const isAtomic = editor.isAtomic(mark)\n    if (!isAtomic) return true\n    if (start.key !== key) return true\n\n    if (start.offset < from && (end.key !== key || end.offset > from)) {\n      updated = true\n      return false\n    }\n\n    if (start.offset < to && (end.key !== key || end.offset > to)) {\n      updated = true\n      return null\n    }\n\n    return true\n  })\n\n  if (updated) {\n    editor.setDecorations(decs)\n  }\n\n  const removals = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the removal, continue on.\n    if (ay < bx || by < ax) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n    const string = text.slice(start, end)\n\n    removals.push({\n      type: 'remove_text',\n      value,\n      path,\n      offset: start,\n      text: string,\n      marks: leaf.marks,\n    })\n  })\n\n  // Apply in reverse order, so subsequent removals don't impact previous ones.\n  removals.reverse().forEach(op => editor.applyOperation(op))\n}\n\n/**\n`* Replace a `node` with another `node`\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|Node} node\n */\n\nCommands.replaceNodeByPath = (editor, path, newNode) => {\n  newNode = Node.create(newNode)\n  const index = path.last()\n  const parentPath = PathUtils.lift(path)\n\n  editor.withoutNormalizing(() => {\n    editor.removeNodeByPath(path)\n    editor.insertNodeByPath(parentPath, index, newNode)\n  })\n}\n\n/**\n * Replace A Length of Text with another string or text\n * @param {Editor} editor\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {string} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.replaceTextByPath = (editor, path, offset, length, text, marks) => {\n  const { document } = editor.value\n  const node = document.assertNode(path)\n\n  if (length + offset > node.text.length) {\n    length = node.text.length - offset\n  }\n\n  const range = document.createRange({\n    anchor: { path, offset },\n    focus: { path, offset: offset + length },\n  })\n\n  let activeMarks = document.getActiveMarksAtRange(range)\n\n  editor.withoutNormalizing(() => {\n    editor.removeTextByPath(path, offset, length)\n\n    if (!marks) {\n      // Do not use mark at index when marks and activeMarks are both empty\n      marks = activeMarks ? activeMarks : []\n    } else if (activeMarks) {\n      // Do not use `has` because we may want to reset marks like font-size with\n      // an updated data;\n      activeMarks = activeMarks.filter(\n        activeMark => !marks.find(m => activeMark.type === m.type)\n      )\n\n      marks = activeMarks.merge(marks)\n    }\n\n    editor.insertTextByPath(path, offset, text, marks)\n  })\n}\n\n/**\n * Set `properties` on mark on text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n */\n\nCommands.setMarkByPath = (editor, path, offset, length, mark, properties) => {\n  mark = Mark.create(mark)\n  properties = Mark.createProperties(properties)\n  const { value } = editor\n\n  editor.applyOperation({\n    type: 'set_mark',\n    value,\n    path,\n    offset,\n    length,\n    mark,\n    properties,\n  })\n}\n\n/**\n * Set `properties` on a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nCommands.setNodeByPath = (editor, path, properties) => {\n  properties = Node.createProperties(properties)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n\n  editor.applyOperation({\n    type: 'set_node',\n    value,\n    path,\n    node,\n    properties,\n  })\n}\n\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.setTextByPath = (editor, path, text, marks) => {\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const end = node.text.length\n  editor.replaceTextByPath(path, 0, end, text, marks)\n}\n\n/**\n * Split a node by `path` at `position`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} position\n * @param {Object} options\n */\n\nCommands.splitNodeByPath = (editor, path, position, options = {}) => {\n  const { target = null } = options\n  const { value } = editor\n  const { document } = value\n  const node = document.getDescendant(path)\n\n  editor.applyOperation({\n    type: 'split_node',\n    value,\n    path,\n    position,\n    target,\n    properties: {\n      type: node.type,\n      data: node.data,\n    },\n  })\n}\n\n/**\n * Split a node deeply down the tree by `path`, `textPath` and `textOffset`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Array} textPath\n * @param {Number} textOffset\n */\n\nCommands.splitDescendantsByPath = (editor, path, textPath, textOffset) => {\n  if (path.equals(textPath)) {\n    editor.splitNodeByPath(textPath, textOffset)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const text = document.assertNode(textPath)\n  const ancestors = document.getAncestors(textPath)\n  const nodes = ancestors\n    .skipUntil(a => a.key === node.key)\n    .reverse()\n    .unshift(text)\n\n  let previous\n  let index\n\n  editor.withoutNormalizing(() => {\n    nodes.forEach(n => {\n      const prevIndex = index == null ? null : index\n      index = previous ? n.nodes.indexOf(previous) + 1 : textOffset\n      previous = n\n      editor.splitNodeByKey(n.key, index, { target: prevIndex })\n    })\n  })\n}\n\n/**\n * Unwrap content from an inline parent with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nCommands.unwrapInlineByPath = (editor, path, properties) => {\n  const { value } = editor\n  const { document, selection } = value\n  const node = document.assertNode(path)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOfNode(first, last)\n  editor.unwrapInlineAtRange(range, properties)\n}\n\n/**\n * Unwrap content from a block parent with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nCommands.unwrapBlockByPath = (editor, path, properties) => {\n  const { value } = editor\n  const { document, selection } = value\n  const node = document.assertNode(path)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOfNode(first, last)\n  editor.unwrapBlockAtRange(range, properties)\n}\n\n/**\n * Unwrap a single node from its parent.\n *\n * If the node is surrounded with siblings, its parent will be\n * split. If the node is the only child, the parent is removed, and\n * simply replaced by the node itself.  Cannot unwrap a root node.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.unwrapNodeByPath = (editor, path) => {\n  const { value } = editor\n  const { document } = value\n  document.assertNode(path)\n\n  const parentPath = PathUtils.lift(path)\n  const parent = document.assertNode(parentPath)\n  const index = path.last()\n  const parentIndex = parentPath.last()\n  const grandPath = PathUtils.lift(parentPath)\n  const isFirst = index === 0\n  const isLast = index === parent.nodes.size - 1\n\n  editor.withoutNormalizing(() => {\n    if (parent.nodes.size === 1) {\n      editor.moveNodeByPath(path, grandPath, parentIndex + 1)\n      editor.removeNodeByPath(parentPath)\n    } else if (isFirst) {\n      editor.moveNodeByPath(path, grandPath, parentIndex)\n    } else if (isLast) {\n      editor.moveNodeByPath(path, grandPath, parentIndex + 1)\n    } else {\n      let updatedPath = PathUtils.increment(path, 1, parentPath.size - 1)\n      updatedPath = updatedPath.set(updatedPath.size - 1, 0)\n      editor.splitNodeByPath(parentPath, index)\n      editor.moveNodeByPath(updatedPath, grandPath, parentIndex + 1)\n    }\n  })\n}\n\n/**\n * Unwrap all of the children of a node, by removing the node and replacing it\n * with the children in the tree.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.unwrapChildrenByPath = (editor, path) => {\n  path = PathUtils.create(path)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const { nodes } = node\n\n  editor.withoutNormalizing(() => {\n    nodes.reverse().forEach((child, i) => {\n      const childIndex = nodes.size - i - 1\n      const childPath = path.push(childIndex)\n      editor.moveNodeByPath(childPath, parentPath, index + 1)\n    })\n\n    editor.removeNodeByPath(path)\n  })\n}\n\n/**\n * Wrap a node in a block with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Block|Object|String} block\n */\n\nCommands.wrapBlockByPath = (editor, path, block) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const newPath = PathUtils.increment(path)\n\n  editor.withoutNormalizing(() => {\n    editor.insertNodeByPath(parentPath, index, block)\n    editor.moveNodeByPath(newPath, path, 0)\n  })\n}\n\n/**\n * Wrap a node in an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Block|Object|String} inline\n */\n\nCommands.wrapInlineByPath = (editor, path, inline) => {\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const newPath = PathUtils.increment(path)\n\n  editor.withoutNormalizing(() => {\n    editor.insertNodeByPath(parentPath, index, inline)\n    editor.moveNodeByPath(newPath, path, 0)\n  })\n}\n\n/**\n * Wrap a node by `path` with `node`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Node|Object} node\n */\n\nCommands.wrapNodeByPath = (editor, path, node) => {\n  node = Node.create(node)\n\n  if (node.object === 'block') {\n    editor.wrapBlockByPath(path, node)\n  } else if (node.object === 'inline') {\n    editor.wrapInlineByPath(path, node)\n  }\n}\n\n/**\n * Mix in `*ByKey` variants.\n */\n\nconst COMMANDS = [\n  'addMark',\n  'insertFragment',\n  'insertNode',\n  'insertText',\n  'mergeNode',\n  'removeAllMarks',\n  'removeMark',\n  'removeNode',\n  'removeText',\n  'replaceNode',\n  'replaceText',\n  'setMark',\n  'setNode',\n  'setText',\n  'splitNode',\n  'unwrapBlock',\n  'unwrapChildren',\n  'unwrapInline',\n  'unwrapNode',\n  'wrapBlock',\n  'wrapInline',\n  'wrapNode',\n]\n\nfor (const method of COMMANDS) {\n  Commands[`${method}ByKey`] = (editor, key, ...args) => {\n    const { value } = editor\n    const { document } = value\n    const path = document.assertPath(key)\n    editor[`${method}ByPath`](path, ...args)\n  }\n}\n\n// Moving nodes takes two keys, so it's slightly different.\nCommands.moveNodeByKey = (editor, key, newKey, ...args) => {\n  const { value } = editor\n  const { document } = value\n  const path = document.assertPath(key)\n  const newPath = document.assertPath(newKey)\n  editor.moveNodeByPath(path, newPath, ...args)\n}\n\n// Splitting descendants takes two keys, so it's slightly different.\nCommands.splitDescendantsByKey = (editor, key, textKey, ...args) => {\n  const { value } = editor\n  const { document } = value\n  const path = document.assertPath(key)\n  const textPath = document.assertPath(textKey)\n  editor.splitDescendantsByPath(path, textPath, ...args)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import omit from 'lodash/omit'\nimport { List } from 'immutable'\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Save an `operation` into the history.\n *\n * @param {Editor} editor\n * @param {Object} operation\n */\n\nCommands.save = (editor, operation) => {\n  const { operations, value } = editor\n  const { data } = value\n  let { save, merge } = editor.tmp\n  if (save === false) return\n\n  let undos = data.get('undos') || List()\n  const lastBatch = undos.last()\n  const lastOperation = lastBatch && lastBatch.last()\n\n  // If `merge` is non-commital, and this is not the first operation in a new\n  // editor, then merge, otherwise merge based on the last operation.\n  if (merge == null) {\n    if (operations.size !== 0) {\n      merge = true\n    } else {\n      merge = shouldMerge(operation, lastOperation)\n    }\n  }\n\n  // If the `merge` flag is true, add the operation to the last batch.\n  if (merge && lastBatch) {\n    const batch = lastBatch.push(operation)\n    undos = undos.pop()\n    undos = undos.push(batch)\n  } else {\n    // Otherwise, create a new batch with the operation.\n    const batch = List([operation])\n    undos = undos.push(batch)\n  }\n\n  // Constrain the history to 100 entries for memory's sake.\n  if (undos.size > 100) {\n    undos = undos.takeLast(100)\n  }\n\n  // Clear the redos and update the history.\n  editor.withoutSaving(() => {\n    const redos = List()\n    const newData = data.set('undos', undos).set('redos', redos)\n    editor.setData(newData)\n  })\n}\n\n/**\n * Redo to the next value in the history.\n *\n * @param {Editor} editor\n */\n\nCommands.redo = editor => {\n  const { value } = editor\n  const { data } = value\n  let redos = data.get('redos') || List()\n  let undos = data.get('undos') || List()\n  const batch = redos.last()\n  if (!batch) return\n\n  editor.withoutSaving(() => {\n    editor.withoutNormalizing(() => {\n      // Replay the batch of operations.\n      batch.forEach(op => {\n        const { type, properties } = op\n\n        // When the operation mutates the selection, omit its `isFocused` value to\n        // prevent the editor focus from changing during redoing.\n        if (type === 'set_selection') {\n          op = op.set('properties', omit(properties, 'isFocused'))\n        }\n\n        editor.applyOperation(op)\n      })\n\n      // Shift the next value into the undo stack.\n      redos = redos.pop()\n      undos = undos.push(batch)\n      const newData = data.set('undos', undos).set('redos', redos)\n      editor.setData(newData)\n    })\n  })\n}\n\n/**\n * Undo the previous operations in the history.\n *\n * @param {Editor} editor\n */\n\nCommands.undo = editor => {\n  const { value } = editor\n  const { data } = value\n  let redos = data.get('redos') || List()\n  let undos = data.get('undos') || List()\n  const batch = undos.last()\n  if (!batch) return\n\n  editor.withoutSaving(() => {\n    editor.withoutNormalizing(() => {\n      // Replay the inverse of the previous operations.\n      batch\n        .slice()\n        .reverse()\n        .map(op => op.invert())\n        .forEach(inverse => {\n          const { type, properties } = inverse\n\n          // When the operation mutates the selection, omit its `isFocused` value to\n          // prevent the editor focus from changing during undoing.\n          if (type === 'set_selection') {\n            inverse = inverse.set('properties', omit(properties, 'isFocused'))\n          }\n\n          editor.applyOperation(inverse)\n        })\n\n      // Shift the previous operations into the redo stack.\n      redos = redos.push(batch)\n      undos = undos.pop()\n      const newData = data.set('undos', undos).set('redos', redos)\n      editor.setData(newData)\n    })\n  })\n}\n\n/**\n * Apply a series of changes inside a synchronous `fn`, without merging any of\n * the new operations into previous save point in the history.\n *\n * @param {Editor} editor\n * @param {Function} fn\n */\n\nCommands.withoutMerging = (editor, fn) => {\n  const value = editor.tmp.merge\n  editor.tmp.merge = false\n  fn(editor)\n  editor.tmp.merge = value\n}\n\n/**\n * Apply a series of changes inside a synchronous `fn`, without saving any of\n * their operations into the history.\n *\n * @param {Editor} editor\n * @param {Function} fn\n */\n\nCommands.withoutSaving = (editor, fn) => {\n  const value = editor.tmp.save\n  editor.tmp.save = false\n  fn(editor)\n  editor.tmp.save = value\n}\n\n/**\n * Check whether to merge a new operation `o` into the previous operation `p`.\n *\n * @param {Object} o\n * @param {Object} p\n * @return {Boolean}\n */\n\nfunction shouldMerge(o, p) {\n  if (!p) return false\n\n  const merge =\n    (o.type === 'set_selection' && p.type === 'set_selection') ||\n    (o.type === 'insert_text' &&\n      p.type === 'insert_text' &&\n      o.offset === p.offset + p.text.length &&\n      o.path.equals(p.path)) ||\n    (o.type === 'remove_text' &&\n      p.type === 'remove_text' &&\n      o.offset + o.text.length === p.offset &&\n      o.path.equals(p.path))\n\n  return merge\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import { is } from 'immutable'\nimport pick from 'lodash/pick'\n\nimport Selection from '../models/selection'\nimport TextUtils from '../utils/text-utils'\n\nconst Commands = {}\n\nCommands.blur = editor => {\n  editor.select({ isFocused: false })\n}\n\nCommands.deselect = editor => {\n  const range = Selection.create()\n  editor.select(range)\n}\n\nCommands.focus = editor => {\n  editor.select({ isFocused: true })\n}\n\nCommands.flip = editor => {\n  editor.command(proxy, 'flip')\n}\n\nCommands.moveAnchorBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'anchor', ...args)\n}\n\nCommands.moveAnchorWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'anchor', ...args)\n}\n\nCommands.moveAnchorForward = (editor, ...args) => {\n  editor.command(pointForward, 'anchor', ...args)\n}\n\nCommands.moveAnchorWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'anchor', ...args)\n}\n\nCommands.moveAnchorTo = (editor, ...args) => {\n  editor.command(proxy, 'moveAnchorTo', ...args)\n}\n\nCommands.moveAnchorToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'block')\n}\n\nCommands.moveAnchorToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'inline')\n}\n\nCommands.moveAnchorToEndOfDocument = editor => {\n  editor.moveAnchorToEndOfNode(editor.value.document).moveToAnchor()\n}\n\nCommands.moveAnchorToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'block')\n}\n\nCommands.moveAnchorToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'inline')\n}\n\nCommands.moveAnchorToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'text')\n}\n\nCommands.moveAnchorToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveAnchorToEndOfNode', ...args)\n}\n\nCommands.moveAnchorToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'block')\n}\n\nCommands.moveAnchorToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'inline')\n}\n\nCommands.moveAnchorToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'text')\n}\n\nCommands.moveAnchorToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'text')\n}\n\nCommands.moveAnchorToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'block')\n}\n\nCommands.moveAnchorToStartOfDocument = editor => {\n  editor.moveAnchorToStartOfNode(editor.value.document).moveToAnchor()\n}\n\nCommands.moveAnchorToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'inline')\n}\n\nCommands.moveAnchorToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'block')\n}\n\nCommands.moveAnchorToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'inline')\n}\n\nCommands.moveAnchorToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'text')\n}\n\nCommands.moveAnchorToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveAnchorToStartOfNode', ...args)\n}\n\nCommands.moveAnchorToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'block')\n}\n\nCommands.moveAnchorToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'inline')\n}\n\nCommands.moveAnchorToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'text')\n}\n\nCommands.moveAnchorToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'text')\n}\n\nCommands.moveBackward = (editor, ...args) => {\n  editor.moveAnchorBackward(...args).moveFocusBackward(...args)\n}\n\nCommands.moveWordBackward = (editor, ...args) => {\n  editor.moveFocusWordBackward(...args).moveToFocus()\n}\n\nCommands.moveEndBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'end', ...args)\n}\n\nCommands.moveEndWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'end', ...args)\n}\n\nCommands.moveEndForward = (editor, ...args) => {\n  editor.command(pointForward, 'end', ...args)\n}\n\nCommands.moveEndWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'end', ...args)\n}\n\nCommands.moveEndTo = (editor, ...args) => {\n  editor.command(proxy, 'moveEndTo', ...args)\n}\n\nCommands.moveEndToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'end', 'end', 'block')\n}\n\nCommands.moveEndToEndOfDocument = editor => {\n  editor.moveEndToEndOfNode(editor.value.document).moveToEnd()\n}\n\nCommands.moveEndToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'end', 'end', 'inline')\n}\n\nCommands.moveEndToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'block')\n}\n\nCommands.moveEndToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'inline')\n}\n\nCommands.moveEndToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'text')\n}\n\nCommands.moveEndToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveEndToEndOfNode', ...args)\n}\n\nCommands.moveEndToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'block')\n}\n\nCommands.moveEndToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'inline')\n}\n\nCommands.moveEndToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'text')\n}\n\nCommands.moveEndToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'end', 'end', 'text')\n}\n\nCommands.moveEndToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'end', 'start', 'block')\n}\n\nCommands.moveEndToStartOfDocument = editor => {\n  editor.moveEndToStartOfNode(editor.value.document).moveToEnd()\n}\n\nCommands.moveEndToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'end', 'start', 'inline')\n}\n\nCommands.moveEndToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'block')\n}\n\nCommands.moveEndToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'inline')\n}\n\nCommands.moveEndToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'text')\n}\n\nCommands.moveEndToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveEndToStartOfNode', ...args)\n}\n\nCommands.moveEndToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'block')\n}\n\nCommands.moveEndToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'inline')\n}\n\nCommands.moveEndToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'text')\n}\n\nCommands.moveEndToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'end', 'start', 'text')\n}\n\nCommands.moveFocusBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'focus', ...args)\n}\n\nCommands.moveFocusWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'focus', ...args)\n}\n\nCommands.moveFocusForward = (editor, ...args) => {\n  editor.command(pointForward, 'focus', ...args)\n}\n\nCommands.moveFocusWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'focus', ...args)\n}\n\nCommands.moveFocusTo = (editor, ...args) => {\n  editor.command(proxy, 'moveFocusTo', ...args)\n}\n\nCommands.moveFocusToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'focus', 'end', 'block')\n}\n\nCommands.moveFocusToEndOfDocument = editor => {\n  editor.moveFocusToEndOfNode(editor.value.document).moveToFocus()\n}\n\nCommands.moveFocusToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'focus', 'end', 'inline')\n}\n\nCommands.moveFocusToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'block')\n}\n\nCommands.moveFocusToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'inline')\n}\n\nCommands.moveFocusToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'text')\n}\n\nCommands.moveFocusToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveFocusToEndOfNode', ...args)\n}\n\nCommands.moveFocusToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'block')\n}\n\nCommands.moveFocusToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'inline')\n}\n\nCommands.moveFocusToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'text')\n}\n\nCommands.moveFocusToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'focus', 'end', 'text')\n}\n\nCommands.moveFocusToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'focus', 'start', 'block')\n}\n\nCommands.moveFocusToStartOfDocument = editor => {\n  editor.moveFocusToStartOfNode(editor.value.document).moveToFocus()\n}\n\nCommands.moveFocusToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'focus', 'start', 'inline')\n}\n\nCommands.moveFocusToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'block')\n}\n\nCommands.moveFocusToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'inline')\n}\n\nCommands.moveFocusToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'text')\n}\n\nCommands.moveFocusToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveFocusToStartOfNode', ...args)\n}\n\nCommands.moveFocusToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'block')\n}\n\nCommands.moveFocusToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'inline')\n}\n\nCommands.moveFocusToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'text')\n}\n\nCommands.moveFocusToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'focus', 'start', 'text')\n}\n\nCommands.moveForward = (editor, ...args) => {\n  editor.moveAnchorForward(...args).moveFocusForward(...args)\n}\n\nCommands.moveWordForward = (editor, ...args) => {\n  editor.moveFocusWordForward(...args).moveToFocus(...args)\n}\n\nCommands.moveStartBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'start', ...args)\n}\n\nCommands.moveStartWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'start', ...args)\n}\n\nCommands.moveStartForward = (editor, ...args) => {\n  editor.command(pointForward, 'start', ...args)\n}\n\nCommands.moveStartWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'start', ...args)\n}\n\nCommands.moveStartTo = (editor, ...args) => {\n  editor.command(proxy, 'moveStartTo', ...args)\n}\n\nCommands.moveStartToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'start', 'end', 'block')\n}\n\nCommands.moveStartToEndOfDocument = editor => {\n  editor.moveStartToEndOfNode(editor.value.document).moveToStart()\n}\n\nCommands.moveStartToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'start', 'end', 'inline')\n}\n\nCommands.moveStartToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'block')\n}\n\nCommands.moveStartToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'inline')\n}\n\nCommands.moveStartToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'text')\n}\n\nCommands.moveStartToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveStartToEndOfNode', ...args)\n}\n\nCommands.moveStartToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'block')\n}\n\nCommands.moveStartToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'inline')\n}\n\nCommands.moveStartToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'text')\n}\n\nCommands.moveStartToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'start', 'end', 'text')\n}\n\nCommands.moveStartToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'start', 'start', 'block')\n}\n\nCommands.moveStartToStartOfDocument = editor => {\n  editor.moveStartToStartOfNode(editor.value.document).moveToStart()\n}\n\nCommands.moveStartToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'start', 'start', 'inline')\n}\n\nCommands.moveStartToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'block')\n}\n\nCommands.moveStartToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'inline')\n}\n\nCommands.moveStartToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'text')\n}\n\nCommands.moveStartToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveStartToStartOfNode', ...args)\n}\n\nCommands.moveStartToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'block')\n}\n\nCommands.moveStartToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'inline')\n}\n\nCommands.moveStartToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'text')\n}\n\nCommands.moveStartToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'start', 'start', 'text')\n}\n\nCommands.moveTo = (editor, ...args) => {\n  editor.command(proxy, 'moveTo', ...args)\n}\n\nCommands.moveToAnchor = editor => {\n  editor.command(proxy, 'moveToAnchor')\n}\n\nCommands.moveToEnd = editor => {\n  editor.command(proxy, 'moveToEnd')\n}\n\nCommands.moveToEndOfBlock = editor => {\n  editor.moveEndToEndOfBlock().moveToEnd()\n}\n\nCommands.moveToEndOfDocument = editor => {\n  editor.moveEndToEndOfNode(editor.value.document).moveToEnd()\n}\n\nCommands.moveToEndOfInline = editor => {\n  editor.moveEndToEndOfInline().moveToEnd()\n}\n\nCommands.moveToEndOfNextBlock = editor => {\n  editor.moveEndToEndOfNextBlock().moveToEnd()\n}\n\nCommands.moveToEndOfNextInline = editor => {\n  editor.moveEndToEndOfNextInline().moveToEnd()\n}\n\nCommands.moveToEndOfNextText = editor => {\n  editor.moveEndToEndOfNextText().moveToEnd()\n}\n\nCommands.moveToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveToEndOfNode', ...args)\n}\n\nCommands.moveToEndOfPreviousBlock = editor => {\n  editor.moveStartToEndOfPreviousBlock().moveToStart()\n}\n\nCommands.moveToEndOfPreviousInline = editor => {\n  editor.moveStartToEndOfPreviousInline().moveToStart()\n}\n\nCommands.moveToEndOfPreviousText = editor => {\n  editor.moveStartToEndOfPreviousText().moveToStart()\n}\n\nCommands.moveToEndOfText = editor => {\n  editor.moveEndToEndOfText().moveToEnd()\n}\n\nCommands.moveToFocus = editor => {\n  editor.command(proxy, 'moveToFocus')\n}\n\nCommands.moveToRangeOfDocument = editor => {\n  editor.moveToRangeOfNode(editor.value.document)\n}\n\nCommands.moveToRangeOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveToRangeOfNode', ...args)\n}\n\nCommands.moveToStart = editor => {\n  editor.command(proxy, 'moveToStart')\n}\n\nCommands.moveToStartOfBlock = editor => {\n  editor.moveStartToStartOfBlock().moveToStart()\n}\n\nCommands.moveToStartOfDocument = editor => {\n  editor.moveStartToStartOfNode(editor.value.document).moveToStart()\n}\n\nCommands.moveToStartOfInline = editor => {\n  editor.moveStartToStartOfInline().moveToStart()\n}\n\nCommands.moveToStartOfNextBlock = editor => {\n  editor.moveEndToStartOfNextBlock().moveToEnd()\n}\n\nCommands.moveToStartOfNextInline = editor => {\n  editor.moveEndToStartOfNextInline().moveToEnd()\n}\n\nCommands.moveToStartOfNextText = editor => {\n  editor.moveEndToStartOfNextText().moveToEnd()\n}\n\nCommands.moveToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveToStartOfNode', ...args)\n}\n\nCommands.moveToStartOfPreviousBlock = editor => {\n  editor.moveStartToStartOfPreviousBlock().moveToStart()\n}\n\nCommands.moveToStartOfPreviousInline = editor => {\n  editor.moveStartToStartOfPreviousInline().moveToStart()\n}\n\nCommands.moveToStartOfPreviousText = editor => {\n  editor.moveStartToStartOfPreviousText().moveToStart()\n}\n\nCommands.moveToStartOfText = editor => {\n  editor.moveStartToStartOfText().moveToStart()\n}\n\nCommands.select = (editor, properties, options = {}) => {\n  properties = Selection.createProperties(properties)\n  const { snapshot = false } = options\n  const { value } = editor\n  const { document, selection } = value\n  const props = {}\n  let next = selection.setProperties(properties)\n  next = document.resolveSelection(next)\n\n  // Re-compute the properties, to ensure that we get their normalized values.\n  properties = pick(next, Object.keys(properties))\n\n  // Remove any properties that are already equal to the current selection. And\n  // create a dictionary of the previous values for all of the properties that\n  // are being changed, for the inverse operation.\n  for (const k in properties) {\n    if (snapshot === true || !is(properties[k], selection[k])) {\n      props[k] = properties[k]\n    }\n  }\n\n  // If the selection moves, clear any marks, unless the new selection\n  // properties editor the marks in some way.\n  if (selection.marks && !props.marks && (props.anchor || props.focus)) {\n    props.marks = null\n  }\n\n  // If there are no new properties to set, abort to avoid extra operations.\n  if (Object.keys(props).length === 0) {\n    return\n  }\n\n  editor.applyOperation(\n    {\n      type: 'set_selection',\n      value,\n      properties: props,\n      selection: selection.toJSON(),\n    },\n    snapshot ? { skip: false, merge: false } : {}\n  )\n}\n\nCommands.setAnchor = (editor, ...args) => {\n  editor.command(proxy, 'setAnchor', ...args)\n}\n\nCommands.setEnd = (editor, ...args) => {\n  editor.command(proxy, 'setEnd', ...args)\n}\n\nCommands.setFocus = (editor, ...args) => {\n  editor.command(proxy, 'setFocus', ...args)\n}\n\nCommands.setStart = (editor, ...args) => {\n  editor.command(proxy, 'setStart', ...args)\n}\n\nCommands.snapshotSelection = editor => {\n  editor.withoutMerging(() => {\n    editor.select(editor.value.selection, { snapshot: true })\n  })\n}\n\n/**\n * Helpers.\n */\n\nfunction proxy(editor, method, ...args) {\n  const range = editor.value.selection[method](...args)\n  editor.select(range)\n}\n\nfunction pointEdgeObject(editor, point, edge, object) {\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1)\n  const Object = object.slice(0, 1).toUpperCase() + object.slice(1)\n  const method = `move${Point}To${Edge}OfNode`\n  const getNode = object === 'text' ? 'getNode' : `getClosest${Object}`\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const node = document[getNode](p.key)\n  if (!node) return\n  editor[method](node)\n}\n\nfunction pointEdgeSideObject(editor, point, edge, side, object) {\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1)\n  const Side = side.slice(0, 1).toUpperCase() + side.slice(1)\n  const Object = object.slice(0, 1).toUpperCase() + object.slice(1)\n  const method = `move${Point}To${Edge}OfNode`\n  const getNode = object === 'text' ? 'getNode' : `getClosest${Object}`\n  const getDirectionNode = `get${Side}${Object}`\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const node = document[getNode](p.key)\n  if (!node) return\n  const target = document[getDirectionNode](node.key)\n  if (!target) return\n  editor[method](target)\n}\n\nfunction pointBackward(editor, point, n = 1) {\n  if (n === 0) return\n  if (n < 0) return pointForward(editor, point, -n)\n\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const hasVoidParent = document.hasVoidParent(p.path, editor)\n\n  // what is this?\n  if (!hasVoidParent && p.offset - n >= 0) {\n    const range = selection[`move${Point}Backward`](n)\n    editor.select(range)\n    return\n  }\n\n  const previous = document.getPreviousText(p.path)\n  if (!previous) return\n\n  const block = document.getClosestBlock(p.path)\n  const isInBlock = block.hasNode(previous.key)\n  const isPreviousInVoid =\n    previous && document.hasVoidParent(previous.key, editor)\n  editor[`move${Point}ToEndOfNode`](previous)\n\n  // when is this called?\n  if (!hasVoidParent && !isPreviousInVoid && isInBlock) {\n    const range = editor.value.selection[`move${Point}Backward`](n)\n    editor.select(range)\n  }\n}\n\nfunction pointForward(editor, point, n = 1) {\n  if (n === 0) return\n  if (n < 0) return pointBackward(editor, point, -n)\n\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const text = document.getNode(p.path)\n  const hasVoidParent = document.hasVoidParent(p.path, editor)\n\n  // what is this?\n  if (!hasVoidParent && p.offset + n <= text.text.length) {\n    const range = selection[`move${Point}Forward`](n)\n    editor.select(range)\n    return\n  }\n\n  const next = document.getNextText(p.path)\n  if (!next) return\n\n  const block = document.getClosestBlock(p.path)\n  const isInBlock = block.hasNode(next.key)\n  const isNextInVoid = document.hasVoidParent(next.key, editor)\n  editor[`move${Point}ToStartOfNode`](next)\n\n  // when is this called?\n  if (!hasVoidParent && !isNextInVoid && isInBlock) {\n    const range = editor.value.selection[`move${Point}Forward`](n)\n    editor.select(range)\n  }\n}\n\nfunction pointWordBackward(editor, pointName) {\n  const { value } = editor\n  const { document, selection } = value\n  const point = selection[pointName]\n  const block = document.getClosestBlock(point.key)\n  const offset = block.getOffset(point.key)\n  const o = offset + point.offset\n  const { text } = block\n  const n = TextUtils.getWordOffsetBackward(text, o)\n  editor.command(pointBackward, pointName, n > 0 ? n : 1)\n}\n\nfunction pointWordForward(editor, pointName) {\n  const { value } = editor\n  const { document, selection } = value\n  const point = selection[pointName]\n  const block = document.getClosestBlock(point.key)\n  const offset = block.getOffset(point.key)\n  const o = offset + point.offset\n  const { text } = block\n  const n = TextUtils.getWordOffsetForward(text, o)\n  editor.command(pointForward, pointName, n > 0 ? n : 1)\n}\n\nexport default Commands\n","import Value from '../models/value'\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Set `properties` on the value.\n *\n * @param {Editor} editor\n * @param {Object|Value} properties\n */\n\nCommands.setData = (editor, data = {}) => {\n  const properties = Value.createProperties({ data })\n  const { value } = editor\n\n  editor.applyOperation({\n    type: 'set_value',\n    properties,\n    value,\n  })\n}\n\n/**\n * Set `properties` on the value.\n *\n * @param {Editor} editor\n * @param {Object|Value} properties\n */\n\nCommands.setDecorations = (editor, decorations = []) => {\n  const properties = Value.createProperties({ decorations })\n  const { value } = editor\n\n  editor.applyOperation({\n    type: 'set_value',\n    properties,\n    value,\n  })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","/**\n * A plugin that adds a set of queries to the editor.\n *\n * @param {Object} queries\n * @return {Object}\n */\n\nfunction QueriesPlugin(queries = {}) {\n  /**\n   * On construct, register all the queries.\n   *\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onConstruct(editor, next) {\n    for (const query in queries) {\n      editor.registerQuery(query)\n    }\n\n    return next()\n  }\n\n  /**\n   * On query, if it exists in our list of queries, call it.\n   *\n   * @param {Object} query\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onQuery(query, editor, next) {\n    const { type, args } = query\n    const fn = queries[type]\n    if (!fn) return next()\n    const ret = fn(editor, ...args)\n    return ret === undefined ? next() : ret\n  }\n\n  /**\n   * Return the plugin.\n   *\n   * @type {Object}\n   */\n\n  return {\n    onConstruct,\n    onQuery,\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default QueriesPlugin\n","/**\n * Define a Slate error.\n *\n * @type {SlateError}\n */\n\nclass SlateError extends Error {\n  constructor(code, attrs = {}) {\n    super(code)\n    this.code = code\n\n    for (const key in attrs) {\n      this[key] = attrs[key]\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {SlateError}\n */\n\nexport default SlateError\n","import SlateError from '../utils/slate-error'\nimport Queries from './queries'\n\n/**\n * Create a plugin from a `schema` definition.\n *\n * @param {Object} schema\n * @return {Object}\n */\n\nfunction SchemaPlugin(schema) {\n  const { rules, document, blocks, inlines, marks } = schema\n  let schemaRules = []\n\n  if (rules) {\n    schemaRules = schemaRules.concat(rules)\n  }\n\n  if (document) {\n    schemaRules.push({\n      match: [{ object: 'document' }],\n      ...document,\n    })\n  }\n\n  if (blocks) {\n    for (const key in blocks) {\n      schemaRules.push({\n        match: [{ object: 'block', type: key }],\n        ...blocks[key],\n      })\n    }\n  }\n\n  if (inlines) {\n    for (const key in inlines) {\n      schemaRules.push({\n        match: [{ object: 'inline', type: key }],\n        ...inlines[key],\n      })\n    }\n  }\n\n  if (marks) {\n    for (const key in marks) {\n      schemaRules.push({\n        match: [{ object: 'mark', type: key }],\n        ...marks[key],\n      })\n    }\n  }\n\n  /**\n   * Check if a `mark` is void based on the schema rules.\n   *\n   * @param {Editor} editor\n   * @param {Mark} mark\n   * @return {Boolean}\n   */\n\n  function isAtomic(editor, mark) {\n    const rule = schemaRules.find(\n      r => 'isAtomic' in r && testRules(mark, r.match)\n    )\n\n    return rule && rule.isAtomic\n  }\n\n  /**\n   * Check if a `node` is void based on the schema rules.\n   *\n   * @param {Editor} editor\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  function isVoid(editor, node) {\n    const rule = schemaRules.find(\n      r => 'isVoid' in r && testRules(node, r.match)\n    )\n\n    return rule && rule.isVoid\n  }\n\n  /**\n   * Normalize a `node` with the schema rules, returning a function that will\n   * fix the invalid node, or void if the node is valid.\n   *\n   * @param {Node} node\n   * @param {Editor} editor\n   * @param {Function} next\n   * @return {Function|Void}\n   */\n\n  function normalizeNode(node, editor, next) {\n    const error = validateNode(node, editor, () => {})\n    if (!error) return next()\n\n    return () => {\n      const { rule } = error\n      const { size } = editor.operations\n\n      // First run the user-provided `normalize` function if one exists...\n      if (rule.normalize) {\n        rule.normalize(editor, error)\n      }\n\n      // If the `normalize` function did not add any operations to the editor\n      // object, it can't have normalized, so run the default one.\n      if (editor.operations.size === size) {\n        defaultNormalize(editor, error)\n      }\n    }\n  }\n\n  /**\n   * Validate a `node` with the schema rules, returning a `SlateError` if it's\n   * invalid.\n   *\n   * @param {Node} node\n   * @param {Editor} editor\n   * @param {Function} next\n   * @return {Error|Void}\n   */\n\n  function validateNode(node, editor, next) {\n    const matches = schemaRules.filter(r => testRules(node, r.match))\n    const failure = validateRules(node, matches, schemaRules, { every: true })\n    if (!failure) return next()\n    const error = new SlateError(failure.code, failure)\n    return error\n  }\n\n  /**\n   * On schema-related queries, respond if we can.\n   *\n   * @param {Object} query\n   * @param {Function} next\n   */\n\n  const queries = Queries({ isAtomic, isVoid })\n\n  /**\n   * Return the plugins.\n   *\n   * @type {Object}\n   */\n\n  return [{ normalizeNode, validateNode }, queries]\n}\n\n/**\n * Normalize an invalid value with `error` with default remedies.\n *\n * @param {Editor} editor\n * @param {SlateError} error\n */\n\nfunction defaultNormalize(editor, error) {\n  const { code, node, child, next, previous, key, mark } = error\n\n  switch (code) {\n    case 'child_max_invalid':\n    case 'child_object_invalid':\n    case 'child_type_invalid':\n    case 'child_unknown':\n    case 'first_child_object_invalid':\n    case 'first_child_type_invalid':\n    case 'last_child_object_invalid':\n    case 'last_child_type_invalid': {\n      return child.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? editor.removeNodeByKey(node.key)\n        : editor.removeNodeByKey(child.key)\n    }\n\n    case 'previous_sibling_object_invalid':\n    case 'previous_sibling_type_invalid': {\n      return previous.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? editor.removeNodeByKey(node.key)\n        : editor.removeNodeByKey(previous.key)\n    }\n\n    case 'next_sibling_object_invalid':\n    case 'next_sibling_type_invalid': {\n      return next.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? editor.removeNodeByKey(node.key)\n        : editor.removeNodeByKey(next.key)\n    }\n\n    case 'child_min_invalid':\n    case 'node_text_invalid':\n    case 'parent_object_invalid':\n    case 'parent_type_invalid': {\n      return node.object === 'document'\n        ? node.nodes.forEach(n => editor.removeNodeByKey(n.key))\n        : editor.removeNodeByKey(node.key)\n    }\n\n    case 'node_data_invalid': {\n      return node.data.get(key) === undefined && node.object !== 'document'\n        ? editor.removeNodeByKey(node.key)\n        : editor.setNodeByKey(node.key, { data: node.data.delete(key) })\n    }\n\n    case 'node_mark_invalid': {\n      return node\n        .getTexts()\n        .forEach(t => editor.removeMarkByKey(t.key, 0, t.text.length, mark))\n    }\n\n    default: {\n      return editor.removeNodeByKey(node.key)\n    }\n  }\n}\n\n/**\n * Check that an `object` matches one of a set of `rules`.\n *\n * @param {Mixed} object\n * @param {Object|Array} rules\n * @return {Boolean}\n */\n\nfunction testRules(object, rules) {\n  const error = validateRules(object, rules)\n  return !error\n}\n\n/**\n * Validate that a `object` matches a `rule` object or array.\n *\n * @param {Mixed} object\n * @param {Object|Array} rule\n * @param {Array|Void} rules\n * @return {Error|Void}\n */\n\nfunction validateRules(object, rule, rules, options = {}) {\n  const { every = false } = options\n\n  if (Array.isArray(rule)) {\n    const array = rule.length ? rule : [{}]\n    let first\n\n    for (const r of array) {\n      const error = validateRules(object, r, rules)\n      first = first || error\n      if (every && error) return error\n      if (!every && !error) return\n    }\n\n    return first\n  }\n\n  const error =\n    validateObject(object, rule) ||\n    validateType(object, rule) ||\n    validateData(object, rule) ||\n    validateMarks(object, rule) ||\n    validateText(object, rule) ||\n    validateFirst(object, rule) ||\n    validateLast(object, rule) ||\n    validateNodes(object, rule, rules)\n\n  return error\n}\n\nfunction validateObject(node, rule) {\n  if (rule.object == null) return\n  if (rule.object === node.object) return\n  if (typeof rule.object === 'function' && rule.object(node.object)) return\n  return fail('node_object_invalid', { rule, node })\n}\n\nfunction validateType(node, rule) {\n  if (rule.type == null) return\n  if (rule.type === node.type) return\n  if (typeof rule.type === 'function' && rule.type(node.type)) return\n  return fail('node_type_invalid', { rule, node })\n}\n\nfunction validateData(node, rule) {\n  if (rule.data == null) return\n  if (node.data == null) return\n\n  if (typeof rule.data === 'function') {\n    if (rule.data(node.data)) return\n    return fail('node_data_invalid', { rule, node })\n  }\n\n  for (const key in rule.data) {\n    const fn = rule.data[key]\n    const value = node.data && node.data.get(key)\n    const valid = typeof fn === 'function' ? fn(value) : fn === value\n    if (valid) continue\n    return fail('node_data_invalid', { rule, node, key, value })\n  }\n}\n\nfunction validateMarks(node, rule) {\n  if (rule.marks == null) return\n  const marks = node.getMarks().toArray()\n\n  for (const mark of marks) {\n    const valid = rule.marks.some(\n      def =>\n        typeof def.type === 'function'\n          ? def.type(mark.type)\n          : def.type === mark.type\n    )\n    if (valid) continue\n    return fail('node_mark_invalid', { rule, node, mark })\n  }\n}\n\nfunction validateText(node, rule) {\n  if (rule.text == null) return\n  const { text } = node\n  const valid =\n    typeof rule.text === 'function' ? rule.text(text) : rule.text.test(text)\n  if (valid) return\n  return fail('node_text_invalid', { rule, node, text })\n}\n\nfunction validateFirst(node, rule) {\n  if (rule.first == null) return\n  const first = node.nodes.first()\n  if (!first) return\n  const error = validateRules(first, rule.first)\n  if (!error) return\n  error.rule = rule\n  error.node = node\n  error.child = first\n  error.code = error.code.replace('node_', 'first_child_')\n  return error\n}\n\nfunction validateLast(node, rule) {\n  if (rule.last == null) return\n  const last = node.nodes.last()\n  if (!last) return\n  const error = validateRules(last, rule.last)\n  if (!error) return\n  error.rule = rule\n  error.node = node\n  error.child = last\n  error.code = error.code.replace('node_', 'last_child_')\n  return error\n}\n\nfunction validateNodes(node, rule, rules = []) {\n  if (node.nodes == null) return\n\n  const children = node.nodes\n  const defs = rule.nodes != null ? rule.nodes.slice() : []\n  let count = 0\n  let lastCount = 0\n  let min = null\n  let index = -1\n  let def = null\n  let max = null\n  let child = null\n  let previous = null\n  let next = null\n\n  function nextDef() {\n    if (defs.length === 0) return false\n    def = defs.shift()\n    lastCount = count\n    count = 0\n    min = def.min || null\n    max = def.max || null\n    return true\n  }\n\n  function nextChild() {\n    index += 1\n    previous = index ? children.get(index - 1) : null\n    child = children.get(index)\n    next = children.get(index + 1)\n    if (!child) return false\n    lastCount = count\n    count += 1\n    return true\n  }\n\n  function rewind() {\n    if (index > 0) {\n      index -= 1\n      count = lastCount\n    }\n  }\n\n  if (rule.nodes != null) {\n    nextDef()\n  }\n\n  while (nextChild()) {\n    const err =\n      validateParent(node, child, rules) ||\n      validatePrevious(node, child, previous, index, rules) ||\n      validateNext(node, child, next, index, rules)\n\n    if (err) return err\n\n    if (rule.nodes != null) {\n      if (!def) {\n        return fail('child_unknown', { rule, node, child, index })\n      }\n\n      if (def.match) {\n        const error = validateRules(child, def.match)\n\n        if (error) {\n          // Since we want to report overflow on last matching child we don't\n          // immediately check for count > max, but instead do so once we find\n          // a child that doesn't match.\n          if (max != null && count - 1 > max) {\n            rewind()\n            return fail('child_max_invalid', {\n              rule,\n              node,\n              index,\n              child: children.get(index),\n              count,\n              limit: max,\n            })\n          }\n\n          const lastMin = min\n\n          // If there are more groups after this one then child might actually\n          // be valid.\n          if (nextDef()) {\n            // If we've already satisfied the minimum for the current group,\n            // then we can rewind and proceed to the next group.\n            if (lastCount - 1 >= lastMin) {\n              index -= 1\n              continue\n            }\n\n            // Otherwise we know that current value is underflowing. There are\n            // three possible causes for this...\n\n            // 1. There might just not be enough elements for current group, and\n            // current child is in fact the first of the next group. If so, the\n            // next def will not report errors, in which case we can rewind and\n            // report an minimum error.\n            if (validateRules(child, def.match) == null) {\n              rewind()\n              return fail('child_min_invalid', {\n                rule,\n                node,\n                index,\n                count: lastCount - 1,\n                limit: lastMin,\n              })\n            }\n\n            // 2. The current group is underflowing, but there is also an\n            // invalid child before the next group.\n            // 3. Or the current group is not underflowing but it appears so\n            // because there's an invalid child between its members.\n            // It's either the second or third case. If it's the second then\n            // we could report an underflow, but presence of an invalid child\n            // is arguably more important, so we report it first. It also lets\n            // us avoid checking for which case exactly is it.\n            error.rule = rule\n            error.node = node\n            error.child = child\n            error.index = index\n            error.code = error.code.replace('node_', 'child_')\n            return error\n          }\n\n          // Otherwise either we exhausted the last group, in which case it's\n          // an unknown child, ...\n          if (max != null && count > max) {\n            return fail('child_unknown', { rule, node, child, index })\n          }\n\n          // ... or it's an invalid child for the last group.\n          error.rule = rule\n          error.node = node\n          error.child = child\n          error.index = index\n          error.code = error.code.replace('node_', 'child_')\n          return error\n        }\n      }\n    }\n  }\n\n  // Since we want to report overflow on last matching child we don't\n  // immediately check for count > max, but do so after processing all nodes.\n  if (max != null && count > max) {\n    return fail('child_max_invalid', {\n      rule,\n      node,\n      index: index - 1,\n      count,\n      child: children.get(index - 1),\n      limit: max,\n    })\n  }\n\n  if (rule.nodes != null) {\n    do {\n      if (count < min) {\n        return fail('child_min_invalid', {\n          rule,\n          node,\n          index,\n          count,\n          limit: min,\n        })\n      }\n    } while (nextDef())\n  }\n}\n\nfunction validateParent(node, child, rules) {\n  for (const rule of rules) {\n    if (rule.parent == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(node, rule.parent)\n    if (!error) continue\n\n    error.rule = rule\n    error.parent = node\n    error.node = child\n    error.code = error.code.replace('node_', 'parent_')\n    return error\n  }\n}\n\nfunction validatePrevious(node, child, previous, index, rules) {\n  if (!previous) return\n\n  for (const rule of rules) {\n    if (rule.previous == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(previous, rule.previous)\n    if (!error) continue\n\n    error.rule = rule\n    error.node = node\n    error.child = child\n    error.index = index\n    error.previous = previous\n    error.code = error.code.replace('node_', 'previous_sibling_')\n    return error\n  }\n}\n\nfunction validateNext(node, child, next, index, rules) {\n  if (!next) return\n\n  for (const rule of rules) {\n    if (rule.next == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(next, rule.next)\n    if (!error) continue\n\n    error.rule = rule\n    error.node = node\n    error.child = child\n    error.index = index\n    error.next = next\n    error.code = error.code.replace('node_', 'next_sibling_')\n    return error\n  }\n}\n\n/**\n * Create an interim failure object with `code` and `attrs`.\n *\n * @param {String} code\n * @param {Object} attrs\n * @return {Object}\n */\n\nfunction fail(code, attrs) {\n  return { code, ...attrs }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default SchemaPlugin\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\n\n/**\n * Ensure that an expanded selection is deleted first using the `editor.delete`\n * command. This guarantees that it uses the proper semantic \"intent\" instead of\n * using `deleteAtRange` under the covers and skipping `delete`.\n *\n * @param {Editor}\n */\n\nfunction deleteExpanded(editor) {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  }\n}\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Add a `mark` to the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\nCommands.addMark = (editor, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    editor.addMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.add(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).add(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  }\n}\n\n/**\n * Add a list of `marks` to the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Set<Mark>|Array<Object>} marks\n */\n\nCommands.addMarks = (editor, marks) => {\n  marks.forEach(mark => editor.addMark(mark))\n}\n\n/**\n * Delete at the current selection.\n *\n * @param {Editor} editor\n */\n\nCommands.delete = editor => {\n  const { value } = editor\n  const { selection } = value\n  editor.deleteAtRange(selection)\n\n  // COMPAT: Ensure that the selection is collapsed, because in certain cases\n  // when deleting across inline nodes, when splitting the inline node the end\n  // point of the selection will end up after the split point.\n  editor.moveToFocus()\n}\n\n/**\n * Delete backward `n` characters.\n *\n * @param {Editor} editor\n * @param {Number} n (optional)\n */\n\nCommands.deleteBackward = (editor, n = 1) => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteBackwardAtRange(selection, n)\n  }\n}\n\n/**\n * Delete backward one character.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteCharBackward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteCharBackwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one line.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteLineBackward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteLineBackwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one word.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteWordBackward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteWordBackwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward `n` characters.\n *\n * @param {Editor} editor\n * @param {Number} n (optional)\n */\n\nCommands.deleteForward = (editor, n = 1) => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteForwardAtRange(selection, n)\n  }\n}\n\n/**\n * Delete backward one character.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteCharForward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteCharForwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one line.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteLineForward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteLineForwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one word.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteWordForward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteWordForwardAtRange(selection)\n  }\n}\n\n/**\n * Insert a `block` at the current selection.\n *\n * @param {Editor} editor\n * @param {String|Object|Block} block\n */\n\nCommands.insertBlock = (editor, block) => {\n  deleteExpanded(editor)\n\n  block = Block.create(block)\n  const { value } = editor\n  const { selection } = value\n  editor.insertBlockAtRange(selection, block)\n\n  // If the node was successfully inserted, update the selection.\n  const node = editor.value.document.getNode(block.key)\n  if (node) editor.moveToEndOfNode(node)\n}\n\n/**\n * Insert a `fragment` at the current selection.\n *\n * @param {Editor} editor\n * @param {Document} fragment\n */\n\nCommands.insertFragment = (editor, fragment) => {\n  if (!fragment.nodes.size) return\n\n  deleteExpanded(editor)\n\n  let { value } = editor\n  let { document, selection } = value\n  const { start, end } = selection\n  const { startText, endText, startInline } = value\n  const lastText = fragment.getLastText()\n  const lastInline = fragment.getClosestInline(lastText.key)\n  const lastBlock = fragment.getClosestBlock(lastText.key)\n  const firstChild = fragment.nodes.first()\n  const lastChild = fragment.nodes.last()\n  const keys = document.getTexts().map(text => text.key)\n  const isAppending =\n    !startInline ||\n    (start.isAtStartOfNode(startText) || end.isAtStartOfNode(startText)) ||\n    (start.isAtEndOfNode(endText) || end.isAtEndOfNode(endText))\n\n  const isInserting =\n    firstChild.hasBlockChildren() || lastChild.hasBlockChildren()\n\n  editor.insertFragmentAtRange(selection, fragment)\n  value = editor.value\n  document = value.document\n\n  const newTexts = document.getTexts().filter(n => !keys.includes(n.key))\n  const newText = isAppending ? newTexts.last() : newTexts.takeLast(2).first()\n\n  if (newText && (lastInline || isInserting)) {\n    editor.moveToEndOfNode(newText)\n  } else if (newText) {\n    editor.moveToStartOfNode(newText).moveForward(lastBlock.text.length)\n  }\n}\n\n/**\n * Insert an `inline` at the current selection.\n *\n * @param {Editor} editor\n * @param {String|Object|Inline} inline\n */\n\nCommands.insertInline = (editor, inline) => {\n  deleteExpanded(editor)\n\n  inline = Inline.create(inline)\n  const { value } = editor\n  const { selection } = value\n  editor.insertInlineAtRange(selection, inline)\n\n  // If the node was successfully inserted, update the selection.\n  const node = editor.value.document.getNode(inline.key)\n  if (node) editor.moveToEndOfNode(node)\n}\n\n/**\n * Insert a string of `text` with optional `marks` at the current selection.\n *\n * @param {Editor} editor\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.insertText = (editor, text, marks) => {\n  deleteExpanded(editor)\n\n  const { value } = editor\n  const { document, selection } = value\n  marks = marks || selection.marks || document.getInsertMarksAtRange(selection)\n  editor.insertTextAtRange(selection, text, marks)\n\n  // If the text was successfully inserted, and the selection had marks on it,\n  // unset the selection's marks.\n  if (selection.marks && document !== editor.value.document) {\n    editor.select({ marks: null })\n  }\n}\n\n/**\n * Remove a `mark` from the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\nCommands.removeMark = (editor, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    editor.removeMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.remove(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).remove(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  }\n}\n\n/**\n * Replace an `oldMark` with a `newMark` in the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} oldMark\n * @param {Mark} newMark\n */\n\nCommands.replaceMark = (editor, oldMark, newMark) => {\n  editor.removeMark(oldMark)\n  editor.addMark(newMark)\n}\n\n/**\n * Set the `properties` of block nodes.\n *\n * @param {Editor} editor\n * @param {Object|String} properties\n */\n\nCommands.setBlocks = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.setBlocksAtRange(selection, properties)\n}\n\n/**\n * Set the `properties` of inline nodes.\n *\n * @param {Editor} editor\n * @param {Object|String} properties\n */\n\nCommands.setInlines = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.setInlinesAtRange(selection, properties)\n}\n\n/**\n * Split the block node at the current selection, to optional `depth`.\n *\n * @param {Editor} editor\n * @param {Number} depth (optional)\n */\n\nCommands.splitBlock = (editor, depth = 1) => {\n  deleteExpanded(editor)\n\n  const { value } = editor\n  const { selection, document } = value\n  const marks = selection.marks || document.getInsertMarksAtRange(selection)\n  editor.splitBlockAtRange(selection, depth).moveToEnd()\n\n  if (marks && marks.size !== 0) {\n    editor.select({ marks })\n  }\n}\n\n/**\n * Split the inline nodes to optional `height`.\n *\n * @param {Editor} editor\n * @param {Number} height (optional)\n */\n\nCommands.splitInline = (editor, height) => {\n  deleteExpanded(editor)\n  const { value } = editor\n  const { selection } = value\n  editor.splitInlineAtRange(selection, height)\n}\n\n/**\n * Add or remove a `mark` from the characters in the current selection,\n * depending on whether it's already there.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\nCommands.toggleMark = (editor, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const exists = value.activeMarks.has(mark)\n\n  if (exists) {\n    editor.removeMark(mark)\n  } else {\n    editor.addMark(mark)\n  }\n}\n\n/**\n * Unwrap nodes from a block with `properties`.\n *\n * @param {Editor} editor\n * @param {String|Object} properties\n */\n\nCommands.unwrapBlock = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.unwrapBlockAtRange(selection, properties)\n}\n\n/**\n * Unwrap nodes from an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {String|Object} properties\n */\n\nCommands.unwrapInline = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.unwrapInlineAtRange(selection, properties)\n}\n\n/**\n * Wrap nodes in a new `block`.\n *\n * @param {Editor} editor\n * @param {Block|Object|String} block\n */\n\nCommands.wrapBlock = (editor, block) => {\n  const { value } = editor\n  const { selection } = value\n  editor.wrapBlockAtRange(selection, block)\n}\n\n/**\n * Wrap nodes in a new `inline`.\n *\n * @param {Editor} editor\n * @param {Inline|Object|String} inline\n */\n\nCommands.wrapInline = (editor, inline) => {\n  const { value } = editor\n  const { selection } = value\n  editor.wrapInlineAtRange(selection, inline)\n}\n\n/**\n * Wrap the current selection with prefix/suffix.\n *\n * @param {Editor} editor\n * @param {String} prefix\n * @param {String} suffix\n */\n\nCommands.wrapText = (editor, prefix, suffix = prefix) => {\n  const { value } = editor\n  const { selection } = value\n  editor.wrapTextAtRange(selection, prefix, suffix)\n\n  // If the selection was collapsed, it will have moved the start offset too.\n  if (selection.isCollapsed) {\n    editor.moveStartBackward(prefix.length)\n  }\n\n  // Adding the suffix will have pushed the end of the selection further on, so\n  // we need to move it back to account for this.\n  editor.moveEndBackward(suffix.length)\n\n  // There's a chance that the selection points moved \"through\" each other,\n  // resulting in a now-incorrect selection direction.\n  if (selection.isForward !== editor.value.selection.isForward) {\n    editor.flip()\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import AtRange from '../commands/at-range'\nimport ByPath from '../commands/by-path'\nimport Commands from './commands'\nimport OnHistory from '../commands/on-history'\nimport OnSelection from '../commands/on-selection'\nimport OnValue from '../commands/on-value'\nimport Queries from './queries'\nimport Schema from './schema'\nimport Text from '../models/text'\nimport WithIntent from '../commands/with-intent'\n\n/**\n * A plugin that defines the core Slate logic.\n *\n * @param {Object} options\n * @return {Object}\n */\n\nfunction CorePlugin(options = {}) {\n  const { plugins = [] } = options\n\n  /**\n   * The core Slate commands.\n   *\n   * @type {Object}\n   */\n\n  const commands = Commands({\n    ...AtRange,\n    ...ByPath,\n    ...OnHistory,\n    ...OnSelection,\n    ...OnValue,\n    ...WithIntent,\n  })\n\n  /**\n   * The core Slate queries.\n   *\n   * @type {Object}\n   */\n\n  const queries = Queries({\n    isAtomic: () => false,\n    isVoid: () => false,\n  })\n\n  /**\n   * The core Slate schema.\n   *\n   * @type {Object}\n   */\n\n  const schema = Schema({\n    rules: [\n      // Only allow block nodes in documents.\n      {\n        match: { object: 'document' },\n        nodes: [\n          {\n            match: { object: 'block' },\n          },\n        ],\n      },\n\n      // Only allow block nodes or inline and text nodes in blocks.\n      {\n        match: {\n          object: 'block',\n          first: { object: 'block' },\n        },\n        nodes: [\n          {\n            match: { object: 'block' },\n          },\n        ],\n      },\n      {\n        match: {\n          object: 'block',\n          first: [{ object: 'inline' }, { object: 'text' }],\n        },\n        nodes: [\n          {\n            match: [{ object: 'inline' }, { object: 'text' }],\n          },\n        ],\n      },\n\n      // Only allow inline and text nodes in inlines.\n      {\n        match: { object: 'inline' },\n        nodes: [{ match: [{ object: 'inline' }, { object: 'text' }] }],\n      },\n\n      // Ensure that block and inline nodes have at least one text child.\n      {\n        match: [{ object: 'block' }, { object: 'inline' }],\n        nodes: [{ min: 1 }],\n        normalize: (editor, error) => {\n          const { code, node } = error\n\n          if (code === 'child_min_invalid' && node.nodes.isEmpty()) {\n            editor.insertNodeByKey(node.key, 0, Text.create())\n          }\n        },\n      },\n\n      // Ensure that inline nodes are surrounded by text nodes.\n      {\n        match: { object: 'block' },\n        first: [{ object: 'block' }, { object: 'text' }],\n        last: [{ object: 'block' }, { object: 'text' }],\n        normalize: (editor, error) => {\n          const { code, node } = error\n          const text = Text.create()\n          let i\n\n          if (code === 'first_child_object_invalid') {\n            i = 0\n          } else if (code === 'last_child_object_invalid') {\n            i = node.nodes.size\n          } else {\n            return\n          }\n\n          editor.insertNodeByKey(node.key, i, text)\n        },\n      },\n      {\n        match: { object: 'inline' },\n        first: [{ object: 'block' }, { object: 'text' }],\n        last: [{ object: 'block' }, { object: 'text' }],\n        previous: [{ object: 'block' }, { object: 'text' }],\n        next: [{ object: 'block' }, { object: 'text' }],\n        normalize: (editor, error) => {\n          const { code, node, index } = error\n          const text = Text.create()\n          let i\n\n          if (code === 'first_child_object_invalid') {\n            i = 0\n          } else if (code === 'last_child_object_invalid') {\n            i = node.nodes.size\n          } else if (code === 'previous_sibling_object_invalid') {\n            i = index\n          } else if (code === 'next_sibling_object_invalid') {\n            i = index + 1\n          } else {\n            return\n          }\n\n          editor.insertNodeByKey(node.key, i, text)\n        },\n      },\n\n      // Merge adjacent text nodes.\n      {\n        match: { object: 'text' },\n        next: [{ object: 'block' }, { object: 'inline' }],\n        normalize: (editor, error) => {\n          const { code, next } = error\n\n          if (code === 'next_sibling_object_invalid') {\n            editor.mergeNodeByKey(next.key)\n          }\n        },\n      },\n    ],\n  })\n\n  /**\n   * Return the plugins.\n   *\n   * @type {Array}\n   */\n\n  return [schema, ...plugins, commands, queries]\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default CorePlugin\n","import Debug from 'debug'\nimport invariant from 'tiny-invariant'\nimport isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { List } from 'immutable'\n\nimport CommandsPlugin from '../plugins/commands'\nimport CorePlugin from '../plugins/core'\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\nimport QueriesPlugin from '../plugins/queries'\nimport SchemaPlugin from '../plugins/schema'\nimport Value from '../models/value'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:editor')\n\n/**\n * Editor.\n *\n * @type {Editor}\n */\n\nclass Editor {\n  /**\n   * Create a new `Editor` with `attrs`.\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n\n  constructor(attrs = {}, options = {}) {\n    const { controller = this, construct = true } = options\n    const {\n      onChange = () => {},\n      plugins = [],\n      readOnly = false,\n      value = Value.create(),\n    } = attrs\n\n    this.controller = controller\n    this.middleware = {}\n    this.onChange = onChange\n    this.operations = List()\n    this.readOnly = null\n    this.value = null\n\n    this.tmp = {\n      dirty: [],\n      flushing: false,\n      merge: null,\n      normalize: true,\n      save: true,\n    }\n\n    const core = CorePlugin({ plugins })\n    registerPlugin(this, core)\n\n    if (construct) {\n      this.run('onConstruct')\n      this.setReadOnly(readOnly)\n      this.setValue(value, options)\n    }\n  }\n\n  /**\n   * Apply an `operation` to the editor, updating its value.\n   *\n   * @param {Operation|Object} operation\n   * @return {Editor}\n   */\n\n  applyOperation(operation) {\n    const { operations, controller } = this\n    let value = this.value\n\n    // Add in the current `value` in case the operation was serialized.\n    if (isPlainObject(operation)) {\n      operation = { ...operation, value }\n    }\n\n    operation = Operation.create(operation)\n\n    // Save the operation into the history. Since `save` is a command, we need\n    // to do it without normalizing, since it would have side effects.\n    this.withoutNormalizing(() => {\n      controller.save(operation)\n      value = this.value\n    })\n\n    // Apply the operation to the value.\n    debug('apply', { operation })\n    this.value = operation.apply(value)\n    this.operations = operations.push(operation)\n\n    // Get the paths of the affected nodes, and mark them as dirty.\n    const newDirtyPaths = getDirtyPaths(operation)\n    const dirty = this.tmp.dirty.reduce((memo, path) => {\n      path = PathUtils.create(path)\n      const transformed = PathUtils.transform(path, operation)\n      memo = memo.concat(transformed.toArray())\n      return memo\n    }, newDirtyPaths)\n\n    this.tmp.dirty = dirty\n\n    // If we're not already, queue the flushing process on the next tick.\n    if (!this.tmp.flushing) {\n      this.tmp.flushing = true\n      Promise.resolve().then(() => this.flush())\n    }\n\n    return controller\n  }\n\n  /**\n   * Flush the editor's current change.\n   *\n   * @return {Editor}\n   */\n\n  flush() {\n    this.run('onChange')\n    const { value, operations, controller } = this\n    const change = { value, operations }\n    this.operations = List()\n    this.tmp.flushing = false\n    this.onChange(change)\n    return controller\n  }\n\n  /**\n   * Trigger a command by `type` with `...args`.\n   *\n   * @param {String|Function} type\n   * @param {Any} ...args\n   * @return {Editor}\n   */\n\n  command(type, ...args) {\n    const { controller } = this\n\n    if (typeof type === 'function') {\n      type(controller, ...args)\n      normalizeDirtyPaths(this)\n      return controller\n    }\n\n    debug('command', { type, args })\n    const obj = { type, args }\n    this.run('onCommand', obj)\n    normalizeDirtyPaths(this)\n    return controller\n  }\n\n  /**\n   * Checks if a command by `type` has been registered.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   */\n\n  hasCommand(type) {\n    const { controller } = this\n    const has = type in controller && controller[type].__command\n\n    return has\n  }\n\n  /**\n   * Checks if a query by `type` has been registered.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   */\n\n  hasQuery(type) {\n    const { controller } = this\n    const has = type in controller && controller[type].__query\n\n    return has\n  }\n\n  /**\n   * Normalize all of the nodes in the document from scratch.\n   *\n   * @return {Editor}\n   */\n\n  normalize() {\n    const { value, controller } = this\n    let { document } = value\n    const table = document.getKeysToPathsTable()\n    const paths = Object.values(table).map(PathUtils.create)\n    this.tmp.dirty = this.tmp.dirty.concat(paths)\n    normalizeDirtyPaths(this)\n\n    const { selection } = value\n    document = value.document\n\n    if (selection.isUnset && document.nodes.size) {\n      controller.moveToStartOfDocument()\n    }\n\n    return controller\n  }\n\n  /**\n   * Ask a query by `type` with `...args`.\n   *\n   * @param {String|Function} type\n   * @param {Any} ...args\n   * @return {Any}\n   */\n\n  query(type, ...args) {\n    const { controller } = this\n\n    if (typeof type === 'function') {\n      return type(controller, ...args)\n    }\n\n    debug('query', { type, args })\n    const obj = { type, args }\n    return this.run('onQuery', obj)\n  }\n\n  /**\n   * Register a command `type` with the editor.\n   *\n   * @param {String} type\n   * @return {Editor}\n   */\n\n  registerCommand(type) {\n    const { controller } = this\n\n    if (type in controller && controller[type].__command) {\n      return controller\n    }\n\n    invariant(\n      !(type in controller),\n      `You cannot register a \\`${type}\\` command because it would overwrite an existing property of the \\`Editor\\`.`\n    )\n\n    const method = (...args) => this.command(type, ...args)\n    controller[type] = method\n    method.__command = true\n    return controller\n  }\n\n  /**\n   * Register a query `type` with the editor.\n   *\n   * @param {String} type\n   * @return {Editor}\n   */\n\n  registerQuery(type) {\n    const { controller } = this\n\n    if (type in controller && controller[type].__query) {\n      return controller\n    }\n\n    invariant(\n      !(type in controller),\n      `You cannot register a \\`${type}\\` query because it would overwrite an existing property of the \\`Editor\\`.`\n    )\n\n    const method = (...args) => this.query(type, ...args)\n    controller[type] = method\n    method.__query = true\n    return controller\n  }\n\n  /**\n   * Run through the middleware stack by `key` with `args`.\n   *\n   * @param {String} key\n   * @param {Any} ...args\n   * @return {Any}\n   */\n\n  run(key, ...args) {\n    const { controller, middleware } = this\n    const fns = middleware[key] || []\n    let i = 0\n\n    function next(...overrides) {\n      const fn = fns[i++]\n      if (!fn) return\n\n      if (overrides.length) {\n        args = overrides\n      }\n\n      const ret = fn(...args, controller, next)\n      return ret\n    }\n\n    Object.defineProperty(next, 'change', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'onChange', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'props', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'schema', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'stack', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    return next()\n  }\n\n  /**\n   * Set the `readOnly` flag.\n   *\n   * @param {Boolean} readOnly\n   * @return {Editor}\n   */\n\n  setReadOnly(readOnly) {\n    this.readOnly = readOnly\n    return this\n  }\n\n  /**\n   * Set the editor's `value`.\n   *\n   * @param {Value} value\n   * @param {Options} options\n   * @return {Editor}\n   */\n\n  setValue(value, options = {}) {\n    const { normalize = value !== this.value } = options\n    this.value = value\n\n    if (normalize) {\n      this.normalize()\n    }\n\n    return this\n  }\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, deferring\n   * normalization until after the function has finished executing.\n   *\n   * @param {Function} fn\n   * @return {Editor}\n   */\n\n  withoutNormalizing(fn) {\n    const { controller } = this\n    const value = this.tmp.normalize\n    this.tmp.normalize = false\n    fn(controller)\n    this.tmp.normalize = value\n    normalizeDirtyPaths(this)\n    return controller\n  }\n\n  /**\n   * Deprecated.\n   */\n\n  get editor() {\n    warning(\n      false,\n      \"As of Slate 0.43 the `change` object has been replaced with `editor`, so you don't need to access `change.editor`.\"\n    )\n\n    return this.controller\n  }\n\n  change(fn, ...args) {\n    warning(\n      false,\n      'As of Slate 0.43 the `change` object has been replaced with `editor`, so the `editor.change()` method is deprecated.`'\n    )\n\n    fn(this.controller, ...args)\n  }\n\n  call(fn, ...args) {\n    warning(\n      false,\n      'As of Slate 0.43 the `editor.call(fn)` method has been deprecated, please use `editor.command(fn)` instead.'\n    )\n\n    fn(this.controller, ...args)\n    return this.controller\n  }\n\n  applyOperations(operations) {\n    warning(\n      false,\n      'As of Slate 0.43 the `applyOperations` method is deprecated, please apply each operation in a loop instead.'\n    )\n\n    operations.forEach(op => this.applyOperation(op))\n    return this.controller\n  }\n\n  setOperationFlag(key, value) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.setOperationFlag` method has been deprecated.'\n    )\n\n    this.tmp[key] = value\n    return this\n  }\n\n  getFlag(key, options = {}) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.getFlag` method has been deprecated.'\n    )\n\n    return options[key] !== undefined ? options[key] : this.tmp[key]\n  }\n\n  unsetOperationFlag(key) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.unsetOperationFlag` method has been deprecated.'\n    )\n\n    delete this.tmp[key]\n    return this\n  }\n\n  withoutNormalization(fn) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.withoutNormalization` helper has been renamed to `change.withoutNormalizing`.'\n    )\n\n    return this.withoutNormalizing(fn)\n  }\n}\n\n/**\n * Get the \"dirty\" paths for a given `operation`.\n *\n * @param {Operation} operation\n * @return {Array}\n */\n\nfunction getDirtyPaths(operation) {\n  const { type, node, path, newPath } = operation\n\n  switch (type) {\n    case 'add_mark':\n    case 'insert_text':\n    case 'remove_mark':\n    case 'remove_text':\n    case 'set_mark':\n    case 'set_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      return [...ancestors, path]\n    }\n\n    case 'insert_node': {\n      const table = node.getKeysToPathsTable()\n      const paths = Object.values(table).map(p => path.concat(p))\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      return [...ancestors, path, ...paths]\n    }\n\n    case 'split_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      const nextPath = PathUtils.increment(path)\n      return [...ancestors, path, nextPath]\n    }\n\n    case 'merge_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      const previousPath = PathUtils.decrement(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      if (PathUtils.isEqual(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors = PathUtils.getAncestors(path).reduce((arr, p) => {\n        arr.push(...PathUtils.transform(p, operation).toArray())\n        return arr\n      }, [])\n\n      const newAncestors = PathUtils.getAncestors(newPath).reduce((arr, p) => {\n        arr.push(...PathUtils.transform(p, operation).toArray())\n        return arr\n      }, [])\n\n      return [...oldAncestors, ...newAncestors]\n    }\n\n    case 'remove_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      return [...ancestors]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n\n/**\n * Normalize any new \"dirty\" paths that have been added to the change.\n *\n * @param {Editor}\n */\n\nfunction normalizeDirtyPaths(editor) {\n  if (!editor.tmp.normalize) {\n    return\n  }\n\n  if (!editor.tmp.dirty.length) {\n    return\n  }\n\n  editor.withoutNormalizing(() => {\n    while (editor.tmp.dirty.length) {\n      const path = editor.tmp.dirty.pop()\n      normalizeNodeByPath(editor, path)\n    }\n  })\n}\n\n/**\n * Normalize the node at a specific `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nfunction normalizeNodeByPath(editor, path) {\n  const { controller } = editor\n  let { value } = editor\n  let { document } = value\n  let node = document.assertNode(path)\n  let iterations = 0\n  const max = 100 + (node.object === 'text' ? 1 : node.nodes.size)\n\n  while (node) {\n    const fn = node.normalize(controller)\n\n    if (!fn) {\n      break\n    }\n\n    // Run the normalize `fn` to fix the node.\n    fn(controller)\n\n    // Attempt to re-find the node by path, or by key if it has changed\n    // locations in the tree continue iterating.\n    value = editor.value\n    document = value.document\n    const { key } = node\n    let found = document.getDescendant(path)\n\n    if (found && found.key === key) {\n      node = found\n    } else {\n      found = document.getDescendant(key)\n\n      if (found) {\n        node = found\n        path = document.getPath(key)\n      } else {\n        // If it no longer exists by key, it was removed, so we're done.\n        break\n      }\n    }\n\n    // Increment the iterations counter, and check to make sure that we haven't\n    // exceeded the max. Without this check, it's easy for the `normalize`\n    // function of a schema rule to be written incorrectly and for an infinite\n    // invalid loop to occur.\n    iterations++\n\n    if (iterations > max) {\n      throw new Error(\n        'A schema rule could not be normalized after sufficient iterations. This is usually due to a `rule.normalize` or `plugin.normalizeNode` function of a schema being incorrectly written, causing an infinite loop.'\n      )\n    }\n  }\n}\n\n/**\n * Register a `plugin` with the editor.\n *\n * @param {Editor} editor\n * @param {Object|Array} plugin\n */\n\nfunction registerPlugin(editor, plugin) {\n  if (Array.isArray(plugin)) {\n    plugin.forEach(p => registerPlugin(editor, p))\n    return\n  }\n\n  const { commands, queries, schema, ...rest } = plugin\n\n  if (commands) {\n    const commandsPlugin = CommandsPlugin(commands)\n    registerPlugin(editor, commandsPlugin)\n  }\n\n  if (queries) {\n    const queriesPlugin = QueriesPlugin(queries)\n    registerPlugin(editor, queriesPlugin)\n  }\n\n  if (schema) {\n    const schemaPlugin = SchemaPlugin(schema)\n    registerPlugin(editor, schemaPlugin)\n  }\n\n  for (const key in rest) {\n    const fn = rest[key]\n    const middleware = (editor.middleware[key] = editor.middleware[key] || [])\n    middleware.push(fn)\n  }\n}\n\n/**\n * Export.\n *\n * @type {Editor}\n */\n\nexport default Editor\n","/**\n * Mix in an `Interface` to a `Class`.\n *\n * @param {Class} Interface\n * @param {Class} Class\n */\n\nexport default function mixin(Interface, Classes) {\n  for (const Class of Classes) {\n    // Copy static properties from the interface.\n    for (const name of Object.getOwnPropertyNames(Interface)) {\n      if (Class.hasOwnProperty(name)) continue\n      const desc = Object.getOwnPropertyDescriptor(Interface, name)\n      Object.defineProperty(Class, name, desc)\n    }\n\n    // Copy instance properties from the interface.\n    for (const name of Object.getOwnPropertyNames(Interface.prototype)) {\n      if (Class.prototype.hasOwnProperty(name)) continue\n      const desc = Object.getOwnPropertyDescriptor(Interface.prototype, name)\n      Object.defineProperty(Class.prototype, name, desc)\n    }\n  }\n}\n","import Block from '../models/block'\nimport Change from '../models/change'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Editor from '../controllers/editor'\nimport Inline from '../models/inline'\nimport Leaf from '../models/leaf'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport Operation from '../models/operation'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\nimport Text from '../models/text'\nimport Value from '../models/value'\nimport isObject, { TYPES } from '../utils/is-object'\nimport mixin from '../utils/mixin'\n\n/**\n * A factory for the interface that all Slate objects implement.\n *\n * @type {Function}\n */\n\nfunction create(type) {\n  const TYPE = TYPES[type]\n  const camel = `${type.charAt(0).toUpperCase()}${type.slice(1)}`\n  const is = `is${camel}`\n\n  class ObjectInterface {\n    /**\n     * Return the type of the object.\n     *\n     * @return {String}\n     */\n\n    get object() {\n      return type\n    }\n  }\n\n  ObjectInterface[is] = isObject.bind(null, type)\n  ObjectInterface.prototype[TYPE] = true\n  return ObjectInterface\n}\n\n/**\n * Mix in the object interfaces.\n */\n\nObject.entries({\n  Block,\n  Change,\n  Decoration,\n  Document,\n  Editor,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Point,\n  Range,\n  Selection,\n  Text,\n  Value,\n}).forEach(([camel, obj]) => mixin(create(camel.toLowerCase()), [obj]))\n","import mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport Leaf from '../models/leaf'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport Operation from '../models/operation'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\nimport Text from '../models/text'\nimport Value from '../models/value'\n\n/**\n * The interface that all Slate models implement.\n *\n * @type {Class}\n */\n\nclass ModelInterface {\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS(...args) {\n    return this.fromJSON(...args)\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(...args) {\n    return this.toJSON(...args)\n  }\n}\n\n/**\n * Mix in the common interface.\n *\n * @param {Record}\n */\n\nmixin(ModelInterface, [\n  Block,\n  Decoration,\n  Document,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Point,\n  Range,\n  Selection,\n  Text,\n  Value,\n])\n","import warning from 'tiny-warning'\nimport { List } from 'immutable'\n\nimport mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport KeyUtils from '../utils/key-utils'\nimport memoize from '../utils/memoize'\nimport PathUtils from '../utils/path-utils'\nimport Text from '../models/text'\n\n/**\n * The interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Class}\n */\n\nclass NodeInterface {\n  /**\n   * Get the concatenated text of the node.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Get the first text node of a node, or the node itself.\n   *\n   * @return {Node|Null}\n   */\n\n  getFirstText() {\n    if (this.object === 'text') {\n      return this\n    }\n\n    let descendant = null\n\n    const found = this.nodes.find(node => {\n      if (node.object === 'text') return true\n      descendant = node.getFirstText()\n      return !!descendant\n    })\n\n    return descendant || found\n  }\n\n  /**\n   * Get an object mapping all the keys in the node to their paths.\n   *\n   * @return {Object}\n   */\n\n  getKeysToPathsTable() {\n    const ret = {\n      [this.key]: [],\n    }\n\n    if (this.nodes) {\n      this.nodes.forEach((node, i) => {\n        const nested = node.getKeysToPathsTable()\n\n        for (const key in nested) {\n          const path = nested[key]\n\n          warning(\n            !(key in ret),\n            `A node with a duplicate key of \"${key}\" was found! Duplicate keys are not allowed, you should use \\`node.regenerateKey\\` before inserting if you are reusing an existing node.`\n          )\n\n          ret[key] = [i, ...path]\n        }\n      })\n    }\n\n    return ret\n  }\n\n  /**\n   * Get the last text node of a node, or the node itself.\n   *\n   * @return {Node|Null}\n   */\n\n  getLastText() {\n    if (this.object === 'text') {\n      return this\n    }\n\n    let descendant = null\n\n    const found = this.nodes.findLast(node => {\n      if (node.object === 'text') return true\n      descendant = node.getLastText()\n      return descendant\n    })\n\n    return descendant || found\n  }\n\n  /**\n   * Get a node in the tree, or the node itself.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (this.object === 'text' && path.size) return null\n    const node = path.size ? this.getDescendant(path) : this\n    return node\n  }\n\n  /**\n   * Find the path to a node.\n   *\n   * @param {String|List} key\n   * @return {List}\n   */\n\n  getPath(key) {\n    // Handle the case of passing in a path directly, to match other methods.\n    if (List.isList(key)) return key\n\n    const dict = this.getKeysToPathsTable()\n    const path = dict[key]\n    return path ? List(path) : null\n  }\n\n  /**\n   * Get the concatenated text string of a node.\n   *\n   * @return {String}\n   */\n\n  getText() {\n    const children = this.object === 'text' ? this.leaves : this.nodes\n    const text = children.reduce((memo, c) => memo + c.text, '')\n    return text\n  }\n\n  /**\n   * Check if a node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasNode(path) {\n    const node = this.getNode(path)\n    return !!node\n  }\n\n  /**\n   * Normalize the text node with an `editor`.\n   *\n   * @param {Editor} editor\n   * @return {Function|Void}\n   */\n\n  normalize(editor) {\n    const normalizer = editor.run('normalizeNode', this)\n    return normalizer\n  }\n\n  /**\n   * Regenerate the node's key.\n   *\n   * @return {Node}\n   */\n\n  regenerateKey() {\n    const key = KeyUtils.create()\n    const node = this.set('key', key)\n    return node\n  }\n\n  /**\n   * Resolve a path from a path list or key string.\n   *\n   * An `index` can be provided, in which case paths created from a key string\n   * will have the index pushed onto them. This is helpful in cases where you\n   * want to accept either a `path` or a `key, index` combination for targeting\n   * a location in the tree that doesn't exist yet, like when inserting.\n   *\n   * @param {List|String} value\n   * @param {Number} index\n   * @return {List}\n   */\n\n  resolvePath(path, index) {\n    if (typeof path === 'string') {\n      path = this.getPath(path)\n\n      if (index != null) {\n        path = path.concat(index)\n      }\n    } else {\n      path = PathUtils.create(path)\n    }\n\n    return path\n  }\n\n  /**\n   * Validate the node with an `editor`.\n   *\n   * @param {Editor} editor\n   * @return {Error|Void}\n   */\n\n  validate(editor) {\n    const error = editor.run('validateNode', this)\n    return error\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(NodeInterface.prototype, [\n  'getFirstText',\n  'getKeysToPathsTable',\n  'getLastText',\n  'getText',\n  'normalize',\n  'validate',\n])\n\n/**\n * Mix in the node interface.\n */\n\nmixin(NodeInterface, [Block, Document, Inline, Text])\n","import direction from 'direction'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { List, OrderedSet, Set, Stack } from 'immutable'\n\nimport mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport memoize from '../utils/memoize'\nimport PathUtils from '../utils/path-utils'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\nimport Value from '../models/value'\nimport Operation from '../models/operation'\n\n/**\n * The interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Class}\n */\n\nclass ElementInterface {\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Node}\n   */\n\n  addMark(path, offset, length, mark) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.addMark(offset, length, mark)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Create a decoration with `properties` relative to the node.\n   *\n   * @param {Object|Decoration} properties\n   * @return {Decoration}\n   */\n\n  createDecoration(properties) {\n    properties = Decoration.createProperties(properties)\n    const decoration = this.resolveDecoration(properties)\n    return decoration\n  }\n\n  /**\n   * Create a point with `properties` relative to the node.\n   *\n   * @param {Object|Point} properties\n   * @return {Range}\n   */\n\n  createPoint(properties) {\n    properties = Point.createProperties(properties)\n    const point = this.resolvePoint(properties)\n    return point\n  }\n\n  /**\n   * Create a range with `properties` relative to the node.\n   *\n   * @param {Object|Range} properties\n   * @return {Range}\n   */\n\n  createRange(properties) {\n    properties = Range.createProperties(properties)\n    const range = this.resolveRange(properties)\n    return range\n  }\n\n  /**\n   * Create a selection with `properties` relative to the node.\n   *\n   * @param {Object|Selection} properties\n   * @return {Selection}\n   */\n\n  createSelection(properties) {\n    properties = Selection.createProperties(properties)\n    const selection = this.resolveSelection(properties)\n    return selection\n  }\n\n  /**\n   * Recursively filter all descendant nodes with `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {List<Node>}\n   */\n\n  filterDescendants(iterator) {\n    const matches = []\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) matches.push(node)\n    })\n\n    return List(matches)\n  }\n\n  /**\n   * Recursively find a descendant node by `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  findDescendant(iterator) {\n    let found = null\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) {\n        found = node\n        return false\n      }\n    })\n\n    return found\n  }\n\n  /**\n   * Recursively find a descendant node and its path by `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Null|[Node, List]}\n   */\n\n  findDescendantAndPath(\n    iterator,\n    pathToThisNode = PathUtils.create([]),\n    findLast = false\n  ) {\n    let found\n    let foundPath\n\n    this.forEachDescendantWithPath(\n      (node, path, nodes) => {\n        if (iterator(node, path, nodes)) {\n          found = node\n          foundPath = path\n          return false\n        }\n      },\n      pathToThisNode,\n      findLast\n    )\n\n    return found ? [found, foundPath] : null\n  }\n\n  // Easy helpers to avoid needing to pass findLast boolean\n  findFirstDescendantAndPath(iterator, pathToThisNode) {\n    return this.findDescendantAndPath(iterator, pathToThisNode, false)\n  }\n\n  findLastDescendantAndPath(iterator, pathToThisNode) {\n    return this.findDescendantAndPath(iterator, pathToThisNode, true)\n  }\n\n  /**\n   * Recursively iterate over all descendant nodes with `iterator`. If the\n   * iterator returns false it will break the loop.\n   *\n   * @param {Function} iterator\n   */\n\n  forEachDescendant(iterator) {\n    let ret\n\n    this.nodes.forEach((child, i, nodes) => {\n      if (iterator(child, i, nodes) === false) {\n        ret = false\n        return false\n      }\n\n      if (child.object !== 'text') {\n        ret = child.forEachDescendant(iterator)\n        return ret\n      }\n    })\n\n    return ret\n  }\n\n  /**\n   * Recursively iterate over all descendant nodes with `iterator`. If the\n   * iterator returns false it will break the loop.\n   * Calls iterator with node and path.\n   *\n   * @param {Function} iterator\n   * @param {List} path\n   * @param {Boolean} findLast - whether to iterate in reverse order\n   */\n\n  forEachDescendantWithPath(iterator, path = PathUtils.create([]), findLast) {\n    let nodes = this.nodes\n    let ret\n\n    if (findLast) nodes = nodes.reverse()\n\n    nodes.forEach((child, i) => {\n      const childPath = path.concat(i)\n\n      if (iterator(child, childPath, nodes) === false) {\n        ret = false\n        return false\n      }\n\n      if (child.object !== 'text') {\n        ret = child.forEachDescendantWithPath(iterator, childPath, findLast)\n        return ret\n      }\n    })\n\n    return ret\n  }\n\n  /**\n   * Get a set of the active marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return Set()\n\n    if (range.isCollapsed) {\n      const { start } = range\n      return this.getMarksAtPosition(start.path, start.offset).toSet()\n    }\n\n    const { start, end } = range\n    let startPath = start.path\n    let startOffset = start.offset\n    let endPath = end.path\n    let endOffset = end.offset\n    let startText = this.getDescendant(startPath)\n    let endText = this.getDescendant(endPath)\n\n    if (!PathUtils.isEqual(startPath, endPath)) {\n      while (!PathUtils.isEqual(startPath, endPath) && endOffset === 0) {\n        ;[endText, endPath] = this.getPreviousTextAndPath(endPath)\n        endOffset = endText.text.length\n      }\n\n      while (\n        !PathUtils.isEqual(startPath, endPath) &&\n        startOffset === startText.text.length\n      ) {\n        ;[startText, startPath] = this.getNextTextAndPath(startPath)\n        startOffset = 0\n      }\n    }\n\n    if (PathUtils.isEqual(startPath, endPath)) {\n      return startText.getActiveMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const startMarks = startText.getActiveMarksBetweenOffsets(\n      startOffset,\n      startText.text.length\n    )\n    if (startMarks.size === 0) return Set()\n    const endMarks = endText.getActiveMarksBetweenOffsets(0, endOffset)\n    let marks = startMarks.intersect(endMarks)\n\n    // If marks is already empty, the active marks is empty\n    if (marks.size === 0) {\n      return marks\n    }\n\n    ;[startText, startPath] = this.getNextTextAndPath(startPath)\n\n    while (!PathUtils.isEqual(startPath, endPath)) {\n      if (startText.text.length !== 0) {\n        marks = marks.intersect(startText.getActiveMarks())\n        if (marks.size === 0) return Set()\n      }\n\n      ;[startText, startPath] = this.getNextTextAndPath(startPath)\n    }\n    return marks\n  }\n\n  /**\n   * Get a list of the ancestors of a descendant.\n   *\n   * @param {List|String} path\n   * @return {List<Node>|Null}\n   */\n\n  getAncestors(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const ancestors = []\n\n    path.forEach((p, i) => {\n      const current = path.slice(0, i)\n      const parent = this.getNode(current)\n      ancestors.push(parent)\n    })\n\n    return List(ancestors)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocks() {\n    const array = this.getBlocksAsArray()\n    return List(array)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocksAsArray() {\n    return this.nodes.reduce((array, child) => {\n      if (child.object !== 'block') return array\n      if (!child.isLeafBlock()) return array.concat(child.getBlocksAsArray())\n      array.push(child)\n      return array\n    }, [])\n  }\n\n  /**\n   * Get the leaf block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getBlocksAtRange(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getBlocksAtRange` method has been renamed to `getLeafBlocksAtRange`.'\n    )\n\n    return this.getLeafBlocksAtRange(range)\n  }\n\n  /**\n   * Get the bottom-most block descendants in a `range` as an array\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getBlocksAtRangeAsArray(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getBlocksAtRangeAsArray` method has been renamed to `getLeafBlocksAtRangeAsArray`.'\n    )\n\n    return this.getLeafBlocksAtRangeAsArray(range)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getBlocksByType(type) {\n    const array = this.getBlocksByTypeAsArray(type)\n    return List(array)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type` as an array\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getBlocksByTypeAsArray(type) {\n    return this.nodes.reduce((array, node) => {\n      if (node.object !== 'block') {\n        return array\n      } else if (node.isLeafBlock() && node.type === type) {\n        array.push(node)\n        return array\n      } else {\n        return array.concat(node.getBlocksByTypeAsArray(type))\n      }\n    }, [])\n  }\n\n  /**\n   * Get a child node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getChild(path) {\n    path = this.resolvePath(path)\n    if (!path || path.size > 1) return null\n    const child = this.nodes.get(path.first())\n    return child\n  }\n\n  /**\n   * Get closest parent of node that matches an `iterator`.\n   *\n   * @param {List|String} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getClosest(path, iterator) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const closest = ancestors.findLast((node, ...args) => {\n      // We never want to include the top-level node.\n      if (node === this) return false\n      return iterator(node, ...args)\n    })\n\n    return closest || null\n  }\n\n  /**\n   * Get the closest block parent of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getClosestBlock(path) {\n    const closest = this.getClosest(path, n => n.object === 'block')\n    return closest\n  }\n\n  /**\n   * Get the closest inline parent of a node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getClosestInline(path) {\n    const closest = this.getClosest(path, n => n.object === 'inline')\n    return closest\n  }\n\n  /**\n   * Get the closest void parent of a node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Editor} editor\n   * @return {Node|Null}\n   */\n\n  getClosestVoid(path, editor) {\n    invariant(\n      !Value.isValue(editor),\n      'As of Slate 0.42.0, the `node.getClosestVoid` method takes an `editor` instead of a `value`.'\n    )\n\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const ancestor = ancestors.findLast(a => editor.query('isVoid', a))\n    return ancestor\n  }\n\n  /**\n   * Get the common ancestor of nodes `a` and `b`.\n   *\n   * @param {List} a\n   * @param {List} b\n   * @return {Node}\n   */\n\n  getCommonAncestor(a, b) {\n    a = this.resolvePath(a)\n    b = this.resolvePath(b)\n    if (!a || !b) return null\n\n    const path = PathUtils.relate(a, b)\n    const node = this.getNode(path)\n    return node\n  }\n\n  /**\n   * Get the decorations for the node from an `editor`.\n   *\n   * @param {Editor} editor\n   * @return {List}\n   */\n\n  getDecorations(editor) {\n    invariant(\n      !Value.isValue(editor),\n      'As of Slate 0.42.0, the `node.getDecorations` method takes an `editor` instead of a `value`.'\n    )\n\n    const array = editor.run('decorateNode', this)\n    const decorations = Decoration.createList(array)\n    return decorations\n  }\n\n  /**\n   * Get the depth of a descendant, with optional `startAt`.\n   *\n   * @param {List|String} path\n   * @param {Number} startAt\n   * @return {Number|Null}\n   */\n\n  getDepth(path, startAt = 1) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const node = this.getNode(path)\n    const depth = node ? path.size - 1 + startAt : null\n    return depth\n  }\n\n  /**\n   * Get a descendant node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getDescendant(path) {\n    path = this.resolvePath(path)\n    if (!path || !path.size) return null\n\n    let node = this\n\n    path.forEach(index => {\n      node = node.getIn(['nodes', index])\n      return !!node\n    })\n\n    return node\n  }\n\n  /**\n   * Get a fragment of the node at a `range`.\n   *\n   * @param {Range} range\n   * @return {Document}\n   */\n\n  getFragmentAtRange(range) {\n    range = this.resolveRange(range)\n\n    if (range.isUnset) {\n      return Document.create()\n    }\n\n    const { start, end } = range\n    let node = this\n    let targetPath = end.path\n    let targetPosition = end.offset\n    let mode = 'end'\n\n    while (targetPath.size) {\n      const index = targetPath.last()\n      node = node.splitNode(targetPath, targetPosition)\n      targetPosition = index + 1\n      targetPath = PathUtils.lift(targetPath)\n\n      if (!targetPath.size && mode === 'end') {\n        targetPath = start.path\n        targetPosition = start.offset\n        mode = 'start'\n      }\n    }\n\n    const startIndex = start.path.first() + 1\n    const endIndex = end.path.first() + 2\n    const nodes = node.nodes.slice(startIndex, endIndex)\n    const fragment = Document.create({ nodes })\n    return fragment\n  }\n\n  /**\n   * Get the furthest parent of a node that matches an `iterator`.\n   *\n   * @param {Path} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getFurthest(path, iterator) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const furthest = ancestors.find((node, ...args) => {\n      // We never want to include the top-level node.\n      if (node === this) return false\n      return iterator(node, ...args)\n    })\n\n    return furthest || null\n  }\n\n  /**\n   * Get the furthest ancestor of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getFurthestAncestor(path) {\n    path = this.resolvePath(path)\n    if (!path || !path.size) return null\n    const furthest = this.nodes.get(path.first())\n    return furthest\n  }\n\n  /**\n   * Get the furthest block parent of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestBlock(path) {\n    const furthest = this.getFurthest(path, n => n.object === 'block')\n    return furthest\n  }\n\n  /**\n   * Get the furthest inline parent of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestInline(path) {\n    const furthest = this.getFurthest(path, n => n.object === 'inline')\n    return furthest\n  }\n\n  /**\n   * Get the furthest ancestor of a node, where all ancestors to that point only have one child.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestOnlyChildAncestor(path) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const furthest = ancestors\n      .rest()\n      .reverse()\n      .takeUntil(p => p.nodes.size > 1)\n      .last()\n\n    return furthest || null\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlines() {\n    const array = this.getInlinesAsArray()\n    const list = List(array)\n    return list\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node, as an array.\n   *\n   * @return {Array<Node>}\n   */\n\n  getInlinesAsArray() {\n    let array = []\n\n    this.nodes.forEach(child => {\n      if (child.object === 'text') return\n\n      if (child.isLeafInline()) {\n        array.push(child)\n      } else {\n        array = array.concat(child.getInlinesAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getInlinesAtRange(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getInlinesAtRange` method has been renamed to `getLeafInlinesAtRange`.'\n    )\n\n    return this.getLeafInlinesAtRange(range)\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getInlinesAtRangeAsArray(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getInlinesAtRangeAsArray` method has been renamed to `getLeafInlinesAtRangeAsArray`.'\n    )\n\n    return this.getLeafInlinesAtRangeAsArray(range)\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getInlinesByType(type) {\n    const array = this.getInlinesByTypeAsArray(type)\n    const list = List(array)\n    return list\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getInlinesByTypeAsArray(type) {\n    const array = this.nodes.reduce((inlines, node) => {\n      if (node.object === 'text') {\n        return inlines\n      } else if (node.isLeafInline() && node.type === type) {\n        inlines.push(node)\n        return inlines\n      } else {\n        return inlines.concat(node.getInlinesByTypeAsArray(type))\n      }\n    }, [])\n\n    return array\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getInsertMarksAtRange(range) {\n    range = this.resolveRange(range)\n    const { start } = range\n\n    if (range.isUnset) {\n      return Set()\n    }\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use key and offset as proxies for cache\n      return this.getMarksAtPosition(start.path, start.offset)\n    }\n\n    const text = this.getDescendant(start.path)\n    const marks = text.getMarksAtIndex(start.offset + 1)\n    return marks\n  }\n\n  /**\n   * Get the bottom-most block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getLeafBlocksAtRange(range) {\n    const array = this.getLeafBlocksAtRangeAsArray(range)\n    // Eliminate duplicates by converting to an `OrderedSet` first.\n    return List(OrderedSet(array))\n  }\n\n  /**\n   * Get the bottom-most descendants in a `range` as an array\n   *\n   * @param {Range} range\n   * @return {Array<Node>}\n   */\n\n  getLeafBlocksAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n\n    const { start, end } = range\n\n    return this.getLeafBlocksBetweenPathPositionsAsArray(start.path, end.path)\n  }\n\n  /**\n   * Get the bottom-most descendants between two paths as an array\n   *\n   * @param {List|Null} startPath\n   * @param {List|Null} endPath\n   * @return {Array<Node>}\n   */\n\n  getLeafBlocksBetweenPathPositionsAsArray(startPath, endPath) {\n    // PERF: the most common case is when the range is in a single block node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startPath && endPath && PathUtils.isEqual(startPath, endPath)) {\n      return [this.getClosestBlock(startPath)]\n    } else if (!startPath && !endPath) {\n      return this.getBlocksAsArray()\n    }\n\n    const startIndex = startPath ? startPath.get(0, 0) : 0\n    const endIndex = endPath\n      ? endPath.get(0, this.nodes.size - 1)\n      : this.nodes.size - 1\n\n    let array = []\n\n    this.nodes.slice(startIndex, endIndex + 1).forEach((node, i) => {\n      if (node.object !== 'block') {\n        return\n      } else if (node.isLeafBlock()) {\n        array.push(node)\n      } else {\n        const childStartPath =\n          startPath && i === 0 ? PathUtils.drop(startPath) : null\n        const childEndPath =\n          endPath && i === endIndex - startIndex\n            ? PathUtils.drop(endPath)\n            : null\n\n        array = array.concat(\n          node.getLeafBlocksBetweenPathPositionsAsArray(\n            childStartPath,\n            childEndPath\n          )\n        )\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getLeafInlinesAtRange(range) {\n    const array = this.getLeafInlinesAtRangeAsArray(range)\n    // Remove duplicates by converting it to an `OrderedSet` first.\n    const list = List(OrderedSet(array))\n    return list\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array<Node>}\n   */\n\n  getLeafInlinesAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n\n    const array = this.getTextsAtRangeAsArray(range)\n      .map(text => this.getClosestInline(text.key))\n      .filter(exists => exists)\n\n    return array\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {Set<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return Set(array)\n  }\n\n  /**\n   * Get all of the marks as an array.\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    const result = []\n\n    this.nodes.forEach(node => {\n      result.push(node.getMarksAsArray())\n    })\n\n    // PERF: use only one concat rather than multiple for speed.\n    const array = [].concat(...result)\n    return array\n  }\n\n  /**\n   * Get a set of marks in a `position`, the equivalent of a collapsed range\n   *\n   * @param {List|string} key\n   * @param {number} offset\n   * @return {Set}\n   */\n\n  getMarksAtPosition(path, offset) {\n    path = this.resolvePath(path)\n    const text = this.getDescendant(path)\n    const currentMarks = text.getMarksAtIndex(offset)\n    if (offset !== 0) return currentMarks\n    const closestBlock = this.getClosestBlock(path)\n\n    if (closestBlock.text === '') {\n      // insert mark for empty block; the empty block are often created by split node or add marks in a range including empty blocks\n      return currentMarks\n    }\n\n    const previous = this.getPreviousTextAndPath(path)\n    if (!previous) return Set()\n\n    const [previousText, previousPath] = previous\n\n    if (closestBlock.hasDescendant(previousPath)) {\n      return previous.getMarksAtIndex(previousText.text.length)\n    }\n\n    return currentMarks\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtRange(range) {\n    const marks = Set(this.getOrderedMarksAtRange(range))\n    return marks\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {Set<Mark>}\n   */\n\n  getMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return Set(array)\n  }\n\n  /**\n   * Get all of the marks that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getMarksByTypeAsArray(type) {\n    const array = this.nodes.reduce((memo, node) => {\n      return node.object === 'text'\n        ? memo.concat(node.getMarksAsArray().filter(m => m.type === type))\n        : memo.concat(node.getMarksByTypeAsArray(type))\n    }, [])\n\n    return array\n  }\n\n  /**\n   * Get the block node after a descendant text node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextBlock(path) {\n    path = this.resolvePath(path)\n    const match = this.getNextDeepMatchingNodeAndPath(\n      path,\n      n => n.object === 'block'\n    )\n\n    return match ? match[0] : null\n  }\n\n  /**\n   * Get the next node in the tree from a node.\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the next ancestor if no sibling is found.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      const target = PathUtils.increment(p)\n      const node = this.getNode(target)\n      if (node) return node\n    }\n\n    return null\n  }\n\n  /**\n   * Get the next node in the tree from a node that matches iterator\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the next ancestor if no sibling is found.\n   *\n   * @param {List} path\n   * @return {Node|Null}\n   */\n\n  getNextMatchingNodeAndPath(path, iterator = () => true) {\n    if (!path) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n\n      let nextPath = PathUtils.increment(p)\n      let nextNode = this.getNode(nextPath)\n\n      while (nextNode && !iterator(nextNode)) {\n        nextPath = PathUtils.increment(nextPath)\n        nextNode = this.getNode(nextPath)\n      }\n\n      if (nextNode) return [nextNode, nextPath]\n    }\n\n    return null\n  }\n\n  /**\n   * Get the next, deepest node in the tree from a node that matches iterator\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the next ancestor if no sibling is found.\n   *\n   * @param {List} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getNextDeepMatchingNodeAndPath(path, iterator = () => true) {\n    const match = this.getNextMatchingNodeAndPath(path)\n\n    if (!match) return null\n\n    let [nextNode, nextPath] = match\n\n    let childMatch\n\n    const assign = () => {\n      childMatch =\n        nextNode.object !== 'text' &&\n        nextNode.findFirstDescendantAndPath(iterator, nextPath)\n      return childMatch\n    }\n\n    while (assign(childMatch)) {\n      ;[nextNode, nextPath] = childMatch\n    }\n\n    if (!nextNode) return null\n\n    return iterator(nextNode)\n      ? [nextNode, nextPath]\n      : this.getNextDeepMatchingNodeAndPath(match[1], iterator)\n  }\n\n  /**\n   * Get the next sibling of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextSibling(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const p = PathUtils.increment(path)\n    const sibling = this.getNode(p)\n    return sibling\n  }\n\n  /**\n   * Get the text node after a descendant text node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextText(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const next = this.getNextNode(path)\n    if (!next) return null\n    const text = next.getFirstText()\n    return text\n  }\n\n  getNextTextAndPath(path) {\n    if (!path) return null\n    if (!path.size) return null\n    const match = this.getNextDeepMatchingNodeAndPath(\n      path,\n      n => n.object === 'text'\n    )\n    return match\n  }\n\n  /**\n   * Get all of the nodes in a `range`. This includes all of the\n   * text nodes inside the range and all ancestors of those text\n   * nodes up to this node.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getNodesAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n    const { start, end } = range\n\n    // Do a depth-first stack-based search for all nodes in the range\n    // Nodes that are pushed to the stack are inside the range\n\n    // Start with the nodes that are on the highest level in the tree\n    let stack = Stack(\n      this.nodes\n        .slice(start.path.get(0), end.path.get(0) + 1)\n        .map((node, index) => ({\n          node,\n          onStartEdge: index === 0,\n          onEndEdge: index === end.path.get(0) - start.path.get(0),\n          relativeStartPath: start.path.slice(1),\n          relativeEndPath: end.path.slice(1),\n        }))\n    )\n\n    const result = []\n\n    while (stack.size > 0) {\n      const {\n        node,\n        onStartEdge,\n        onEndEdge,\n        relativeStartPath,\n        relativeEndPath,\n      } = stack.peek()\n\n      stack = stack.shift()\n      result.push(node)\n\n      if (node.object === 'text') continue\n\n      // Modify indexes to exclude children that are outside of the range\n      const startIndex = onStartEdge ? relativeStartPath.get(0) : 0\n      const endIndex = onEndEdge ? relativeEndPath.get(0) : node.nodes.size - 1\n\n      // Push children that are inside the range to the stack\n      stack = stack.pushAll(\n        node.nodes.slice(startIndex, endIndex + 1).map((n, i) => ({\n          node: n,\n          onStartEdge: onStartEdge && i === 0,\n          onEndEdge: onEndEdge && i === endIndex - startIndex,\n          relativeStartPath:\n            onStartEdge && i === 0 ? relativeStartPath.slice(1) : null,\n          relativeEndPath:\n            onEndEdge && i === endIndex - startIndex\n              ? relativeEndPath.slice(1)\n              : null,\n        }))\n      )\n    }\n\n    return List(result)\n  }\n\n  /**\n   * Get the offset for a descendant text node by `path` or `key`.\n   *\n   * @param {List|string} path\n   * @return {Number}\n   */\n\n  getOffset(path) {\n    path = this.resolvePath(path)\n    this.assertDescendant(path)\n\n    // Calculate the offset of the nodes before the highest child.\n    const index = path.first()\n\n    const offset = this.nodes\n      .slice(0, index)\n      .reduce((memo, n) => memo + n.text.length, 0)\n\n    // Recurse if need be.\n    const ret =\n      path.size === 1\n        ? offset\n        : offset + this.nodes.get(index).getOffset(PathUtils.drop(path))\n    return ret\n  }\n\n  /**\n   * Get the offset from a `range`.\n   *\n   * @param {Range} range\n   * @return {Number}\n   */\n\n  getOffsetAtRange(range) {\n    range = this.resolveRange(range)\n\n    if (range.isUnset) {\n      throw new Error('The range cannot be unset to calculcate its offset.')\n    }\n\n    if (range.isExpanded) {\n      throw new Error('The range must be collapsed to calculcate its offset.')\n    }\n\n    const { start } = range\n    const offset = this.getOffset(start.path) + start.offset\n    return offset\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarks() {\n    const array = this.getMarksAsArray()\n    return OrderedSet(array)\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksAtRange(range) {\n    range = this.resolveRange(range)\n    const { start, end } = range\n\n    if (range.isUnset) {\n      return OrderedSet()\n    }\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use path? and offset as proxies for cache\n      return this.getMarksAtPosition(start.path, start.offset)\n    }\n\n    const marks = this.getOrderedMarksBetweenPositions(\n      start.path,\n      start.offset,\n      end.path,\n      end.offset\n    )\n\n    return marks\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   * PERF: arguments use key and offset for utilizing cache\n   *\n   * @param {List|string} startPath\n   * @param {number} startOffset\n   * @param {List|string} endPath\n   * @param {number} endOffset\n   * @returns {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksBetweenPositions(startPath, startOffset, endPath, endOffset) {\n    startPath = this.resolvePath(startPath)\n    endPath = this.resolvePath(endPath)\n\n    const startText = this.getDescendant(startPath)\n\n    if (PathUtils.isEqual(startPath, endPath)) {\n      return startText.getMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const endText = this.getDescendant(endPath)\n\n    const texts = this.getTextsBetweenPathPositionsAsArray(startPath, endPath)\n\n    return OrderedSet().withMutations(result => {\n      texts.forEach(text => {\n        if (text.key === startText.key) {\n          result.union(\n            text.getMarksBetweenOffsets(startOffset, text.text.length)\n          )\n        } else if (text.key === endText.key) {\n          result.union(text.getMarksBetweenOffsets(0, endOffset))\n        } else {\n          result.union(text.getMarks())\n        }\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return OrderedSet(array)\n  }\n\n  /**\n   * Get the parent of a descendant node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getParent(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const parentPath = PathUtils.lift(path)\n    const parent = this.getNode(parentPath)\n    return parent\n  }\n\n  /**\n   * Get the block node before a descendant text node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousBlock(path) {\n    path = this.resolvePath(path)\n    const match = this.getPreviousDeepMatchingNodeAndPath(\n      path,\n      n => n.object === 'block'\n    )\n\n    return match ? match[0] : null\n  }\n\n  /**\n   * Get the highest block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getRootBlocksAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n\n    const { start, end } = range\n\n    return this.nodes.slice(start.path.first(), end.path.first() + 1)\n  }\n\n  /**\n   * Get the top-most inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getRootInlinesAtRange(range) {\n    const array = this.getRootInlinesAtRangeAsArray(range)\n    // Remove duplicates by converting it to an `OrderedSet` first.\n    const list = List(OrderedSet(array))\n    return list\n  }\n\n  /**\n   * Get the top-most inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getRootInlinesAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n\n    const array = this.getTextsAtRangeAsArray(range)\n      .map(text => this.getFurthestInline(text.key))\n      .filter(exists => exists)\n\n    return array\n  }\n\n  /**\n   * Get the previous node from a node in the tree.\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the previous ancestor if no sibling is found.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      if (p.last() === 0) continue\n\n      const target = PathUtils.decrement(p)\n      const node = this.getNode(target)\n      if (node) return node\n    }\n\n    return null\n  }\n\n  /**\n   * Get the previous node in the tree from a node that matches iterator\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the previous ancestor if no sibling is found.\n   *\n   * @param {List} path\n   * @return {Node|Null}\n   */\n\n  getPreviousMatchingNodeAndPath(path, iterator = () => true) {\n    if (!path) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      if (p.last() === 0) continue\n\n      let previousPath = PathUtils.decrement(p)\n      let previousNode = this.getNode(previousPath)\n\n      while (previousNode && !iterator(previousNode)) {\n        previousPath = PathUtils.decrement(previousPath)\n        previousNode = this.getNode(previousPath)\n      }\n\n      if (previousNode) return [previousNode, previousPath]\n    }\n\n    return null\n  }\n\n  /**\n   * Get the next previous in the tree from a node that matches iterator\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the previous ancestor if no sibling is found.\n   * Once a node is found, the last deepest child matching is returned\n   *\n   * @param {List} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getPreviousDeepMatchingNodeAndPath(path, iterator = () => true) {\n    const match = this.getPreviousMatchingNodeAndPath(path)\n\n    if (!match) return null\n\n    let [previousNode, previousPath] = match\n\n    let childMatch\n\n    const assign = () => {\n      childMatch =\n        previousNode.object !== 'text' &&\n        previousNode.findLastDescendantAndPath(iterator, previousPath)\n      return childMatch\n    }\n\n    while (assign(childMatch)) {\n      ;[previousNode, previousPath] = childMatch\n    }\n\n    if (!previousNode) return null\n\n    return iterator(previousNode)\n      ? [previousNode, previousPath]\n      : this.getPreviousDeepMatchingNodeAndPath(match[1], iterator)\n  }\n\n  /**\n   * Get the previous sibling of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousSibling(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    if (path.last() === 0) return null\n    const p = PathUtils.decrement(path)\n    const sibling = this.getNode(p)\n    return sibling\n  }\n\n  /**\n   * Get the text node before a descendant text node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousText(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const previous = this.getPreviousNode(path)\n    if (!previous) return null\n    const match = previous.getLastText()\n    return match\n  }\n\n  getPreviousTextAndPath(path) {\n    if (!path) return null\n    if (!path.size) return null\n    const match = this.getPreviousDeepMatchingNodeAndPath(\n      path,\n      n => n.object === 'text'\n    )\n    return match\n  }\n\n  /**\n   * Get the indexes of the selection for a `range`, given an extra flag for\n   * whether the node `isSelected`, to determine whether not finding matches\n   * means everything is selected or nothing is.\n   *\n   * @param {Range} range\n   * @param {Boolean} isSelected\n   * @return {Object|Null}\n   */\n\n  getSelectionIndexes(range, isSelected = true) {\n    const { start, end } = range\n\n    // PERF: if we're not selected, we can exit early.\n    if (!isSelected) {\n      return null\n    }\n\n    // if we've been given an invalid selection we can exit early.\n    if (range.isUnset) {\n      return null\n    }\n\n    // PERF: if the start and end keys are the same, just check for the child\n    // that contains that single key.\n    if (start.key === end.key) {\n      const child = this.getFurthestAncestor(start.key)\n      const index = child ? this.nodes.indexOf(child) : null\n      return { start: index, end: index + 1 }\n    }\n\n    // Otherwise, check all of the children...\n    let startIndex = null\n    let endIndex = null\n\n    this.nodes.forEach((child, i) => {\n      if (child.object === 'text') {\n        if (startIndex == null && child.key === start.key) startIndex = i\n        if (endIndex == null && child.key === end.key) endIndex = i + 1\n      } else {\n        if (startIndex == null && child.hasDescendant(start.key)) startIndex = i\n        if (endIndex == null && child.hasDescendant(end.key)) endIndex = i + 1\n      }\n\n      // PERF: exit early if both start and end have been found.\n      return startIndex == null || endIndex == null\n    })\n\n    if (isSelected && startIndex == null) startIndex = 0\n    if (isSelected && endIndex == null) endIndex = this.nodes.size\n    return startIndex == null ? null : { start: startIndex, end: endIndex }\n  }\n\n  /**\n   * Get the descendent text node at an `offset`.\n   *\n   * @param {String} offset\n   * @return {Node|Null}\n   */\n\n  getTextAtOffset(offset) {\n    // PERF: Add a few shortcuts for the obvious cases.\n    if (offset === 0) return this.getFirstText()\n    if (offset === this.text.length) return this.getLastText()\n    if (offset < 0 || offset > this.text.length) return null\n\n    let length = 0\n    const text = this.getTexts().find((node, i, nodes) => {\n      length += node.text.length\n      return length > offset\n    })\n\n    return text\n  }\n\n  /**\n   * Get the direction of the node's text.\n   *\n   * @return {String}\n   */\n\n  getTextDirection() {\n    const dir = direction(this.text)\n    return dir === 'neutral' ? null : dir\n  }\n\n  /**\n   * Recursively get all of the child text nodes in order of appearance.\n   *\n   * @return {List<Node>}\n   */\n\n  getTexts() {\n    const array = this.getTextsAsArray()\n    return List(array)\n  }\n\n  /**\n   * Recursively get all the leaf text nodes in order of appearance, as array.\n   *\n   * @return {List<Node>}\n   */\n\n  getTextsAsArray() {\n    let array = []\n\n    this.nodes.forEach(node => {\n      if (node.object === 'text') {\n        array.push(node)\n      } else {\n        array = array.concat(node.getTextsAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as a List.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getTextsAtRange(range) {\n    const arr = this.getTextsAtRangeAsArray(range)\n    return List(arr)\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array<Node>}\n   */\n\n  getTextsAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n    const { start, end } = range\n    const texts = this.getTextsBetweenPathPositionsAsArray(start.path, end.path)\n    return texts\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   * PERF: use key / path in arguments for cache\n   *\n   * @param {List|string} startPath\n   * @param {List|string} endPath\n   * @returns {Array}\n   */\n\n  getTextsBetweenPositionsAsArray(startPath, endPath) {\n    startPath = this.resolvePath(startPath)\n    endPath = this.resolvePath(endPath)\n\n    return this.getTextsBetweenPathPositionsAsArray(startPath, endPath)\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   *\n   * @param {List|falsey} startPath\n   * @param {List|falsey} endPath\n   * @returns {Array}\n   */\n\n  getTextsBetweenPathPositionsAsArray(startPath, endPath) {\n    // PERF: the most common case is when the range is in a single text node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startPath && endPath && PathUtils.isEqual(startPath, endPath)) {\n      return [this.getDescendant(startPath)]\n    } else if (!startPath && !endPath) {\n      return this.getTextsAsArray()\n    }\n\n    const startIndex = startPath ? startPath.get(0, 0) : 0\n    const endIndex = endPath\n      ? endPath.get(0, this.nodes.size - 1)\n      : this.nodes.size - 1\n\n    let array = []\n\n    this.nodes.slice(startIndex, endIndex + 1).forEach((node, i) => {\n      if (node.object === 'text') {\n        array.push(node)\n      } else {\n        // For the node at start and end of this list, we want to provide a start and end path\n        // For other nodes, we can just get all their text nodes, they are between the paths\n        const childStartPath =\n          startPath && i === 0 ? PathUtils.drop(startPath) : null\n        const childEndPath =\n          endPath && i === endIndex - startIndex\n            ? PathUtils.drop(endPath)\n            : null\n\n        array = array.concat(\n          node.getTextsBetweenPathPositionsAsArray(childStartPath, childEndPath)\n        )\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Check if the node has block children.\n   *\n   * @return {Boolean}\n   */\n\n  hasBlockChildren() {\n    return !!(this.nodes && this.nodes.find(n => n.object === 'block'))\n  }\n\n  /**\n   * Check if a child node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasChild(path) {\n    const child = this.getChild(path)\n    return !!child\n  }\n\n  /**\n   * Check if a node has inline children.\n   *\n   * @return {Boolean}\n   */\n\n  hasInlineChildren() {\n    return !!(\n      this.nodes &&\n      this.nodes.find(n => n.object === 'inline' || n.object === 'text')\n    )\n  }\n\n  /**\n   * Recursively check if a child node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasDescendant(path) {\n    const descendant = this.getDescendant(path)\n    return !!descendant\n  }\n\n  /**\n   * Check if a node has a void parent.\n   *\n   * @param {List|String} path\n   * @param {Editor} editor\n   * @return {Boolean}\n   */\n\n  hasVoidParent(path, editor) {\n    invariant(\n      !Value.isValue(editor),\n      'As of Slate 0.42.0, the `node.hasVoidParent` method takes an `editor` instead of a `value`.'\n    )\n\n    const closest = this.getClosestVoid(path, editor)\n    return !!closest\n  }\n\n  /**\n   * Insert a `node`.\n   *\n   * @param {List|String} path\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  insertNode(path, node) {\n    path = this.resolvePath(path)\n    const index = path.last()\n    const parentPath = PathUtils.lift(path)\n    let parent = this.assertNode(parentPath)\n    const nodes = parent.nodes.splice(index, 0, node)\n    parent = parent.set('nodes', nodes)\n    const ret = this.replaceNode(parentPath, parent)\n    return ret\n  }\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {String} text\n   * @param {Set} marks\n   * @return {Node}\n   */\n\n  insertText(path, offset, text, marks) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.insertText(offset, text, marks)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Check whether the node is a leaf block.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafBlock() {\n    const { object, nodes } = this\n    if (object !== 'block') return false\n    if (!nodes.size) return true\n\n    return nodes.first().object !== 'block'\n  }\n\n  /**\n   * Check whether the node is a leaf inline.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafInline() {\n    const { object, nodes } = this\n    if (object !== 'inline') return false\n    if (!nodes.size) return true\n\n    return nodes.first().object !== 'inline'\n  }\n\n  /**\n   * Check whether a descendant node is inside a range. This will return true for all\n   * text nodes inside the range and all ancestors of those text nodes up to this node.\n   *\n   * @param {List|string} path\n   * @param {Range} range\n   * @return {Node}\n   */\n\n  isNodeInRange(path, range) {\n    this.assertDescendant(path)\n    path = this.resolvePath(path)\n    range = this.resolveRange(range)\n    if (range.isUnset) return false\n\n    const toStart = PathUtils.compare(path, range.start.path)\n    const toEnd =\n      range.start.key === range.end.key\n        ? toStart\n        : PathUtils.compare(path, range.end.path)\n\n    const is = toStart !== -1 && toEnd !== 1\n    return is\n  }\n\n  /**\n   * Map all child nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapChildren(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, i) => {\n      const ret = iterator(node, i, this.nodes)\n      if (ret !== node) nodes = nodes.set(ret.key, ret)\n    })\n\n    const ret = this.set('nodes', nodes)\n    return ret\n  }\n\n  /**\n   * Map all descendant nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapDescendants(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, index) => {\n      let ret = node\n      if (ret.object !== 'text') ret = ret.mapDescendants(iterator)\n      ret = iterator(ret, index, this.nodes)\n      if (ret === node) return\n\n      nodes = nodes.set(index, ret)\n    })\n\n    const ret = this.set('nodes', nodes)\n    return ret\n  }\n\n  /**\n   * Merge a node backwards its previous sibling.\n   *\n   * @param {List|Key} path\n   * @return {Node}\n   */\n\n  mergeNode(path) {\n    const b = this.assertNode(path)\n    path = this.resolvePath(path)\n\n    if (path.last() === 0) {\n      throw new Error(\n        `Unable to merge node because it has no previous sibling: ${b}`\n      )\n    }\n\n    const withPath = PathUtils.decrement(path)\n    const a = this.assertNode(withPath)\n\n    if (a.object !== b.object) {\n      throw new Error(\n        `Unable to merge two different kinds of nodes: ${a} and ${b}`\n      )\n    }\n\n    const newNode =\n      a.object === 'text'\n        ? a.mergeText(b)\n        : a.set('nodes', a.nodes.concat(b.nodes))\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.removeNode(withPath)\n    ret = ret.insertNode(withPath, newNode)\n    return ret\n  }\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * A `newIndex` can be provided when move nodes by `key`, to account for not\n   * being able to have a key for a location in the tree that doesn't exist yet.\n   *\n   * @param {List|Key} path\n   * @param {List|Key} newPath\n   * @param {Number} newIndex\n   * @return {Node}\n   */\n\n  moveNode(path, newPath, newIndex = 0) {\n    const node = this.assertNode(path)\n    path = this.resolvePath(path)\n    newPath = this.resolvePath(newPath, newIndex)\n\n    const newParentPath = PathUtils.lift(newPath)\n    this.assertNode(newParentPath)\n\n    // TODO: this is a bit hacky, re-creating the operation that led to this method being called\n    // Alternative 1: pass the operation through from apply -> value.moveNode\n    // Alternative 2: add a third property to the operation called \"transformedNewPath\", pass that through\n    const op = Operation.create({\n      type: 'move_node',\n      path,\n      newPath,\n    })\n    newPath = PathUtils.transform(path, op).first()\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.insertNode(newPath, node)\n    return ret\n  }\n\n  /**\n   * Remove mark from text at `offset` and `length` in node.\n   *\n   * @param {List} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Node}\n   */\n\n  removeMark(path, offset, length, mark) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.removeMark(offset, length, mark)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Remove a node.\n   *\n   * @param {List|String} path\n   * @return {Node}\n   */\n\n  removeNode(path) {\n    this.assertDescendant(path)\n    path = this.resolvePath(path)\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.deleteIn(deep)\n    return ret\n  }\n\n  /**\n   * Remove `text` at `offset` in node.\n   *\n   * @param {List|Key} path\n   * @param {Number} offset\n   * @param {String} text\n   * @return {Node}\n   */\n\n  removeText(path, offset, text) {\n    let node = this.assertDescendant(path)\n    node = node.removeText(offset, text.length)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Replace a `node` in the tree.\n   *\n   * @param {List|Key} path\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  replaceNode(path, node) {\n    path = this.resolvePath(path)\n\n    if (!path) {\n      throw new Error(\n        `Unable to replace a node because it could not be found in the first place: ${path}`\n      )\n    }\n\n    if (!path.size) return node\n    this.assertNode(path)\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.setIn(deep, node)\n    return ret\n  }\n\n  /**\n   * Resolve a `decoration`, relative to the node, ensuring that the keys and\n   * offsets in the decoration exist and that they are synced with the paths.\n   *\n   * @param {Decoration|Object} decoration\n   * @return {Decoration}\n   */\n\n  resolveDecoration(decoration) {\n    decoration = Decoration.create(decoration)\n    decoration = decoration.normalize(this)\n    return decoration\n  }\n\n  /**\n   * Resolve a `point`, relative to the node, ensuring that the keys and\n   * offsets in the point exist and that they are synced with the paths.\n   *\n   * @param {Point|Object} point\n   * @return {Point}\n   */\n\n  resolvePoint(point) {\n    point = Point.create(point)\n    point = point.normalize(this)\n    return point\n  }\n\n  /**\n   * Resolve a `range`, relative to the node, ensuring that the keys and\n   * offsets in the range exist and that they are synced with the paths.\n   *\n   * @param {Range|Object} range\n   * @return {Range}\n   */\n\n  resolveRange(range) {\n    range = Range.create(range)\n    range = range.normalize(this)\n    return range\n  }\n\n  /**\n   * Resolve a `selection`, relative to the node, ensuring that the keys and\n   * offsets in the selection exist and that they are synced with the paths.\n   *\n   * @param {Selection|Object} selection\n   * @return {Selection}\n   */\n\n  resolveSelection(selection) {\n    selection = Selection.create(selection)\n    selection = selection.normalize(this)\n    return selection\n  }\n\n  /**\n   * Set `properties` on a node.\n   *\n   * @param {List|String} path\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  setNode(path, properties) {\n    let node = this.assertNode(path)\n    node = node.merge(properties)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Set `properties` on `mark` on text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  setMark(path, offset, length, mark, properties) {\n    let node = this.assertNode(path)\n    node = node.updateMark(offset, length, mark, properties)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Split a node by `path` at `position` with optional `properties` to apply\n   * to the newly split node.\n   *\n   * @param {List|String} path\n   * @param {Number} position\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  splitNode(path, position, properties) {\n    const child = this.assertNode(path)\n    path = this.resolvePath(path)\n    let a\n    let b\n\n    if (child.object === 'text') {\n      ;[a, b] = child.splitText(position)\n    } else {\n      const befores = child.nodes.take(position)\n      const afters = child.nodes.skip(position)\n      a = child.set('nodes', befores)\n      b = child.set('nodes', afters).regenerateKey()\n    }\n\n    if (properties && child.object !== 'text') {\n      b = b.merge(properties)\n    }\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.insertNode(path, b)\n    ret = ret.insertNode(path, a)\n    return ret\n  }\n}\n\n/**\n * Mix in assertion variants.\n */\n\nconst ASSERTS = ['Child', 'Depth', 'Descendant', 'Node', 'Parent', 'Path']\n\nfor (const method of ASSERTS) {\n  ElementInterface.prototype[`assert${method}`] = function(path, ...args) {\n    const ret = this[`get${method}`](path, ...args)\n\n    if (ret == null) {\n      throw new Error(\n        `\\`Node.assert${method}\\` could not find node with path or key: ${path}`\n      )\n    }\n\n    return ret\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(ElementInterface.prototype, [\n  'getBlocksAsArray',\n  'getLeafBlocksAtRangeAsArray',\n  'getBlocksByTypeAsArray',\n  'getDecorations',\n  'getFragmentAtRange',\n  'getInlinesAsArray',\n  'getInlinesByTypeAsArray',\n  'getLeafBlocksAtRangeAsArray',\n  'getLeafInlinesAtRangeAsArray',\n  'getMarksAsArray',\n  'getMarksAtPosition',\n  'getNodesAtRange',\n  'getOrderedMarksBetweenPositions',\n  'getInsertMarksAtRange',\n  'getMarksByTypeAsArray',\n  'getNextBlock',\n  'getOffset',\n  'getOffsetAtRange',\n  'getPreviousBlock',\n  'getRootBlocksAtRange',\n  'getRootInlinesAtRangeAsArray',\n  'getTextAtOffset',\n  'getTextDirection',\n  'getTextsAsArray',\n  'getTextsBetweenPathPositionsAsArray',\n])\n\n/**\n * Mix in the element interface.\n */\n\nmixin(ElementInterface, [Block, Document, Inline])\n","import mixin from '../utils/mixin'\nimport Decoration from '../models/decoration'\nimport PathUtils from '../utils/path-utils'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\n\n/**\n * The interface that `Decoration`, `Range` and `Selection` all implement, to make\n * working anchor and focus points easier.\n *\n * @type {Class}\n */\n\nclass RangeInterface {\n  /**\n   * Check whether the range is collapsed.\n   *\n   * @return {Boolean}\n   */\n\n  get isCollapsed() {\n    return (\n      this.anchor === this.focus ||\n      (this.anchor.key === this.focus.key &&\n        this.anchor.offset === this.focus.offset)\n    )\n  }\n\n  /**\n   * Check whether the range is expanded.\n   *\n   * @return {Boolean}\n   */\n\n  get isExpanded() {\n    return !this.isCollapsed\n  }\n\n  /**\n   * Check whether the range is backward.\n   *\n   * @return {Boolean}\n   */\n\n  get isBackward() {\n    const { isUnset, anchor, focus } = this\n\n    if (isUnset) {\n      return null\n    }\n\n    if (anchor.key === focus.key) {\n      return anchor.offset > focus.offset\n    }\n\n    const isBackward = PathUtils.isBefore(focus.path, anchor.path)\n    return isBackward\n  }\n\n  /**\n   * Check whether the range is forward.\n   *\n   * @return {Boolean}\n   */\n\n  get isForward() {\n    const { isBackward } = this\n    const isForward = isBackward == null ? null : !isBackward\n    return isForward\n  }\n\n  /**\n   * Check whether the range isn't set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    const { anchor, focus } = this\n    const isUnset = anchor.isUnset || focus.isUnset\n    return isUnset\n  }\n\n  /**\n   * Check whether the range is set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return !this.isUnset\n  }\n\n  /**\n   * Get the start point.\n   *\n   * @return {String}\n   */\n\n  get start() {\n    return this.isBackward ? this.focus : this.anchor\n  }\n\n  /**\n   * Get the end point.\n   *\n   * @return {String}\n   */\n\n  get end() {\n    return this.isBackward ? this.anchor : this.focus\n  }\n\n  /**\n   * Flip the range.\n   *\n   * @return {Range}\n   */\n\n  flip() {\n    const range = this.setPoints([this.focus, this.anchor])\n    return range\n  }\n\n  /**\n   * Move the anchor and focus offsets forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveForward(n) {\n    return this.updatePoints(point => point.moveForward(n))\n  }\n\n  /**\n   * Move the anchor and focus offsets backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveBackward(n) {\n    return this.updatePoints(point => point.moveBackward(n))\n  }\n\n  /**\n   * Move the anchor offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveAnchorBackward(n) {\n    const range = this.setAnchor(this.anchor.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the anchor offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveAnchorForward(n) {\n    const range = this.setAnchor(this.anchor.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveAnchorTo(path, offset) {\n    const range = this.setAnchor(this.anchor.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToStartOfNode(node) {\n    const range = this.setAnchor(this.anchor.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToEndOfNode(node) {\n    const range = this.setAnchor(this.anchor.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the end offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveEndBackward(n) {\n    const range = this.setEnd(this.end.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the end offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveEndForward(n) {\n    const range = this.setEnd(this.end.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's end point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveEndTo(path, offset) {\n    const range = this.setEnd(this.end.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's end point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveEndToStartOfNode(node) {\n    const range = this.setEnd(this.end.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's end point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveEndToEndOfNode(node) {\n    const range = this.setEnd(this.end.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the focus offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveFocusBackward(n) {\n    const range = this.setFocus(this.focus.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the focus offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveFocusForward(n) {\n    const range = this.setFocus(this.focus.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveFocusTo(path, offset) {\n    const range = this.setFocus(this.focus.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToStartOfNode(node) {\n    const range = this.setFocus(this.focus.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToEndOfNode(node) {\n    const range = this.setFocus(this.focus.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the start offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveStartBackward(n) {\n    const range = this.setStart(this.start.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the start offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveStartForward(n) {\n    const range = this.setStart(this.start.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's start point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveStartTo(path, offset) {\n    const range = this.setStart(this.start.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's start point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveStartToStartOfNode(node) {\n    const range = this.setStart(this.start.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's start point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveStartToEndOfNode(node) {\n    const range = this.setStart(this.start.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move range's points to a new `path` and `offset`.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveTo(path, offset) {\n    return this.updatePoints(point => point.moveTo(path, offset))\n  }\n\n  /**\n   * Move the focus point to the anchor point.\n   *\n   * @return {Range}\n   */\n\n  moveToAnchor() {\n    const range = this.setFocus(this.anchor)\n    return range\n  }\n\n  /**\n   * Move the start point to the end point.\n   *\n   * @return {Range}\n   */\n\n  moveToEnd() {\n    const range = this.setStart(this.end)\n    return range\n  }\n\n  /**\n   * Move the range's points to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveToEndOfNode(node) {\n    return this.updatePoints(point => point.moveToEndOfNode(node))\n  }\n\n  /**\n   * Move the anchor point to the focus point.\n   *\n   * @return {Range}\n   */\n\n  moveToFocus() {\n    const range = this.setAnchor(this.focus)\n    return range\n  }\n\n  /**\n   * Move to the entire range of `start` and `end` nodes.\n   *\n   * @param {Node} start\n   * @param {Node} end (optional)\n   * @return {Range}\n   */\n\n  moveToRangeOfNode(start, end = start) {\n    const range = this.setPoints([\n      this.anchor.moveToStartOfNode(start),\n      this.focus.moveToEndOfNode(end),\n    ])\n\n    return range\n  }\n\n  /**\n   * Move the end point to the start point.\n   *\n   * @return {Range}\n   */\n\n  moveToStart() {\n    const range = this.setEnd(this.start)\n    return range\n  }\n\n  /**\n   * Move the range's points to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveToStartOfNode(node) {\n    return this.updatePoints(point => point.moveToStartOfNode(node))\n  }\n\n  /**\n   * Normalize the range, relative to a `node`, ensuring that the anchor\n   * and focus nodes of the range always refer to leaf text nodes.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  normalize(node) {\n    return this.updatePoints(point => point.normalize(node))\n  }\n\n  /**\n   * Set the anchor point to a new `anchor`.\n   *\n   * @param {Point} anchor\n   * @return {Range}\n   */\n\n  setAnchor(anchor) {\n    const range = this.set('anchor', anchor)\n    return range\n  }\n\n  /**\n   * Set the end point to a new `point`.\n   *\n   * @param {Point} point\n   * @return {Range}\n   */\n\n  setEnd(point) {\n    const range = this.isBackward ? this.setAnchor(point) : this.setFocus(point)\n    return range\n  }\n\n  /**\n   * Set the focus point to a new `focus`.\n   *\n   * @param {Point} focus\n   * @return {Range}\n   */\n\n  setFocus(focus) {\n    const range = this.set('focus', focus)\n    return range\n  }\n\n  /**\n   * Set the anchor and focus points to new `values`.\n   *\n   * @param {Array<Point>} values\n   * @return {Range}\n   */\n\n  setPoints(values) {\n    const [anchor, focus] = values\n    const range = this.set('anchor', anchor).set('focus', focus)\n    return range\n  }\n\n  /**\n   * Set the anchor and focus points with `updater` callback\n   *\n   * @param {Function} updater\n   * @return {Range}\n   */\n\n  updatePoints(updater) {\n    let { anchor, focus } = this\n    anchor = updater(anchor)\n    focus = updater(focus)\n    return this.merge({ anchor, focus })\n  }\n\n  /**\n   * Set the start point to a new `point`.\n   *\n   * @param {Point} point\n   * @return {Range}\n   */\n\n  setStart(point) {\n    const range = this.isBackward ? this.setFocus(point) : this.setAnchor(point)\n    return range\n  }\n\n  /**\n   * Set new `properties` on the range.\n   *\n   * @param {Object|Range} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Range.createProperties(properties)\n    const { anchor, focus, ...props } = properties\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    const range = this.merge(props)\n    return range\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n    }\n\n    return object\n  }\n\n  /**\n   * Return a `Range` instance from any range-like instance.\n   *\n   * @return {Range}\n   */\n\n  toRange() {\n    const properties = Range.createProperties(this)\n    const range = Range.create(properties)\n    return range\n  }\n\n  /**\n   * Unset the range.\n   *\n   * @return {Range}\n   */\n\n  unset() {\n    const range = this.updatePoints(p => p.unset())\n    return range\n  }\n}\n\n/**\n * Mix in the range interface.\n *\n * @param {Record}\n */\n\nmixin(RangeInterface, [Decoration, Range, Selection])\n","import './interfaces/object'\nimport './interfaces/model'\nimport './interfaces/node'\nimport './interfaces/element'\nimport './interfaces/range'\n\nimport Block from './models/block'\nimport Change from './models/change'\nimport Data from './models/data'\nimport Decoration from './models/decoration'\nimport Document from './models/document'\nimport Editor from './controllers/editor'\nimport Inline from './models/inline'\nimport KeyUtils from './utils/key-utils'\nimport Leaf from './models/leaf'\nimport Mark from './models/mark'\nimport Node from './models/node'\nimport Operation from './models/operation'\nimport PathUtils from './utils/path-utils'\nimport Point from './models/point'\nimport Range from './models/range'\nimport Selection from './models/selection'\nimport Text from './models/text'\nimport TextUtils from './utils/text-utils'\nimport Value from './models/value'\nimport { resetMemoization, useMemoization } from './utils/memoize'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport {\n  Block,\n  Change,\n  Data,\n  Decoration,\n  Document,\n  Editor,\n  Inline,\n  KeyUtils,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  PathUtils,\n  Point,\n  Range,\n  resetMemoization,\n  Selection,\n  Text,\n  TextUtils,\n  useMemoization,\n  Value,\n}\n\nexport default {\n  Block,\n  Change,\n  Data,\n  Decoration,\n  Document,\n  Editor,\n  Inline,\n  KeyUtils,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  PathUtils,\n  Point,\n  Range,\n  resetMemoization,\n  Selection,\n  Text,\n  TextUtils,\n  useMemoization,\n  Value,\n}\n"],"names":["n","generate","create","key","Error","setGenerator","func","resetGenerator","Data","attrs","Map","isMap","isPlainObject","fromJSON","object","fromJS","DEFAULTS","undefined","Document","options","data","toJSON","nodes","toArray","map","preserveKeys","isDocument","List","isList","Array","isArray","KeyUtils","document","Node","createList","Record","Inline","type","isInline","elements","list","inline","any","every","item","Mark","isMark","Set","isSet","marks","props","mark","Leaf","newMark","equals","has","newMarks","withMutations","remove","add","set","union","offset","string","text","next","slice","m","isLeaf","leaves","size","invalid","result","findLast","leaf","index","firstLeaf","cache","first","unshift","endOffset","left","right","find","startOffset","length","of","take","skip","push","ENABLED","LEAF","Symbol","STORE_KEY","UNDEFINED","NULL","UNSET","memoizeStore","WeakMap","memoize","properties","property","original","args","apply","get","noArgs","hasArgs","takesArguments","cachedValue","keys","getIn","value","v","setIn","child","newChild","resetMemoization","useMemoization","enabled","Text","l","addMarks","newFirst","splitLeaves","before","bundle","middle","after","concat","x","setLeaves","decorations","d","forEach","start","dec","end","hasStart","hasEnd","addMark","createLeaves","getActiveMarks","leafEnd","leafStart","intersect","toOrderedSet","c","getMarks","array","getMarksAsArray","OrderedSet","prototype","searchLeafAtOffset","delta","beforeText","afterText","nextLeaves","splice","removeMark","getLeaves","r","merge","updateMark","splitted","one","two","regenerateKey","isText","ranges","node","isNode","kind","Block","isBlock","block","compare","path","target","min","i","pv","tv","crop","a","b","ca","cb","decrement","increment","getAncestors","ancestors","newValue","newPath","isAbove","p","t","isAfter","isBefore","isEqual","isOlder","pl","tl","isSibling","butLast","isYounger","lift","parent","drop","relative","max","Math","relate","av","bv","transform","operation","position","pIndex","pEqual","pYounger","pAbove","np","paths","Point","point","isUnset","is","PathUtils","range","isAfterPoint","isBeforePoint","last","getLastText","getFirstText","hasNode","moveForward","setOffset","moveBackward","moveTo","getNode","getPath","getTextAtOffset","getOffset","isPoint","Decoration","createProperties","anchor","focus","decoration","isDecoration","Range","isRange","JSON","stringify","TYPES","isObject","Selection","isSelection","selection","isFocused","createSet","Value","insertNode","mapRanges","updatePoints","setPath","assertNode","insertText","newDocument","mergeNode","resolvePath","withPath","moveAnchorTo","moveFocusTo","newIndex","moveNode","prev","getPreviousText","getNextText","removeNode","moveStartTo","unset","moveEndTo","removeText","setNode","setMark","resolveDecoration","setProperties","resolveSelection","splitNode","iterator","sel","createSelection","decs","createDecoration","filter","preserveData","preserveDecorations","preserveSelection","getClosestBlock","getClosestInline","getDescendant","getNextBlock","getPreviousBlock","getNextInline","getPreviousInline","getMarksAtRange","getActiveMarksAtRange","getLeafBlocksAtRange","getFragmentAtRange","getLeafInlinesAtRange","getTextsAtRange","isValue","moveToStartOfNode","debug","Debug","applyOperation","op","Operation","setSelection","invertOperation","inverse","inversePath","transformedSibling","inverseNode","inverseProperties","pick","Object","inverseMark","inverseSelection","inverseProps","inverseValue","OPERATION_ATTRIBUTES","inverted","invert","json","ATTRIBUTES","toJS","isOperation","Change","operations","o","isChange","change","CommandsPlugin","commands","onCommand","command","editor","fn","onConstruct","registerCommand","SURROGATE_START","SURROGATE_END","SPACE","CHAMELEON","PUNCTUATION","isSurrogate","code","isWord","char","remaining","test","charAt","getCharLength","rest","charCodeAt","getCharOffset","getCharOffsetBackward","reverse","getCharOffsetForward","getWordOffset","started","getWordOffsetBackward","getWordOffsetForward","deleteExpandedAtRange","isExpanded","deleteAtRange","hasDescendant","moveToStart","normalize","Commands","addMarkAtRange","isCollapsed","texts","withoutNormalizing","addMarkByKey","addMarksAtRange","snapshotSelection","startKey","endKey","isStartVoid","hasVoidParent","isEndVoid","startBlock","endBlock","isHanging","prevText","startVoid","getClosestVoid","nextText","removeNodeByKey","endVoid","removeTextByKey","startText","endText","startLength","endLength","ancestor","getCommonAncestor","startChild","getFurthestAncestor","endChild","startParent","getParent","startParentIndex","indexOf","endParentIndex","afters","startChildIndex","endChildIndex","middles","befores","lonely","getFurthestOnlyChildAncestor","moveNodeByKey","mergeNodeByKey","deleteBackwardAtRange","voidParent","isAtStartOfNode","prevBlock","prevVoid","moveFocusBackward","traversed","deleteCharBackwardAtRange","TextUtils","deleteCharForwardAtRange","deleteForwardAtRange","isVoid","nextBlock","isAtEndOfNode","nextVoid","moveFocusForward","deleteLineBackwardAtRange","deleteLineForwardAtRange","deleteWordBackwardAtRange","deleteWordForwardAtRange","wordOffset","insertBlockAtRange","startInline","extra","insertNodeByKey","atEnd","siblingText","splitRange","moveToEndOfNode","splitDescendantsByKey","insertFragmentAtRange","fragment","mapDescendants","isAtStart","blocks","getBlocks","firstChild","lastChild","firstBlock","lastBlock","insertionNode","findInsertionNode","hasBlockChildren","lonelyParent","getFurthest","lonelyChild","startIndex","excludingLonelyChild","nextChild","getNextSibling","nextNodes","skipUntil","lastIndex","findDescendant","inlineChild","inlineIndex","hasSingleNode","firstNode","fragmentInner","matches","documentNode","documentInner","insertInlineAtRange","assertDescendant","splitNodeByKey","insertTextAtRange","insertTextByKey","removeMarkAtRange","removeMarkByKey","setBlocksAtRange","sets","setNodeByKey","setInlinesAtRange","inlines","splitBlockAtRange","height","h","isBackward","flip","moveAnchorToStartOfNode","setFocus","resolveRange","splitInlineAtRange","Infinity","toggleMarkAtRange","exists","some","unwrapBlockAtRange","wrappers","getClosest","isSuperset","toList","children","firstMatch","lastMatch","takeUntil","firstText","unwrapInlineAtRange","wrapBlockAtRange","clear","firstblock","lastblock","siblings","p1","p2","indexes","reduce","ind","wrapInlineAtRange","inlineParent","wrapInlineByKey","endInline","endIndex","splitText","inlinekey","rng","select","startInner","startInnerIndex","endInner","startInlines","endInlines","startNode","endNode","wrapTextAtRange","prefix","suffix","startRange","endRange","moveToEnd","addMarkByPath","bx","by","ax","ay","insertFragmentByPath","insertNodeByPath","insertTextByPath","getMarksAtIndex","updated","isAtomic","setDecorations","mergeNodeByPath","previous","getPreviousSibling","moveNodeByPath","newParentPath","removeMarkByPath","removeAllMarksByPath","state","getTextsAsArray","removeNodeByPath","removeTextByPath","from","to","removals","replaceNodeByPath","newNode","parentPath","replaceTextByPath","createRange","activeMarks","activeMark","setMarkByPath","setNodeByPath","setTextByPath","splitNodeByPath","splitDescendantsByPath","textPath","textOffset","prevIndex","unwrapInlineByPath","moveToRangeOfNode","unwrapBlockByPath","unwrapNodeByPath","parentIndex","grandPath","isFirst","isLast","updatedPath","unwrapChildrenByPath","childIndex","childPath","wrapBlockByPath","wrapInlineByPath","wrapNodeByPath","COMMANDS","method","assertPath","newKey","textKey","save","tmp","undos","lastBatch","lastOperation","shouldMerge","batch","pop","takeLast","withoutSaving","redos","newData","setData","redo","omit","undo","withoutMerging","blur","deselect","proxy","moveAnchorBackward","pointBackward","moveAnchorWordBackward","pointWordBackward","moveAnchorForward","pointForward","moveAnchorWordForward","pointWordForward","moveAnchorToEndOfBlock","pointEdgeObject","moveAnchorToEndOfInline","moveAnchorToEndOfDocument","moveAnchorToEndOfNode","moveToAnchor","moveAnchorToEndOfNextBlock","pointEdgeSideObject","moveAnchorToEndOfNextInline","moveAnchorToEndOfNextText","moveAnchorToEndOfPreviousBlock","moveAnchorToEndOfPreviousInline","moveAnchorToEndOfPreviousText","moveAnchorToEndOfText","moveAnchorToStartOfBlock","moveAnchorToStartOfDocument","moveAnchorToStartOfInline","moveAnchorToStartOfNextBlock","moveAnchorToStartOfNextInline","moveAnchorToStartOfNextText","moveAnchorToStartOfPreviousBlock","moveAnchorToStartOfPreviousInline","moveAnchorToStartOfPreviousText","moveAnchorToStartOfText","moveWordBackward","moveFocusWordBackward","moveToFocus","moveEndBackward","moveEndWordBackward","moveEndForward","moveEndWordForward","moveEndToEndOfBlock","moveEndToEndOfDocument","moveEndToEndOfNode","moveEndToEndOfInline","moveEndToEndOfNextBlock","moveEndToEndOfNextInline","moveEndToEndOfNextText","moveEndToEndOfPreviousBlock","moveEndToEndOfPreviousInline","moveEndToEndOfPreviousText","moveEndToEndOfText","moveEndToStartOfBlock","moveEndToStartOfDocument","moveEndToStartOfNode","moveEndToStartOfInline","moveEndToStartOfNextBlock","moveEndToStartOfNextInline","moveEndToStartOfNextText","moveEndToStartOfPreviousBlock","moveEndToStartOfPreviousInline","moveEndToStartOfPreviousText","moveEndToStartOfText","moveFocusWordForward","moveFocusToEndOfBlock","moveFocusToEndOfDocument","moveFocusToEndOfNode","moveFocusToEndOfInline","moveFocusToEndOfNextBlock","moveFocusToEndOfNextInline","moveFocusToEndOfNextText","moveFocusToEndOfPreviousBlock","moveFocusToEndOfPreviousInline","moveFocusToEndOfPreviousText","moveFocusToEndOfText","moveFocusToStartOfBlock","moveFocusToStartOfDocument","moveFocusToStartOfNode","moveFocusToStartOfInline","moveFocusToStartOfNextBlock","moveFocusToStartOfNextInline","moveFocusToStartOfNextText","moveFocusToStartOfPreviousBlock","moveFocusToStartOfPreviousInline","moveFocusToStartOfPreviousText","moveFocusToStartOfText","moveWordForward","moveStartBackward","moveStartWordBackward","moveStartForward","moveStartWordForward","moveStartToEndOfBlock","moveStartToEndOfDocument","moveStartToEndOfNode","moveStartToEndOfInline","moveStartToEndOfNextBlock","moveStartToEndOfNextInline","moveStartToEndOfNextText","moveStartToEndOfPreviousBlock","moveStartToEndOfPreviousInline","moveStartToEndOfPreviousText","moveStartToEndOfText","moveStartToStartOfBlock","moveStartToStartOfDocument","moveStartToStartOfNode","moveStartToStartOfInline","moveStartToStartOfNextBlock","moveStartToStartOfNextInline","moveStartToStartOfNextText","moveStartToStartOfPreviousBlock","moveStartToStartOfPreviousInline","moveStartToStartOfPreviousText","moveStartToStartOfText","moveToEndOfBlock","moveToEndOfDocument","moveToEndOfInline","moveToEndOfNextBlock","moveToEndOfNextInline","moveToEndOfNextText","moveToEndOfPreviousBlock","moveToEndOfPreviousInline","moveToEndOfPreviousText","moveToEndOfText","moveToRangeOfDocument","moveToStartOfBlock","moveToStartOfDocument","moveToStartOfInline","moveToStartOfNextBlock","moveToStartOfNextInline","moveToStartOfNextText","moveToStartOfPreviousBlock","moveToStartOfPreviousInline","moveToStartOfPreviousText","moveToStartOfText","snapshot","k","setAnchor","setEnd","setStart","edge","toUpperCase","Edge","side","Side","getDirectionNode","isInBlock","isPreviousInVoid","isNextInVoid","pointName","QueriesPlugin","queries","query","registerQuery","onQuery","ret","SlateError","captureStackTrace","constructor","stack","SchemaPlugin","schema","rules","schemaRules","rule","testRules","match","normalizeNode","error","validateNode","failure","validateRules","Queries","defaultNormalize","delete","getTexts","validateObject","validateType","validateData","validateMarks","validateText","validateFirst","validateLast","validateNodes","fail","valid","def","replace","defs","count","lastCount","nextDef","shift","rewind","err","validateParent","validatePrevious","validateNext","lastMin","deleteExpanded","deleteBackward","deleteCharBackward","deleteLineBackward","deleteWordBackward","deleteForward","deleteCharForward","deleteLineForward","deleteWordForward","insertBlock","insertFragment","lastText","lastInline","isAppending","isInserting","newTexts","includes","newText","insertInline","getInsertMarksAtRange","replaceMark","oldMark","setBlocks","setInlines","splitBlock","depth","splitInline","toggleMark","unwrapBlock","unwrapInline","wrapBlock","wrapInline","wrapText","isForward","CorePlugin","plugins","AtRange","ByPath","OnHistory","OnSelection","OnValue","WithIntent","Schema","isEmpty","Editor","controller","construct","onChange","readOnly","middleware","core","run","setReadOnly","setValue","newDirtyPaths","getDirtyPaths","dirty","memo","transformed","flushing","resolve","then","flush","obj","__command","__query","table","getKeysToPathsTable","values","fns","overrides","defineProperty","nextPath","previousPath","oldAncestors","arr","newAncestors","normalizeDirtyPaths","normalizeNodeByPath","iterations","found","registerPlugin","plugin","commandsPlugin","queriesPlugin","schemaPlugin","mixin","Interface","Classes","Class","getOwnPropertyNames","name","hasOwnProperty","desc","getOwnPropertyDescriptor","TYPE","camel","ObjectInterface","bind","entries","toLowerCase","ModelInterface","NodeInterface","descendant","nested","dict","normalizer","getText","ElementInterface","replaceNode","resolvePoint","forEachDescendant","pathToThisNode","foundPath","forEachDescendantWithPath","findDescendantAndPath","getMarksAtPosition","toSet","startPath","endPath","getPreviousTextAndPath","getNextTextAndPath","getActiveMarksBetweenOffsets","startMarks","endMarks","current","getBlocksAsArray","isLeafBlock","getLeafBlocksAtRangeAsArray","getBlocksByTypeAsArray","closest","startAt","targetPath","targetPosition","mode","furthest","getInlinesAsArray","isLeafInline","getLeafInlinesAtRangeAsArray","getInlinesByTypeAsArray","getLeafBlocksBetweenPathPositionsAsArray","childStartPath","childEndPath","getTextsAtRangeAsArray","currentMarks","closestBlock","previousText","getOrderedMarksAtRange","getMarksByTypeAsArray","getNextDeepMatchingNodeAndPath","nextNode","getNextMatchingNodeAndPath","childMatch","assign","findFirstDescendantAndPath","sibling","getNextNode","Stack","peek","onStartEdge","onEndEdge","relativeStartPath","relativeEndPath","pushAll","getOrderedMarksBetweenPositions","getMarksBetweenOffsets","getTextsBetweenPathPositionsAsArray","getPreviousDeepMatchingNodeAndPath","getRootInlinesAtRangeAsArray","getFurthestInline","previousNode","getPreviousMatchingNodeAndPath","findLastDescendantAndPath","getPreviousNode","isSelected","dir","direction","getChild","toStart","toEnd","mergeText","deep","flatMap","deleteIn","ASSERTS","RangeInterface","setPoints","updater"],"mappings":"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"}